import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as r,b as p,d as s,f as n,a as e,w as o,e as a}from"./app-C9BeCxEA.js";const u={},d=a('<ul><li><a href="#%E4%B8%80%E6%80%BB%E4%BD%93%E6%AD%A5%E9%AA%A4%E8%AF%B4%E6%98%8E">一、总体步骤说明</a><ul><li><a href="#1-%E7%BB%A7%E6%89%BFspi">1. 继承Spi</a></li><li><a href="#2-%E5%88%9D%E5%A7%8B%E5%8C%96api">2. 初始化Api</a></li><li><a href="#3-%E7%99%BB%E5%BD%95%E4%BA%A4%E6%98%93%E6%9C%8D%E5%8A%A1%E5%99%A8">3. 登录交易服务器</a></li><li><a href="#4-%E8%B0%83%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%8C%81%E4%BB%93%E6%8E%A5%E5%8F%A3queryposition">4. 调用查询持仓接口QueryPosition</a></li><li><a href="#5-%E8%BF%87%E6%BB%A4%E6%8C%81%E4%BB%93%E4%B8%AD%E7%9A%84%E9%85%8D%E8%82%A1%E6%95%B0%E6%8D%AE">5. 过滤持仓中的配股数据</a></li><li><a href="#6-%E6%8A%A5%E5%8D%95">6. 报单</a></li></ul></li><li><a href="#%E4%BA%8C%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">二、完整示例代码</a></li></ul>',1),k=a('<h1 id="配股逻辑示例代码" tabindex="-1"><a class="header-anchor" href="#配股逻辑示例代码"><span>配股逻辑示例代码</span></a></h1><h3 id="一、总体步骤说明" tabindex="-1"><a class="header-anchor" href="#一、总体步骤说明"><span>一、总体步骤说明</span></a></h3><h4 id="_1-继承spi" tabindex="-1"><a class="header-anchor" href="#_1-继承spi"><span>1. 继承Spi</span></a></h4>',3),v=s("strong",null,"TraderSpi",-1),m=s("strong",null,"TraderApi",-1),b=a(`<p>TraderApi类提供交易相关的请求接口，本示例中调用查询持仓和报单接口。</p><p>TraderSpi类提供交易相关的回调接口，本示例需要继承该类并重写查询持仓数据的回调接口。</p><h4 id="_2-初始化api" tabindex="-1"><a class="header-anchor" href="#_2-初始化api"><span>2. 初始化Api</span></a></h4><p>在方法（initialize）里完成MyTraderApi的初始化，创建TraderSpi实例，并向TraderApi实例注册；</p><h4 id="_3-登录交易服务器" tabindex="-1"><a class="header-anchor" href="#_3-登录交易服务器"><span>3. 登录交易服务器</span></a></h4><p>登录交易服务器，登录前设置必要参数，包括设置软件开发版本号，软件开发Key，心跳检测时间间隔等，登录接口返回会话ID表示登录成功；</p><h4 id="_4-调用查询持仓接口queryposition" tabindex="-1"><a class="header-anchor" href="#_4-调用查询持仓接口queryposition"><span>4. 调用查询持仓接口QueryPosition</span></a></h4><p>查询持仓，调用api的QueryPosition方法发出查询全市场持仓的请求。 示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询全市场持仓</span>
<span class="token keyword">void</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">queryPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> request_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//用户自定义，可用来定位查询</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> session_id_<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 下单发送失败，获取下单发送失败的错误码</span>
			XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; query position error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_5-过滤持仓中的配股数据" tabindex="-1"><a class="header-anchor" href="#_5-过滤持仓中的配股数据"><span>5. 过滤持仓中的配股数据</span></a></h4><p>根据查询结果筛出配股信息，在spi的回调函数OnQueryPosition中获取到持仓数据，根据持仓结构体中的持仓类型判断该股份是否为配售，并缓存配股数据至query_allotment_buffer_中。 示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 配股缓存</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>XTPQueryStkPositionRsp<span class="token operator">&gt;</span> query_allotment_buffer_<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">MyTraderSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnQueryPosition</span><span class="token punctuation">(</span>XTPQueryStkPositionRsp <span class="token operator">*</span> investor_position<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>error_info<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;query position error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11000350</span> <span class="token operator">==</span> error_info<span class="token operator">-&gt;</span>error_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;查询持仓结果无记录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>investor_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 配股缓存</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>XTP_POSITION_SECURITY_PLACEMENT <span class="token operator">==</span> investor_position<span class="token operator">-&gt;</span>position_security_type<span class="token punctuation">)</span>
			query_allotment_buffer_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>investor_position<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">/// TODO:缓存数据发送至UI线程</span>

		<span class="token comment">// 示例代码只是spi实例通知parent去报单，方便api实例继续运行</span>
		<span class="token function">_f_insert_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 缓存使用后清空容器</span>
		query_allotment_buffer_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="_6-报单" tabindex="-1"><a class="header-anchor" href="#_6-报单"><span>6. 报单</span></a></h4><p>根据筛选出的配股信息调用InsertOrder接口报单。 示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//报送配股订单</span>
<span class="token keyword">void</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>XTPQueryStkPositionRsp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> m_trader_spi<span class="token operator">-&gt;</span><span class="token function">getAllotmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m_trader_spi<span class="token operator">-&gt;</span><span class="token function">getAllotmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>

		<span class="token comment">// XTPOrderInsertInfo报单结构体初始化</span>
		XTPOrderInsertInfo order_info<span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order_info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>order_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 参数赋值</span>
		order_info<span class="token punctuation">.</span>market <span class="token operator">=</span> it<span class="token operator">-&gt;</span>market<span class="token punctuation">;</span>
		<span class="token function">strcpy_s</span><span class="token punctuation">(</span>order_info<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> it<span class="token operator">-&gt;</span>ticker<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// XTP_TICKER_LEN:存放证券代码的字符串长度</span>
		order_info<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">;</span>        <span class="token comment">// XTP_BUSINESS_TYPE_ALLOTMENT为配股业务类型</span>
		order_info<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_BUY<span class="token punctuation">;</span>
		order_info<span class="token punctuation">.</span>position_effect <span class="token operator">=</span> XTP_POSITION_EFFECT_INIT<span class="token punctuation">;</span>         <span class="token comment">// position_effect开平标志，除期权以外，都使用该值</span>
		order_info<span class="token punctuation">.</span>price_type <span class="token operator">=</span> XTP_PRICE_LIMIT<span class="token punctuation">;</span>                       <span class="token comment">// 价格类型</span>
		order_info<span class="token punctuation">.</span>quantity <span class="token operator">=</span> it<span class="token operator">-&gt;</span>sellable_qty<span class="token punctuation">;</span>                       <span class="token comment">// 买股票的委托数量，最小数量是1股</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_ <span class="token operator">&amp;&amp;</span> session_id_ <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 调用InsertOrder下单接口报单</span>
			<span class="token keyword">uint64_t</span> xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOrder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order_info<span class="token punctuation">,</span> session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> xtp_id<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">// 下单发送失败，获取下单发送失败的错误信息，并输出打印</span>
				XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; insert allotment orders error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="二、完整示例代码" tabindex="-1"><a class="header-anchor" href="#二、完整示例代码"><span>二、完整示例代码</span></a></h3><p>以下是MyTraderSpi.h文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_trader_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xoms_api_struct.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyTraderSpi</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TraderSpi</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">explicit</span> <span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 请求查询投资者持仓响应</span>
	<span class="token keyword">void</span> <span class="token function">OnQueryPosition</span><span class="token punctuation">(</span>XTPQueryStkPositionRsp <span class="token operator">*</span> investor_position<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 查询持仓请求完成通知</span>
	<span class="token keyword">void</span> <span class="token function">bindTraderInsertAllotOrderFunc</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span> _f_insert_order <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token comment">// 返回配股数据</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>XTPQueryStkPositionRsp<span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token function">getAllotmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>query_allotment_buffer_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token comment">//缓存的配股信息</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>XTPQueryStkPositionRsp<span class="token operator">&gt;</span> query_allotment_buffer_<span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> _f_insert_order<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是MyTraderSpi.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderSpi.h&quot;</span></span>

<span class="token class-name">MyTraderSpi</span><span class="token double-colon punctuation">::</span><span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token class-name">MyTraderSpi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyTraderSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnQueryPosition</span><span class="token punctuation">(</span>XTPQueryStkPositionRsp <span class="token operator">*</span> investor_position<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>error_info<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;query position error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11000350</span> <span class="token operator">==</span> error_info<span class="token operator">-&gt;</span>error_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;查询持仓结果无记录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>investor_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 配股缓存</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>XTP_POSITION_SECURITY_PLACEMENT <span class="token operator">==</span> investor_position<span class="token operator">-&gt;</span>position_security_type<span class="token punctuation">)</span>
			query_allotment_buffer_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>investor_position<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">/// TODO:缓存数据发送至UI线程</span>

		<span class="token comment">// 示例代码只是spi实例通知parent去报单，方便api实例继续运行</span>
		<span class="token function">_f_insert_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 缓存使用后清空容器</span>
		query_allotment_buffer_<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是MyTraderApi.h文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_trader_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderSpi.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyTraderApi</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">explicit</span> <span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 初始化</span>
	<span class="token keyword">bool</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 释放</span>
	<span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 登录</span>
	<span class="token keyword">uint64_t</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 请求查询投资者持仓</span>
	<span class="token keyword">void</span> <span class="token function">queryPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 报单</span>
	<span class="token keyword">void</span> <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	TraderApi <span class="token operator">*</span>user_trade_api_<span class="token punctuation">;</span>
	MyTraderSpi <span class="token operator">*</span>m_trader_spi<span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> session_id_<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是MyTraderApi.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderApi.h&quot;</span></span>

<span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	m_trader_spi <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

	session_id_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_ <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span>session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 创建并初始化交易API</span>
	user_trade_api_ <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">TraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateTraderApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 注册回调接口</span>
		m_trader_spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>m_trader_spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
		m_trader_spi<span class="token operator">-&gt;</span><span class="token function">bindTraderInsertAllotOrderFunc</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyTraderApi<span class="token double-colon punctuation">::</span>insertOrder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 登录前参数设置</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareKey</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareVersion</span><span class="token punctuation">(</span><span class="token string">&quot;xx.xx.xx.xx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置公有流（订单响应、成交回报）重传方式</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SubscribePublicTopic</span><span class="token punctuation">(</span>XTP_TERT_QUICK<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 释放</span>
<span class="token keyword">void</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_ <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span>session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 登录</span>
<span class="token keyword">uint64_t</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 用户请根据实际情况修改登录参数</span>
	std<span class="token double-colon punctuation">::</span>string trade_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> trade_server_port <span class="token operator">=</span> xx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_name <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_pw <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>trade_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trade_server_port<span class="token punctuation">,</span> account_name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account_pw<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 登录成功</span>
	<span class="token punctuation">{</span>
		session_id_ <span class="token operator">=</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token comment">// 登录失败</span>
	<span class="token punctuation">{</span>
		XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 查询全市场持仓</span>
<span class="token keyword">void</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">queryPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> request_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//用户自定义，可用来定位查询</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> session_id_<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 下单发送失败，获取下单发送失败的错误码</span>
			XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; query position error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//报送配股订单</span>
<span class="token keyword">void</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>XTPQueryStkPositionRsp<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> m_trader_spi<span class="token operator">-&gt;</span><span class="token function">getAllotmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m_trader_spi<span class="token operator">-&gt;</span><span class="token function">getAllotmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>

		<span class="token comment">// XTPOrderInsertInfo报单结构体初始化</span>
		XTPOrderInsertInfo order_info<span class="token punctuation">;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order_info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>order_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 参数赋值</span>
		order_info<span class="token punctuation">.</span>market <span class="token operator">=</span> it<span class="token operator">-&gt;</span>market<span class="token punctuation">;</span>
		<span class="token function">strcpy_s</span><span class="token punctuation">(</span>order_info<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> it<span class="token operator">-&gt;</span>ticker<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// XTP_TICKER_LEN:存放证券代码的字符串长度</span>
		order_info<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">;</span>        <span class="token comment">// XTP_BUSINESS_TYPE_ALLOTMENT为配股业务类型</span>
		order_info<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_BUY<span class="token punctuation">;</span>
		order_info<span class="token punctuation">.</span>position_effect <span class="token operator">=</span> XTP_POSITION_EFFECT_INIT<span class="token punctuation">;</span>         <span class="token comment">// position_effect开平标志，除期权以外，都使用该值</span>
		order_info<span class="token punctuation">.</span>price_type <span class="token operator">=</span> XTP_PRICE_LIMIT<span class="token punctuation">;</span>                       <span class="token comment">// 价格类型</span>
		order_info<span class="token punctuation">.</span>quantity <span class="token operator">=</span> it<span class="token operator">-&gt;</span>sellable_qty<span class="token punctuation">;</span>                       <span class="token comment">// 买股票的委托数量，最小数量是1股</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_ <span class="token operator">&amp;&amp;</span> session_id_ <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 调用InsertOrder下单接口报单</span>
			<span class="token keyword">uint64_t</span> xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOrder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order_info<span class="token punctuation">,</span> session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> xtp_id<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">// 下单发送失败，获取下单发送失败的错误信息，并输出打印</span>
				XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; insert allotment orders error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是main.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderApi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyTraderApi <span class="token operator">*</span>pTraderApi <span class="token operator">=</span> <span class="token keyword">new</span> MyTraderApi<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pTraderApi<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">bool</span> b_ret <span class="token operator">=</span> pTraderApi<span class="token operator">-&gt;</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b_ret<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 初始化失败程序退出</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> pTraderApi<span class="token operator">-&gt;</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 查询持仓中的配股信息</span>
			pTraderApi<span class="token operator">-&gt;</span><span class="token function">queryPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 报单方法在查询数据返回方法内被调用</span>
		<span class="token punctuation">}</span>
		<span class="token comment">//主线程循环，防止进程退出</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
			<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function _(y,f){const t=i("font");return l(),r("div",null,[p(" TOC "),d,p(" /TOC "),k,s("p",null,[n('代码通过#include "xtp_trader_api.h"，将xtptraderapi.lib中声明的类和数据类型包括进来，该头文件中有两个重要的基类：'),e(t,{color:"#ff0000"},{default:o(()=>[v]),_:1}),n("和"),e(t,{color:"#ff0000"},{default:o(()=>[m]),_:1}),n("。")]),b])}const h=c(u,[["render",_],["__file","XTP配股逻辑示例代码.html.vue"]]),w=JSON.parse('{"path":"/docs/API_DOC_XTP%E9%85%8D%E8%82%A1%E9%80%BB%E8%BE%91%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/XTP%E9%85%8D%E8%82%A1%E9%80%BB%E8%BE%91%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.html","title":"配股逻辑示例代码","lang":"zh-CN","frontmatter":{"description":"一、总体步骤说明 1. 继承Spi 2. 初始化Api 3. 登录交易服务器 4. 调用查询持仓接口QueryPosition 5. 过滤持仓中的配股数据 6. 报单 二、完整示例代码 配股逻辑示例代码 一、总体步骤说明 1. 继承Spi 代码通过#include \\"xtp_trader_api.h\\"，将xtptraderapi.lib中声明的类和数据...","head":[["meta",{"property":"og:url","content":"https://10000l.github.io/docs/API_DOC_XTP%E9%85%8D%E8%82%A1%E9%80%BB%E8%BE%91%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/XTP%E9%85%8D%E8%82%A1%E9%80%BB%E8%BE%91%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"配股逻辑示例代码"}],["meta",{"property":"og:description","content":"一、总体步骤说明 1. 继承Spi 2. 初始化Api 3. 登录交易服务器 4. 调用查询持仓接口QueryPosition 5. 过滤持仓中的配股数据 6. 报单 二、完整示例代码 配股逻辑示例代码 一、总体步骤说明 1. 继承Spi 代码通过#include \\"xtp_trader_api.h\\"，将xtptraderapi.lib中声明的类和数据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T15:52:56.000Z"}],["meta",{"property":"article:author","content":"xtp_master"}],["meta",{"property":"article:modified_time","content":"2024-06-03T15:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配股逻辑示例代码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T15:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xtp_master\\",\\"url\\":\\"https://xtp.zts.com.cn\\"}]}"]]},"headers":[{"level":3,"title":"一、总体步骤说明","slug":"一、总体步骤说明","link":"#一、总体步骤说明","children":[]},{"level":3,"title":"二、完整示例代码","slug":"二、完整示例代码","link":"#二、完整示例代码","children":[]}],"git":{"createdTime":1717429976000,"updatedTime":1717429976000,"contributors":[{"name":"linxiaolx-lx","email":"1247776138@qq.com","commits":1}]},"readingTime":{"minutes":5.8,"words":1740},"filePathRelative":"docs/API_DOC_XTP配股逻辑示例代码/XTP配股逻辑示例代码.md","localizedDate":"2024年6月3日","autoDesc":true}');export{h as comp,w as data};
