import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as u,b as o,d as s,f as n,a as t,w as p,e}from"./app-C9BeCxEA.js";const r={},d=s("h2",{id:"quoteapi",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#quoteapi"},[s("span",null,"QuoteApi")])],-1),k=s("p",null,"目录",-1),v=e('<ul><li><a href="#1-%E6%8E%A5%E5%8F%A3">1. 接口</a></li><li><a href="#2-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">2. 示例代码</a></li><li><a href="#3-createquoteapi">3. CreateQuoteApi</a></li><li><a href="#4-release">4. Release</a></li><li><a href="#5-gettradingday">5. GetTradingDay</a></li><li><a href="#6-getapiversion">6. GetApiVersion</a></li><li><a href="#7-getapilasterror">7. GetApiLastError</a></li><li><a href="#8-setudpbuffersize">8. SetUDPBufferSize</a></li><li><a href="#9-registerspi">9. RegisterSpi</a></li><li><a href="#10-setheartbeatinterval">10. SetHeartBeatInterval</a></li><li><a href="#11-setudprecvthreadaffinity">11. SetUDPRecvThreadAffinity</a></li><li><a href="#12-setudprecvthreadaffinityarray">12. SetUDPRecvThreadAffinityArray</a></li><li><a href="#13-setudpparsethreadaffinity">13. SetUDPParseThreadAffinity</a></li><li><a href="#14-setudpparsethreadaffinityarray">14. SetUDPParseThreadAffinityArray</a></li><li><a href="#15-setudpseqlogoutputflag">15. SetUDPSeqLogOutPutFlag</a></li><li><a href="#16-subscribemarketdata">16. SubscribeMarketData</a></li><li><a href="#17-unsubscribemarketdata">17. UnSubscribeMarketData</a></li><li><a href="#18-subscribeorderbook">18. SubscribeOrderBook</a></li><li><a href="#19-unsubscribeorderbook">19. UnSubscribeOrderBook</a></li><li><a href="#20-subscribetickbytick">20. SubscribeTickByTick</a></li><li><a href="#21-unsubscribetickbytick">21. UnSubscribeTickByTick</a></li><li><a href="#22-subscribeallmarketdata">22. SubscribeAllMarketData</a></li><li><a href="#23-unsubscribeallmarketdata">23. UnSubscribeAllMarketData</a></li><li><a href="#24-subscribeallorderbook">24. SubscribeAllOrderBook</a></li><li><a href="#25-unsubscribeallorderbook">25. UnSubscribeAllOrderBook</a></li><li><a href="#26-subscribealltickbytick">26. SubscribeAllTickByTick</a></li><li><a href="#27-unsubscribealltickbytick">27. UnSubscribeAllTickByTick</a></li><li><a href="#28-login">28. Login</a></li><li><a href="#29-logout">29. Logout</a></li><li><a href="#30-queryalltickers">30. QueryAllTickers</a></li><li><a href="#31-querytickerspriceinfo">31. QueryTickersPriceInfo</a></li><li><a href="#32-queryalltickerspriceinfo">32. QueryAllTickersPriceInfo</a></li><li><a href="#33-subscribealloptionmarketdata">33. SubscribeAllOptionMarketData</a></li><li><a href="#34-unsubscribealloptionmarketdata">34. UnSubscribeAllOptionMarketData</a></li><li><a href="#35-subscribealloptionorderbook">35. SubscribeAllOptionOrderBook</a></li><li><a href="#36-unsubscribealloptionorderbook">36. UnSubscribeAllOptionOrderBook</a></li><li><a href="#37-subscribealloptiontickbytick">37. SubscribeAllOptionTickByTick</a></li><li><a href="#38-unsubscribealloptiontickbytick">38. UnSubscribeAllOptionTickByTick</a></li><li><a href="#39-queryalltickersfullinfo">39. QueryAllTickersFullInfo</a></li><li><a href="#40-logintorebuildquoteserver">40. LoginToRebuildQuoteServer</a></li><li><a href="#41-logoutfromrebuildquoteserver">41. LogoutFromRebuildQuoteServer</a></li><li><a href="#42-requestrebuildquote">42. RequestRebuildQuote</a></li><li><a href="#43-queryallnqtickersfullinfo">43. QueryAllNQTickersFullInfo</a></li></ul>',1),m=e(`<p><br><br></p><p>QuoteApi类提供了行情api的初始化、登录、订阅等功能。</p><h3 id="_1-接口" tabindex="-1"><a class="header-anchor" href="#_1-接口"><span>1. 接口</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> XTP <span class="token punctuation">{</span>
	<span class="token keyword">namespace</span> API <span class="token punctuation">{</span>
		<span class="token keyword">class</span> <span class="token class-name">MD_API_EXPORT</span> QuoteApi
		<span class="token punctuation">{</span>
		<span class="token keyword">public</span><span class="token operator">:</span>
			<span class="token comment">///创建QuoteApi</span>
			<span class="token comment">///@param client_id （必须输入）用于区分同一用户的不同客户端，由用户自定义</span>
			<span class="token comment">///@param save_file_path （必须输入）存贮订阅信息文件的目录，请设定一个有可写权限的真实存在的路径，如果路径不存在的话，可能会因为写冲突而造成断线</span>
			<span class="token comment">///@param log_level 日志输出级别</span>
			<span class="token comment">///@return 创建出的UserApi</span>
			<span class="token comment">///@remark 如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接</span>
			<span class="token keyword">static</span> QuoteApi <span class="token operator">*</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> client_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>save_file_path<span class="token punctuation">,</span> XTP_LOG_LEVEL log_level<span class="token operator">=</span>XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">///删除接口对象本身</span>
			<span class="token comment">///@remark 不再使用本接口对象时,调用该函数删除接口对象</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


			<span class="token comment">///获取当前交易日</span>
			<span class="token comment">///@return 获取到的交易日</span>
			<span class="token comment">///@remark 只有登录成功后,才能得到正确的交易日</span>
			<span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取API的发行版本号</span>
			<span class="token comment">///@return 返回api发行版本号</span>
			<span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取API的系统错误</span>
			<span class="token comment">///@return 返回的错误信息，可以在Login、Logout、订阅、取消订阅失败时调用，获取失败的原因</span>
			<span class="token comment">///@remark 可以在调用api接口失败时调用，例如login失败时</span>
			<span class="token keyword">virtual</span> XTPRI <span class="token operator">*</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设置采用UDP方式连接时的单个队列接收缓冲区大小，目前可能最大使用4个缓冲区队列</span>
			<span class="token comment">///@remark 需要在Login之前调用，默认大小和最小设置均为64MB。此缓存大小单位为MB，请输入2的次方数，例如128MB请输入128。</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> buff_size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


			<span class="token comment">///注册回调接口</span>
			<span class="token comment">///@param spi 派生自回调接口类的实例，请在登录之前设定</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegisterSpi</span><span class="token punctuation">(</span>QuoteSpi <span class="token operator">*</span>spi<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设置心跳检测时间间隔，单位为秒</span>
			<span class="token comment">///@param interval 心跳检测时间间隔，单位为秒</span>
			<span class="token comment">///@remark 此函数必须在Login之前调用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> interval<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///使用UDP接收行情时，设置接收行情线程绑定的cpu，此版本不建议使用，只为跟之前的版本兼容，请替换使用SetUDPRecvThreadAffinityArray函数</span>
			<span class="token comment">///@param cpu_no 设置绑定的cpu，例如绑定cpu 0，可以设置0，绑定cpu 2，可以设置2，建议绑定后面的cpu</span>
			<span class="token comment">///@remark 此版本不建议使用,请替换使用SetUDPRecvThreadAffinityArray函数，如果调用则必须在Login之前调用，否则不会生效，与SetUDPRecvThreadAffinityArray一起使用时，仅第一个被调用的生效</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPRecvThreadAffinity</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///使用UDP接收行情时，设置接收行情线程绑定的cpu集合</span>
			<span class="token comment">///@param cpu_no_array 设置绑定的cpu集合数组</span>
			<span class="token comment">///@param count cpu集合数组长度</span>
			<span class="token comment">///@remark 此函数可不调用，如果调用则必须在Login之前调用，否则不会生效。绑核时，将从数组前面的核开始使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPRecvThreadAffinityArray</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no_array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///使用UDP接收行情时，设置解析行情线程绑定的cpu，此版本不建议使用，只为跟之前的版本兼容，请替换使用SetUDPParseThreadAffinityArray函数</span>
			<span class="token comment">///@param cpu_no 设置绑定的cpu，例如绑定cpu 0，可以设置0，绑定cpu 2，可以设置2，建议绑定后面的cpu</span>
			<span class="token comment">///@remark 此版本不建议使用，请替换使用SetUDPParseThreadAffinityArray函数，如果调用则必须在Login之前调用，否则不会生效，与SetUDPParseThreadAffinityArray一起使用时，仅第一个被调用的生效</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPParseThreadAffinity</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///使用UDP接收行情时，设置解析行情线程绑定的cpu集合</span>
			<span class="token comment">///@param cpu_no_array 设置绑定的cpu集合数组</span>
			<span class="token comment">///@param count cpu集合数组长度</span>
			<span class="token comment">///@remark 此函数可不调用，如果调用则必须在Login之前调用，否则不会生效。绑核时，将从数组前面的核开始使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPParseThreadAffinityArray</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no_array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设定UDP收行情时是否输出异步日志</span>
			<span class="token comment">///@param flag 是否输出标识，默认为true，如果不想输出&quot;udpseq&quot;开头的异步日志，请设置此参数为false</span>
			<span class="token comment">///@remark 此函数可不调用，如果调用则必须在Login之前调用，否则不会生效</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅行情，包括股票、指数和期权。</span>
			<span class="token comment">///@return 订阅接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格 </span>
			<span class="token comment">///@param count 要订阅/退订行情的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订行情，包括股票、指数和期权。</span>
			<span class="token comment">///@return 取消订阅接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
			<span class="token comment">///@param count 要订阅/退订行情的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性取消订阅同一证券交易所的多个合约，需要与订阅行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeMarketData</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅行情订单簿。</span>
			<span class="token comment">///@return 订阅行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格 </span>
			<span class="token comment">///@param count 要订阅/退订行情订单簿的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情(仅支持深交所)</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeOrderBook</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订行情订单簿。</span>
			<span class="token comment">///@return 取消订阅行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
			<span class="token comment">///@param count 要订阅/退订行情订单簿的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性取消订阅同一证券交易所的多个合约，需要与订阅行情订单簿接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeOrderBook</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅逐笔行情。</span>
			<span class="token comment">///@return 订阅逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
			<span class="token comment">///@param count 要订阅/退订行情订单簿的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeTickByTick</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订逐笔行情。</span>
			<span class="token comment">///@return 取消订阅逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
			<span class="token comment">///@param count 要订阅/退订行情订单簿的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token comment">///@remark 可以一次性取消订阅同一证券交易所的多个合约，需要与订阅逐笔行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeTickByTick</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的股票行情</span>
			<span class="token comment">///@return 订阅全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与全市场退订行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的股票行情</span>
			<span class="token comment">///@return 退订全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与订阅全市场行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的股票行情订单簿</span>
			<span class="token comment">///@return 订阅全市场行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与全市场退订行情订单簿接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的股票行情订单簿</span>
			<span class="token comment">///@return 退订全市场行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与订阅全市场行情订单簿接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的股票逐笔行情</span>
			<span class="token comment">///@return 订阅全市场逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与全市场退订逐笔行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的股票逐笔行情</span>
			<span class="token comment">///@return 退订全市场逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</span>
			<span class="token comment">///@remark 需要与订阅全市场逐笔行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///用户登录请求</span>
			<span class="token comment">///@return 登录是否成功，&quot;0&quot;表示登录成功，&quot;-1&quot;表示连接服务器出错，此时用户可以调用GetApiLastError()来获取错误代码，&quot;-2&quot;表示已存在连接，不允许重复登录，如果需要重连，请先logout，&quot;-3&quot;表示输入有错误</span>
			<span class="token comment">///@param ip 服务器ip地址，类似&quot;127.0.0.1&quot;</span>
			<span class="token comment">///@param port 服务器端口号</span>
			<span class="token comment">///@param user 登录用户名</span>
			<span class="token comment">///@param password 登录密码</span>
			<span class="token comment">///@param sock_type &quot;1&quot;代表TCP，&quot;2&quot;代表UDP</span>
			<span class="token comment">///@param local_ip 本地网卡地址，类似&quot;127.0.0.1&quot;</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


			<span class="token comment">///登出请求</span>
			<span class="token comment">///@return 登出是否成功，&quot;0&quot;表示登出成功，非&quot;0&quot;表示登出出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登出，当函数返回即可进行后续操作</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取当前交易日合约部分静态信息</span>
			<span class="token comment">///@return 发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功</span>
			<span class="token comment">///@param exchange_id 交易所代码，必须提供 1-上海 2-深圳</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickers</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取合约的最新价格信息</span>
			<span class="token comment">///@return 发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功</span>
			<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
			<span class="token comment">///@param count 要查询的合约个数</span>
			<span class="token comment">///@param exchange_id 交易所代码</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTickersPriceInfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取所有合约的最新价格信息</span>
			<span class="token comment">///@return 发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickersPriceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的期权行情</span>
			<span class="token comment">///@return 订阅全市期权场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与全市场退订期权行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的期权行情</span>
			<span class="token comment">///@return 退订全市场期权行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与订阅全市场期权行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的期权行情订单簿（目前期权没有订单簿数据）</span>
			<span class="token comment">///@return 订阅全市场期权行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与全市场退订期权行情订单簿接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的期权行情订单簿（目前期权没有订单簿数据）</span>
			<span class="token comment">///@return 退订全市场期权行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与订阅全市场期权行情订单簿接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅全市场的期权逐笔行情（目前期权没有逐笔行情数据）</span>
			<span class="token comment">///@return 订阅全市场期权逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与全市场退订期权逐笔行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///退订全市场的期权逐笔行情（目前期权没有逐笔行情数据）</span>
			<span class="token comment">///@return 退订全市场期权逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</span>
			<span class="token comment">///@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前新三板没有期权）</span>
			<span class="token comment">///@remark 需要与订阅全市场期权逐笔行情接口配套使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取沪深两市所有合约的详细静态信息，包括指数等非可交易的</span>
			<span class="token comment">///@return 发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功</span>
			<span class="token comment">///@param exchange_id 交易所代码，必须提供 1-上海 2-深圳，不支持新三板</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取新三板所有合约的详细静态信息，包括指数等非可交易的</span>
			<span class="token comment">///@return 发送查询请求是否成功，“0”表示发送查询请求成功，非“0”表示发送查询请求不成功</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllNQTickersFullInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///用户登录回补服务器请求</span>
			<span class="token comment">///@return 登录是否成功，“0”表示登录成功，“-1”表示连接服务器出错，此时用户可以调用GetApiLastError()来获取错误代码，“-2”表示已存在连接，不允许重复登录，如果需要重连，请先logout，“-3”表示输入有错误</span>
			<span class="token comment">///@param ip 服务器ip地址，类似“127.0.0.1”</span>
			<span class="token comment">///@param port 服务器端口号</span>
			<span class="token comment">///@param user 登陆用户名</span>
			<span class="token comment">///@param password 登陆密码</span>
			<span class="token comment">///@param sock_type “1”代表TCP，“2”代表UDP</span>
			<span class="token comment">///@param local_ip 本地网卡地址，类似“127.0.0.1”</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接。回补服务器会在无消息交互后定时断线，请注意仅在需要回补数据时才保持连接，回补完成后请及时logout</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LoginToRebuildQuoteServer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///登出回补服务器请求</span>
			<span class="token comment">///@return 登出是否成功，“0”表示登出成功，非“0”表示登出出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登出，当函数返回即可进行后续操作</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LogoutFromRebuildQuoteServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求回补指定行情，包括快照和逐笔</span>
			<span class="token comment">///@return 请求回补指定频道的逐笔行情接口调用是否成功，“0”表示接口调用成功，非“0”表示接口调用出错</span>
			<span class="token comment">///@param rebuild_param 指定回补的参数信息，注意一次性回补最多1000个数据，超过1000需要分批次请求，一次只能指定一种类型的数据</span>
			<span class="token comment">///@remark 仅在逐笔行情丢包时或者确实快照行情时使用，回补的行情数据将从OnRebuildTickByTick或者OnRebuildMarketData()接口回调提供，与订阅的行情数据不在同一个线程内</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">RequestRebuildQuote</span><span class="token punctuation">(</span>XTPQuoteRebuildReq<span class="token operator">*</span> rebuild_param<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			
		<span class="token keyword">protected</span><span class="token operator">:</span>
			<span class="token operator">~</span><span class="token function">QuoteApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-示例代码" tabindex="-1"><a class="header-anchor" href="#_2-示例代码"><span>2. 示例代码</span></a></h3><p>以下是MyQuoteApi.h文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_quote_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyQuoteSpi.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyQuoteApi</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span> 
	<span class="token keyword">explicit</span> <span class="token function">MyQuoteApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyQuoteApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 初始化</span>
    <span class="token keyword">bool</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span> 
    XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> user_quote_api_<span class="token punctuation">;</span>
	MyQuoteSpi<span class="token operator">*</span> m_quote_spi<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是MyQuoteApi.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyQuoteApi.h&quot;</span></span>

<span class="token class-name">MyQuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">MyQuoteApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
	user_quote_api_ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	m_quote_spi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">MyQuoteApi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyQuoteApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">MyQuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 创建并初始化行情API</span>
	user_quote_api_ <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">QuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 注册行情回调接口</span>
		m_quote_spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_quote_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>m_quote_spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 登录前参数设置</span>
		user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-createquoteapi" tabindex="-1"><a class="header-anchor" href="#_3-createquoteapi"><span>3. CreateQuoteApi</span></a></h3><p>创建QuoteApi实例。</p><p>如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接。</p>`,14),b=e(`<p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> QuoteApi <span class="token operator">*</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> client_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>save_file_path<span class="token punctuation">,</span> XTP_LOG_LEVEL log_level<span class="token operator">=</span>XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>client_id：（必须输入）客户端id，用于区分同一用户的不同客户端，由用户自定义，普通用户必须使用1-99之间的数值</p><p>save_file_path：（必须输入）存储行情api日志文件的目录，请设定一个真实存在的有可写权限的路径，如果路径不存在的话，可能会因为写冲突而造成断线</p><p>log_level：日志输出级别</p><p>3.返回</p><p>创建出的UserApi</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token keyword">uint8_t</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// 初始化api，创建单例</span>
<span class="token keyword">uint8_t</span> client_id_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
string <span class="token function">stdstr_log_path</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开发调试时用XTP_LOG_LEVEL_DEBUG，稳定运行时用XTP_LOG_LEVEL_INFO</span>
XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">;</span>

XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> user_quote_api_ <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">QuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span>client_id_<span class="token punctuation">,</span> stdstr_log_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log_level<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 注册行情回调接口</span>
    MyQuoteSpi <span class="token operator">*</span>spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user_quote_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4-release" tabindex="-1"><a class="header-anchor" href="#_4-release"><span>4. Release</span></a></h3><p>删除接口对象本身。程序退出前，不再使用本接口对象时,可调用该函数删除接口对象。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 注销当前会话并删除接口对象</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_ <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5-gettradingday" tabindex="-1"><a class="header-anchor" href="#_5-gettradingday"><span>5. GetTradingDay</span></a></h3><p>获取当前交易日。只有登录成功后,才能得到正确的交易日。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>返回一个指向日期信息字符串的常量指针。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取当前交易日</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GetTradingDay : &quot;</span> <span class="token operator">&lt;&lt;</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6-getapiversion" tabindex="-1"><a class="header-anchor" href="#_6-getapiversion"><span>6. GetApiVersion</span></a></h3><p>获取API的发行版本号。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>返回api发行版本号。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取API的发行版本号</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GetApiVersion : &quot;</span> <span class="token operator">&lt;&lt;</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_7-getapilasterror" tabindex="-1"><a class="header-anchor" href="#_7-getapilasterror"><span>7. GetApiLastError</span></a></h3><p>获取API的系统错误。</p><p>可以在调用api接口失败时调用，例如login失败时。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> XTPRI <span class="token operator">*</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///错误信息的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ERR_MSG_LEN</span> <span class="token expression"><span class="token number">124</span></span></span>
<span class="token comment">///响应信息</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPRspInfoStruct</span>
<span class="token punctuation">{</span>
	<span class="token comment">///错误代码</span>
	<span class="token keyword">int32_t</span> error_id<span class="token punctuation">;</span>
	<span class="token comment">///错误信息</span>
	<span class="token keyword">char</span> error_msg<span class="token punctuation">[</span>XTP_ERR_MSG_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> XTPRI<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取API的系统错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_8-setudpbuffersize" tabindex="-1"><a class="header-anchor" href="#_8-setudpbuffersize"><span>8. SetUDPBufferSize</span></a></h3><p>设置采用UDP方式连接时的单个队列接收缓冲区大小，目前可能最大使用4个缓冲区队列。</p><p>需要在Login之前调用，默认大小和最小设置均为64MB。此缓存大小单位为MB，请输入2的次方数，例如128MB请输入128，建议2.2.30.7以上版本设为256MB或者512MB。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> buff_size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置采用UDP方式连接时的单个队列接收缓冲区大小为256MB</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_9-registerspi" tabindex="-1"><a class="header-anchor" href="#_9-registerspi"><span>9. RegisterSpi</span></a></h3><p>注册回调接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegisterSpi</span><span class="token punctuation">(</span>QuoteSpi <span class="token operator">*</span>spi<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>spi：派生自回调接口类的实例，请在登录之前设定</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 注册行情回调接口</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyQuoteSpi <span class="token operator">*</span>spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_10-setheartbeatinterval" tabindex="-1"><a class="header-anchor" href="#_10-setheartbeatinterval"><span>10. SetHeartBeatInterval</span></a></h3><p>设置心跳检测时间间隔，单位为秒。此函数必须在Login之前调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> interval<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>interval：心跳检测时间间隔，单位为秒</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设定交易服务器超时时间为15秒，用户可自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_11-setudprecvthreadaffinity" tabindex="-1"><a class="header-anchor" href="#_11-setudprecvthreadaffinity"><span>11. SetUDPRecvThreadAffinity</span></a></h3><p>使用UDP接收行情时，设置接收行情线程绑定的cpu。</p>`,92),_=s("strong",null,"不要使用",-1),g=e(`<p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPRecvThreadAffinity</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>cpu_no：设置绑定的cpu，例如绑定cpu 1，可以设置1，绑定cpu 2，可以设置2，建议绑定后面的cpu，不要绑定cpu 0。</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置接收行情线程绑定核2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPRecvThreadAffinity</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_12-setudprecvthreadaffinityarray" tabindex="-1"><a class="header-anchor" href="#_12-setudprecvthreadaffinityarray"><span>12. SetUDPRecvThreadAffinityArray</span></a></h3><p>使用UDP接收行情时，设置接收行情线程绑定的cpu集合。</p><p>此函数可不调用，如果调用则必须在Login之前调用，否则不会生效。绑核时，将从数组前面的核开始使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPRecvThreadAffinityArray</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no_array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>cpu_no_array：设置绑定的cpu集合数组</p><p>count：cpu集合数组长度</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置接收行情线程绑定核1核2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int32_t</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPRecvThreadAffinityArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_13-setudpparsethreadaffinity" tabindex="-1"><a class="header-anchor" href="#_13-setudpparsethreadaffinity"><span>13. SetUDPParseThreadAffinity</span></a></h3><p>使用UDP接收行情时，设置解析行情线程绑定的cpu。</p>`,24),y=s("strong",null,"不要使用",-1),h=e(`<p>如果调用则必须在Login之前调用，否则不会生效，与SetUDPParseThreadAffinityArray一起使用时，仅第一个被调用的生效。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPParseThreadAffinity</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>cpu_no：设置绑定的cpu，例如绑定cpu 1，可以设置1，绑定cpu 2，可以设置2，建议绑定后面的cpu，不要绑定cpu 0。</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置解析行情线程绑定核3</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPParseThreadAffinity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_14-setudpparsethreadaffinityarray" tabindex="-1"><a class="header-anchor" href="#_14-setudpparsethreadaffinityarray"><span>14. SetUDPParseThreadAffinityArray</span></a></h3><p>使用UDP接收行情时，设置解析行情线程绑定的cpu集合。</p><p>此函数可不调用，如果调用则必须在Login之前调用，否则不会生效。绑核时，将从数组前面的核开始使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPParseThreadAffinityArray</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cpu_no_array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>cpu_no_array：设置绑定的cpu集合数组</p><p>count：cpu集合数组长度</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置解析行情线程绑定核3核4</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int32_t</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPParseThreadAffinityArray</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_15-setudpseqlogoutputflag" tabindex="-1"><a class="header-anchor" href="#_15-setudpseqlogoutputflag"><span>15. SetUDPSeqLogOutPutFlag</span></a></h3><p>设定UDP收行情时是否输出异步日志。</p><p>此函数可不调用，如果调用则必须在Login之前调用，否则不会生效。<br> 建议在调试和实盘初期时开启，稳定运行后可以关闭。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>flag：是否输出标识，默认为true，如果不想输出&quot;udpseq&quot;开头的异步日志，请设置此参数为false</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设定UDP接收行情不输出异步日志</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_16-subscribemarketdata" tabindex="-1"><a class="header-anchor" href="#_16-subscribemarketdata"><span>16. SubscribeMarketData</span></a></h3><p>订阅行情，包括股票、指数和期权。</p><p>可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订行情的合约个数</p><p>exchange_id：交易所代码</p><p>3.返回</p><p>订阅接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市的600000和600001两支股票的行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//订阅沪市的600000、600001两只股票快照行情 </span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_17-unsubscribemarketdata" tabindex="-1"><a class="header-anchor" href="#_17-unsubscribemarketdata"><span>17. UnSubscribeMarketData</span></a></h3><p>退订行情，包括股票、指数和期权。</p><p>可以一次性取消订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeMarketData</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订行情的合约个数</p><p>exchange_id：交易所代码</p><p>3.返回</p><p>取消订阅接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 取消订阅沪市的600000和600001两支股票的行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要取消订阅行情的证券代码数量，可根据实际取消订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token comment">//取消订阅沪市的600000、600001两只股票快照行情 </span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeMarketData</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_18-subscribeorderbook" tabindex="-1"><a class="header-anchor" href="#_18-subscribeorderbook"><span>18. SubscribeOrderBook</span></a></h3><p>订阅行情订单簿。</p><p>可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeOrderBook</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订行情的合约个数</p><p>exchange_id：交易所代码，不支持新三板</p><p>3.返回</p><p>订阅行情订单簿是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市的600000和600001两支股票的行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//订阅沪市的600000、600001两只股票订单簿行情</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeOrderBook</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubOrderBook</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderBook</span><span class="token punctuation">(</span>XTPOB <span class="token operator">*</span>order_book<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_19-unsubscribeorderbook" tabindex="-1"><a class="header-anchor" href="#_19-unsubscribeorderbook"><span>19. UnSubscribeOrderBook</span></a></h3><p>取消订阅行情订单簿。</p><p>可以一次性取消订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeOrderBook</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订行情的合约个数</p><p>exchange_id：交易所代码，不支持新三板</p><p>3.返回</p><p>取消订阅行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 取消订阅沪市的600000和600001两支股票的行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要取消订阅行情的证券代码数量，可根据实际取消订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//取消订阅沪市的600000、600001两只股票订单簿行情</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeOrderBook</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubOrderBook</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_20-subscribetickbytick" tabindex="-1"><a class="header-anchor" href="#_20-subscribetickbytick"><span>20. SubscribeTickByTick</span></a></h3><p>订阅逐笔行情。</p><p>可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeTickByTick</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订逐笔行情的合约个数</p><p>exchange_id：交易所代码，不支持新三板</p><p>3.返回</p><p>订阅逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市的600000和600001两支股票的逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//订阅沪市的600000、600001两只股票逐笔行情</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeTickByTick</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubTickByTick</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTickByTick</span><span class="token punctuation">(</span>XTPTBT <span class="token operator">*</span>tbt_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_21-unsubscribetickbytick" tabindex="-1"><a class="header-anchor" href="#_21-unsubscribetickbytick"><span>21. UnSubscribeTickByTick</span></a></h3><p>取消订阅逐笔行情。</p><p>可以一次性取消订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeTickByTick</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订逐笔行情的合约个数</p><p>exchange_id：交易所代码，不支持新三板</p><p>3.返回</p><p>取消订阅逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 取消订阅沪市的600000和600001两支股票的逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要取消订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span> 
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//发起取消订阅请求</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeTickByTick</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubTickByTick</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_22-subscribeallmarketdata" tabindex="-1"><a class="header-anchor" href="#_22-subscribeallmarketdata"><span>22. SubscribeAllMarketData</span></a></h3><p>订阅全市场的股票行情。</p><p>需要与全市场退订行情接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</p><p>3.返回</p><p>订阅全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场股票行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市股票行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_23-unsubscribeallmarketdata" tabindex="-1"><a class="header-anchor" href="#_23-unsubscribeallmarketdata"><span>23. UnSubscribeAllMarketData</span></a></h3><p>退订全市场的股票行情。</p><p>需要与全市场订阅行情接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板</p><p>3.返回</p><p>退订全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场股票行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市股票行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_24-subscribeallorderbook" tabindex="-1"><a class="header-anchor" href="#_24-subscribeallorderbook"><span>24. SubscribeAllOrderBook</span></a></h3><p>订阅全市场的股票行情订单簿。</p><p>需要与全市场退订行情订单簿接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持）</p><p>3.返回</p><p>订阅全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场股票行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOrderBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市股票行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderBook</span><span class="token punctuation">(</span>XTPOB <span class="token operator">*</span>order_book<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_25-unsubscribeallorderbook" tabindex="-1"><a class="header-anchor" href="#_25-unsubscribeallorderbook"><span>25. UnSubscribeAllOrderBook</span></a></h3><p>退订全市场的股票行情订单簿。</p><p>需要与全市场订阅行情订单簿接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持）</p><p>3.返回</p><p>退订全市场行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场股票行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOrderBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市股票行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_26-subscribealltickbytick" tabindex="-1"><a class="header-anchor" href="#_26-subscribealltickbytick"><span>26. SubscribeAllTickByTick</span></a></h3><p>订阅全市场的股票逐笔行情。</p><p>需要与全市场退订逐笔行情接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持）</p><p>3.返回</p><p>订阅全市场行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场股票逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllTickByTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市股票逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTickByTick</span><span class="token punctuation">(</span>XTPTBT <span class="token operator">*</span>tbt_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_27-unsubscribealltickbytick" tabindex="-1"><a class="header-anchor" href="#_27-unsubscribealltickbytick"><span>27. UnSubscribeAllTickByTick</span></a></h3><p>退订全市场的股票逐笔行情。</p><p>需要与全市场订阅逐笔行情接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持）</p><p>3.返回</p><p>退订全市场逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场股票逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllTickByTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市股票逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_28-login" tabindex="-1"><a class="header-anchor" href="#_28-login"><span>28. Login</span></a></h3><p>用户登录请求。</p><p>此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Ip：服务器ip地址，类似&quot;127.0.0.1&quot;</p><p>port：服务器端口号</p><p>user：登录用户名</p><p>password：登录密码</p><p>sock_type：&quot;1&quot;代表TCP，&quot;2&quot;代表UDP</p><p>local_ip：本地网卡地址，类似&quot;127.0.0.1&quot;</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// XTP_PROTOCOL_TYPE是通讯传输协议方式</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PROTOCOL_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PROTOCOL_TCP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;采用TCP方式传输</span>
	XTP_PROTOCOL_UDP		<span class="token comment">///&lt;采用UDP方式传输(仅行情接口支持)</span>
<span class="token punctuation">}</span>XTP_PROTOCOL_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>登陆是否成功，&quot;0&quot;表示登陆成功，非&quot;0&quot;表示登陆不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 行情采用TCP方式连接</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 登录前参数设置</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//根据本地网卡对应的ip设定</span>

	<span class="token comment">// 登录</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_TCP<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 行情采用UDP方式连接</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 登录前参数设置</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// UDP设置中绑核函数和异步日志设置函数可不调用</span>
	<span class="token keyword">int32_t</span> arr_recv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPRecvThreadAffinityArray</span><span class="token punctuation">(</span>arr_recv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int32_t</span> arr_parse<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPParseThreadAffinityArray</span><span class="token punctuation">(</span>arr_parse<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 登录</span>
	std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//根据本地网卡对应的ip设定</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_UDP<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_29-logout" tabindex="-1"><a class="header-anchor" href="#_29-logout"><span>29. Logout</span></a></h3><p>登出请求。此函数为同步阻塞式，不需要异步等待登出，当函数返回即可进行后续操作。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>登出是否成功，&quot;0&quot;表示登出成功，非&quot;0&quot;表示登出出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登出请求</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_30-queryalltickers" tabindex="-1"><a class="header-anchor" href="#_30-queryalltickers"><span>30. QueryAllTickers</span></a></h3><p>获取沪深当前交易日合约部分静态信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickers</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：交易所代码，必须提供 1-上海 2-深圳，不支持新三板</p><p>3.返回</p><p>发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取当前交易日沪市所有合约静态信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">QueryAllTickers</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAllTickers</span><span class="token punctuation">(</span>XTPQSI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_31-querytickerspriceinfo" tabindex="-1"><a class="header-anchor" href="#_31-querytickerspriceinfo"><span>31. QueryTickersPriceInfo</span></a></h3><p>获取合约的最新价格信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTickersPriceInfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ticker：合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格</p><p>count：要订阅/退订逐笔行情的合约个数</p><p>exchange_id：交易所代码</p><p>3.返回</p><p>发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取沪市的600000和600001两支股票的最新价格信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要查询的证券代码数量，可根据实际需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span> 
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 发送查询请求</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">QueryTickersPriceInfo</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTickersPriceInfo</span><span class="token punctuation">(</span>XTPTPI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_32-queryalltickerspriceinfo" tabindex="-1"><a class="header-anchor" href="#_32-queryalltickerspriceinfo"><span>32. QueryAllTickersPriceInfo</span></a></h3><p>获取所有合约的最新价格信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickersPriceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取所有合约的最新价格信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersPriceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTickersPriceInfo</span><span class="token punctuation">(</span>XTPTPI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_33-subscribealloptionmarketdata" tabindex="-1"><a class="header-anchor" href="#_33-subscribealloptionmarketdata"><span>33. SubscribeAllOptionMarketData</span></a></h3><p>订阅全市场的期权行情快照。</p><p>需要与全市场退订期权行情快照接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>订阅全市场期权行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场期权行情快照</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市期权行情快照</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_34-unsubscribealloptionmarketdata" tabindex="-1"><a class="header-anchor" href="#_34-unsubscribealloptionmarketdata"><span>34. UnSubscribeAllOptionMarketData</span></a></h3><p>退订期权行情快照。</p><p>需要与订阅全市场期权行情接口配套使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>取消订阅接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场期权行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市期权行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllOptionMarketData</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_35-subscribealloptionorderbook" tabindex="-1"><a class="header-anchor" href="#_35-subscribealloptionorderbook"><span>35. SubscribeAllOptionOrderBook</span></a></h3><p>全市场订阅期权行情订单簿。</p><p>需要与全市场退订期权行情订单簿接口配套使用。 目前期权没有OB数据。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>订阅行情订单簿是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场期权行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionOrderBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市期权行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderBook</span><span class="token punctuation">(</span>XTPOB <span class="token operator">*</span>order_book<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_36-unsubscribealloptionorderbook" tabindex="-1"><a class="header-anchor" href="#_36-unsubscribealloptionorderbook"><span>36. UnSubscribeAllOptionOrderBook</span></a></h3><p>退订全市场的期权行情订单簿。</p><p>需要与全市场订阅期权行情订单簿接口配套使用。<br> 目前期权没有OB数据。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>退订全市场行情订单簿接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场期权行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市期权行情订单簿</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllOptionOrderBook</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_37-subscribealloptiontickbytick" tabindex="-1"><a class="header-anchor" href="#_37-subscribealloptiontickbytick"><span>37. SubscribeAllOptionTickByTick</span></a></h3><p>订阅全市场的期权逐笔行情。</p><p>需要与全市场退订期权逐笔行情接口配套使用。</p><p>目前期权没有逐笔TBT数据。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>订阅全市场期权逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅全市场期权逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionTickByTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅沪市期权逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.通知函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTickByTick</span><span class="token punctuation">(</span>XTPTBT <span class="token operator">*</span>tbt_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_38-unsubscribealloptiontickbytick" tabindex="-1"><a class="header-anchor" href="#_38-unsubscribealloptiontickbytick"><span>38. UnSubscribeAllOptionTickByTick</span></a></h3><p>退订全市场的期权逐笔行情。</p><p>需要与全市场期权订阅逐笔行情接口配套使用。<br> 目前期权没有逐笔TBT数据。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">UnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id <span class="token operator">=</span> XTP_EXCHANGE_UNKNOWN<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场（不包括新三板），XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场，XTP_EXCHANGE_NQ表示新三板（目前不支持新三板）</p><p>3.返回</p><p>退订全市场期权逐笔行情接口调用是否成功，&quot;0&quot;表示接口调用成功，非&quot;0&quot;表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订全市场期权逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 退订沪市期权逐笔行情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">UnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnUnSubscribeAllOptionTickByTick</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_39-queryalltickersfullinfo" tabindex="-1"><a class="header-anchor" href="#_39-queryalltickersfullinfo"><span>39. QueryAllTickersFullInfo</span></a></h3><p>获取沪深所有合约的详细静态信息，包括指数等非可交易的。沪深两市需分市场分别查询。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>exchange_id：交易所代码，必须提供，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场（目前不支持新三板）</p><p>3.返回</p><p>发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取沪市所有合约的详细静态信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTPQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_40-logintorebuildquoteserver" tabindex="-1"><a class="header-anchor" href="#_40-logintorebuildquoteserver"><span>40. LoginToRebuildQuoteServer</span></a></h3><p>用户登录回补服务器请求。</p><p>此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接。</p><p>回补服务器会在无消息交互后定时断线，请注意仅在需要回补数据时才保持连接，回补完成后请及时logout.</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LoginToRebuildQuoteServer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Ip：服务器ip地址，类似&quot;127.0.0.1&quot;</p><p>port：服务器端口号</p><p>user：登录用户名</p><p>password：登录密码</p><p>sock_type：&quot;1&quot;代表TCP，&quot;2&quot;代表UDP</p><p>local_ip：本地网卡地址，类似&quot;127.0.0.1&quot;</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// XTP_PROTOCOL_TYPE是通讯传输协议方式</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PROTOCOL_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PROTOCOL_TCP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;采用TCP方式传输</span>
	XTP_PROTOCOL_UDP		<span class="token comment">///&lt;采用UDP方式传输(仅行情接口支持)</span>
<span class="token punctuation">}</span>XTP_PROTOCOL_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>登陆是否成功，&quot;0&quot;表示登陆成功，“-1”表示连接服务器出错，此时用户可以调用GetApiLastError()来获取错误代码，“-2”表示已存在连接，不允许重复登录，如果需要重连，请先logout，“-3”表示输入有错误。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 行情采用TCP方式连接</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 登录前参数设置</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>

	<span class="token comment">// 登录</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">LoginToRebuildQuoteServer</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 行情采用UDP方式连接</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 登录前参数设置</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// UDP设置中绑核函数和异步日志设置函数可不调用</span>
	<span class="token keyword">int32_t</span> arr_recv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPRecvThreadAffinityArray</span><span class="token punctuation">(</span>arr_recv<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int32_t</span> arr_parse<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>；
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPParseThreadAffinityArray</span><span class="token punctuation">(</span>arr_parse<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_quote_api_<span class="token operator">-&gt;</span><span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 登录</span>
	std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">LoginToRebuildQuoteServer</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_UDP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_41-logoutfromrebuildquoteserver" tabindex="-1"><a class="header-anchor" href="#_41-logoutfromrebuildquoteserver"><span>41. LogoutFromRebuildQuoteServer</span></a></h3><p>登出回补服务器请求。</p><p>此函数为同步阻塞式，不需要异步等待登出，当函数返回即可进行后续操作。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LogoutFromRebuildQuoteServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>登出是否成功，&quot;0&quot;表示登出成功，非&quot;0&quot;表示登出出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登出请求</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">LogoutFromRebuildQuoteServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_42-requestrebuildquote" tabindex="-1"><a class="header-anchor" href="#_42-requestrebuildquote"><span>42. RequestRebuildQuote</span></a></h3><p>请求回补指定行情，包括快照和逐笔。</p><p>仅在逐笔行情丢包时或者确实快照行情时使用，回补的行情数据将从OnRebuildTickByTick或者OnRebuildMarketData()接口回调提供，与订阅的行情数据不在同一个线程内。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">RequestRebuildQuote</span><span class="token punctuation">(</span>XTPQuoteRebuildReq<span class="token operator">*</span> rebuild_param<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>rebuild_param：指定回补的参数信息，注意一次性回补最多1000个数据，超过1000需要分批次请求，一次只能指定一种类型的数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///实时行情回补请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPQuoteRebuildReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///请求id 请求端自行管理定义</span>
    <span class="token keyword">int32_t</span>                     request_id<span class="token punctuation">;</span>
    <span class="token comment">///请求数据类型 1-快照 2-逐笔</span>
    XTP_QUOTE_REBUILD_DATA_TYPE data_type<span class="token punctuation">;</span>  
    <span class="token comment">///请求市场 1-上海  2-深圳</span>
    XTP_EXCHANGE_TYPE           exchange_id<span class="token punctuation">;</span> 
    <span class="token comment">///合约代码 以&#39;\\0&#39;结尾  沪深A股6位  期权8位</span>
    <span class="token keyword">char</span>                        ticker<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token comment">///data_type=逐笔 表示逐笔通道号</span>
    <span class="token keyword">int16_t</span>                     channel_number<span class="token punctuation">;</span>                
    <span class="token comment">///data_type=逐笔 表示序列号begin； =快照 表示时间begin(格式为YYYYMMDDHHMMSSsss)</span>
    <span class="token keyword">int64_t</span>                     begin<span class="token punctuation">;</span> 
    <span class="token comment">///data_type=逐笔 表示序列号end； =快照 表示时间end(格式为YYYYMMDDHHMMSSsss)   逐笔区间：[begin, end]前后闭区间  快照区间：[begin, end)  前闭后开区间      </span>
    <span class="token keyword">int64_t</span>                     end<span class="token punctuation">;</span>                    
<span class="token punctuation">}</span>XTPQuoteRebuildReq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_QUOTE_DATA_TYPE是行情数据类型 逐笔，快照等</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_QUOTE_REBUILD_DATA_TYPE</span> <span class="token punctuation">{</span>
	XTP_QUOTE_REBUILD_UNKNOW <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;未知类型</span>
	XTP_QUOTE_REBUILD_MD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;快照类型</span>
	XTP_QUOTE_REBUILD_TBT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;逐笔类型</span>
<span class="token punctuation">}</span>XTP_QUOTE_REBUILD_DATA_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>请求回补指定频道的逐笔行情接口调用是否成功，“0”表示接口调用成功，非“0”表示接口调用出错。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 请求回补上证600000股票的快照</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
	XTPQuoteRebuildReq<span class="token operator">*</span> rebuild_param<span class="token punctuation">;</span>
	rebuild_param<span class="token operator">-&gt;</span>request_id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	rebuild_param<span class="token operator">-&gt;</span>data_type <span class="token operator">=</span> XTP_QUOTE_REBUILD_MD<span class="token punctuation">;</span>
	rebuild_param<span class="token operator">-&gt;</span>exchange_id <span class="token operator">=</span> XTP_EXCHANGE_SH<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>rebuild_param<span class="token operator">-&gt;</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">RequestRebuildQuote</span><span class="token punctuation">(</span>rebuild_param<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///请求回补指定频道的逐笔行情的总体结果应答</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnRequestRebuildQuote</span><span class="token punctuation">(</span>XTPQuoteRebuildResultRsp<span class="token operator">*</span> rebuild_result<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">///回补的逐笔行情数据</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnRebuildTickByTick</span><span class="token punctuation">(</span>XTPTBT <span class="token operator">*</span>tbt_data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">///回补的快照行情数据</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnRebuildMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>md_data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_43-queryallnqtickersfullinfo" tabindex="-1"><a class="header-anchor" href="#_43-queryallnqtickersfullinfo"><span>43. QueryAllNQTickersFullInfo</span></a></h3><p>获取新三板所有合约的详细静态信息，包括指数等非可交易的。<br> 此函数仅可在成功登陆新三板行情服务器后使用，如果在沪深行情服务器上使用，将得不到响应。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllNQTickersFullInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>发送查询请求是否成功，&quot;0&quot;表示发送查询请求成功，非&quot;0&quot;表示发送查询请求不成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取新三板所有合约的详细静态信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_quote_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_quote_api_<span class="token operator">-&gt;</span><span class="token function">QueryAllNQTickersFullInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAllNQTickersFullInfo</span><span class="token punctuation">(</span>XTPNQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br>`,475);function T(f,w){const a=i("font");return l(),u("div",null,[d,k,o(" TOC "),v,o(" /TOC "),m,s("p",null,[n("2.2.33.5以上版本支持一个进程中创建多个QuoteApi实例，但是每个实例的"),t(a,{color:"#FF0000"},{default:p(()=>[n("创建参数必须一致")]),_:1}),n("。")]),b,s("p",null,[n("2.2.30.7以上版本api请"),t(a,{color:"#FF0000"},{default:p(()=>[_]),_:1}),n("此函数，只为跟之前的版本兼容，请务必替换使用"),t(a,{color:"#FF0000"},{default:p(()=>[n("SetUDPRecvThreadAffinityArray")]),_:1}),n("函数。 如果调用则必须在Login之前调用，否则不会生效，与SetUDPRecvThreadAffinityArray一起使用时，仅第一个被调用的生效。")]),g,s("p",null,[n("2.2.30.7以上版本api请"),t(a,{color:"#FF0000"},{default:p(()=>[y]),_:1}),n("此函数，只为跟之前的版本兼容，请务必使用"),t(a,{color:"#FF0000"},{default:p(()=>[n("SetUDPParseThreadAffinityArray")]),_:1}),n("函数。")]),h])}const q=c(r,[["render",T],["__file","QuoteApi.html.vue"]]),X=JSON.parse('{"path":"/docs/API_DOC_XTP_API%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E4%B8%8E%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%20-%20XAlgo/QuoteApi.html","title":"","lang":"zh-CN","frontmatter":{"description":"QuoteApi 目录 1. 接口 2. 示例代码 3. CreateQuoteApi 4. Release 5. GetTradingDay 6. GetApiVersion 7. GetApiLastError 8. SetUDPBufferSize 9. RegisterSpi 10. SetHeartBeatInterval 11. SetUD...","head":[["meta",{"property":"og:url","content":"https://10000l.github.io/docs/API_DOC_XTP_API%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E4%B8%8E%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%20-%20XAlgo/QuoteApi.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:description","content":"QuoteApi 目录 1. 接口 2. 示例代码 3. CreateQuoteApi 4. Release 5. GetTradingDay 6. GetApiVersion 7. GetApiLastError 8. SetUDPBufferSize 9. RegisterSpi 10. SetHeartBeatInterval 11. SetUD..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T15:52:56.000Z"}],["meta",{"property":"article:author","content":"xtp_master"}],["meta",{"property":"article:modified_time","content":"2024-06-03T15:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T15:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xtp_master\\",\\"url\\":\\"https://xtp.zts.com.cn\\"}]}"]]},"headers":[{"level":2,"title":"QuoteApi","slug":"quoteapi","link":"#quoteapi","children":[{"level":3,"title":"1. 接口","slug":"_1-接口","link":"#_1-接口","children":[]},{"level":3,"title":"2. 示例代码","slug":"_2-示例代码","link":"#_2-示例代码","children":[]},{"level":3,"title":"3. CreateQuoteApi","slug":"_3-createquoteapi","link":"#_3-createquoteapi","children":[]},{"level":3,"title":"4. Release","slug":"_4-release","link":"#_4-release","children":[]},{"level":3,"title":"5. GetTradingDay","slug":"_5-gettradingday","link":"#_5-gettradingday","children":[]},{"level":3,"title":"6. GetApiVersion","slug":"_6-getapiversion","link":"#_6-getapiversion","children":[]},{"level":3,"title":"7. GetApiLastError","slug":"_7-getapilasterror","link":"#_7-getapilasterror","children":[]},{"level":3,"title":"8. SetUDPBufferSize","slug":"_8-setudpbuffersize","link":"#_8-setudpbuffersize","children":[]},{"level":3,"title":"9. RegisterSpi","slug":"_9-registerspi","link":"#_9-registerspi","children":[]},{"level":3,"title":"10. SetHeartBeatInterval","slug":"_10-setheartbeatinterval","link":"#_10-setheartbeatinterval","children":[]},{"level":3,"title":"11. SetUDPRecvThreadAffinity","slug":"_11-setudprecvthreadaffinity","link":"#_11-setudprecvthreadaffinity","children":[]},{"level":3,"title":"12. SetUDPRecvThreadAffinityArray","slug":"_12-setudprecvthreadaffinityarray","link":"#_12-setudprecvthreadaffinityarray","children":[]},{"level":3,"title":"13. SetUDPParseThreadAffinity","slug":"_13-setudpparsethreadaffinity","link":"#_13-setudpparsethreadaffinity","children":[]},{"level":3,"title":"14. SetUDPParseThreadAffinityArray","slug":"_14-setudpparsethreadaffinityarray","link":"#_14-setudpparsethreadaffinityarray","children":[]},{"level":3,"title":"15. SetUDPSeqLogOutPutFlag","slug":"_15-setudpseqlogoutputflag","link":"#_15-setudpseqlogoutputflag","children":[]},{"level":3,"title":"16. SubscribeMarketData","slug":"_16-subscribemarketdata","link":"#_16-subscribemarketdata","children":[]},{"level":3,"title":"17. UnSubscribeMarketData","slug":"_17-unsubscribemarketdata","link":"#_17-unsubscribemarketdata","children":[]},{"level":3,"title":"18. SubscribeOrderBook","slug":"_18-subscribeorderbook","link":"#_18-subscribeorderbook","children":[]},{"level":3,"title":"19. UnSubscribeOrderBook","slug":"_19-unsubscribeorderbook","link":"#_19-unsubscribeorderbook","children":[]},{"level":3,"title":"20. SubscribeTickByTick","slug":"_20-subscribetickbytick","link":"#_20-subscribetickbytick","children":[]},{"level":3,"title":"21. UnSubscribeTickByTick","slug":"_21-unsubscribetickbytick","link":"#_21-unsubscribetickbytick","children":[]},{"level":3,"title":"22. SubscribeAllMarketData","slug":"_22-subscribeallmarketdata","link":"#_22-subscribeallmarketdata","children":[]},{"level":3,"title":"23. UnSubscribeAllMarketData","slug":"_23-unsubscribeallmarketdata","link":"#_23-unsubscribeallmarketdata","children":[]},{"level":3,"title":"24. SubscribeAllOrderBook","slug":"_24-subscribeallorderbook","link":"#_24-subscribeallorderbook","children":[]},{"level":3,"title":"25. UnSubscribeAllOrderBook","slug":"_25-unsubscribeallorderbook","link":"#_25-unsubscribeallorderbook","children":[]},{"level":3,"title":"26. SubscribeAllTickByTick","slug":"_26-subscribealltickbytick","link":"#_26-subscribealltickbytick","children":[]},{"level":3,"title":"27. UnSubscribeAllTickByTick","slug":"_27-unsubscribealltickbytick","link":"#_27-unsubscribealltickbytick","children":[]},{"level":3,"title":"28. Login","slug":"_28-login","link":"#_28-login","children":[]},{"level":3,"title":"29. Logout","slug":"_29-logout","link":"#_29-logout","children":[]},{"level":3,"title":"30. QueryAllTickers","slug":"_30-queryalltickers","link":"#_30-queryalltickers","children":[]},{"level":3,"title":"31. QueryTickersPriceInfo","slug":"_31-querytickerspriceinfo","link":"#_31-querytickerspriceinfo","children":[]},{"level":3,"title":"32. QueryAllTickersPriceInfo","slug":"_32-queryalltickerspriceinfo","link":"#_32-queryalltickerspriceinfo","children":[]},{"level":3,"title":"33. SubscribeAllOptionMarketData","slug":"_33-subscribealloptionmarketdata","link":"#_33-subscribealloptionmarketdata","children":[]},{"level":3,"title":"34. UnSubscribeAllOptionMarketData","slug":"_34-unsubscribealloptionmarketdata","link":"#_34-unsubscribealloptionmarketdata","children":[]},{"level":3,"title":"35. SubscribeAllOptionOrderBook","slug":"_35-subscribealloptionorderbook","link":"#_35-subscribealloptionorderbook","children":[]},{"level":3,"title":"36. UnSubscribeAllOptionOrderBook","slug":"_36-unsubscribealloptionorderbook","link":"#_36-unsubscribealloptionorderbook","children":[]},{"level":3,"title":"37. SubscribeAllOptionTickByTick","slug":"_37-subscribealloptiontickbytick","link":"#_37-subscribealloptiontickbytick","children":[]},{"level":3,"title":"38. UnSubscribeAllOptionTickByTick","slug":"_38-unsubscribealloptiontickbytick","link":"#_38-unsubscribealloptiontickbytick","children":[]},{"level":3,"title":"39. QueryAllTickersFullInfo","slug":"_39-queryalltickersfullinfo","link":"#_39-queryalltickersfullinfo","children":[]},{"level":3,"title":"40. LoginToRebuildQuoteServer","slug":"_40-logintorebuildquoteserver","link":"#_40-logintorebuildquoteserver","children":[]},{"level":3,"title":"41. LogoutFromRebuildQuoteServer","slug":"_41-logoutfromrebuildquoteserver","link":"#_41-logoutfromrebuildquoteserver","children":[]},{"level":3,"title":"42. RequestRebuildQuote","slug":"_42-requestrebuildquote","link":"#_42-requestrebuildquote","children":[]},{"level":3,"title":"43. QueryAllNQTickersFullInfo","slug":"_43-queryallnqtickersfullinfo","link":"#_43-queryallnqtickersfullinfo","children":[]}]}],"git":{"createdTime":1717429976000,"updatedTime":1717429976000,"contributors":[{"name":"linxiaolx-lx","email":"1247776138@qq.com","commits":1}]},"readingTime":{"minutes":45.65,"words":13696},"filePathRelative":"docs/API_DOC_XTP_API接口说明与示例代码 - XAlgo/QuoteApi.md","localizedDate":"2024年6月3日","autoDesc":true}');export{q as comp,X as data};
