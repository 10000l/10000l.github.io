import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,b as s,d as n,e as a}from"./app-C9BeCxEA.js";const o={},c=n("h2",{id:"traderapi",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#traderapi"},[n("span",null,"TraderApi")])],-1),i=n("p",null,"目录",-1),l=a('<ul><li><a href="#1-%E6%8E%A5%E5%8F%A3">1. 接口</a></li><li><a href="#2-%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">2. 示例代码</a></li><li><a href="#3-createtraderapi">3. CreateTraderApi</a></li><li><a href="#4-release">4. Release</a></li><li><a href="#5-gettradingday">5. GetTradingDay</a></li><li><a href="#6-registerspi">6. RegisterSpi</a></li><li><a href="#7-getapilasterror">7. GetApiLastError</a></li><li><a href="#8-getapiversion">8. GetApiVersion</a></li><li><a href="#9-getclientidbyxtpid">9. GetClientIDByXTPID</a></li><li><a href="#10-getaccountbyxtpid">10. GetAccountByXTPID</a></li><li><a href="#11-subscribepublictopic">11. SubscribePublicTopic</a></li><li><a href="#12-setsoftwareversion">12. SetSoftwareVersion</a></li><li><a href="#13-setsoftwarekey">13. SetSoftwareKey</a></li><li><a href="#14-setheartbeatinterval">14. SetHeartBeatInterval</a></li><li><a href="#15-login">15. Login</a></li><li><a href="#16-logout">16. Logout</a></li><li><a href="#17-isserverrestart">17. IsServerRestart</a></li><li><a href="#18-modifyuserterminalinfo">18. ModifyUserTerminalInfo</a></li><li><a href="#19-queryaccounttrademarket">19. QueryAccountTradeMarket</a></li><li><a href="#20-getaneworderxtpid">20. GetANewOrderXTPID</a></li><li><a href="#21-insertorder">21. InsertOrder</a></li><li><a href="#22-insertorderextra">22. InsertOrderExtra</a></li><li><a href="#23-cancelorder">23. CancelOrder</a></li><li><a href="#24-queryorderbyxtpid">24. QueryOrderByXTPID</a></li><li><a href="#25-queryorders">25. QueryOrders</a></li><li><a href="#26-queryunfinishedorders">26. QueryUnfinishedOrders</a></li><li><a href="#27-queryordersbypage">27. QueryOrdersByPage</a></li><li><a href="#28-queryorderbyxtpidex">28. QueryOrderByXTPIDEx</a></li><li><a href="#29-queryordersex">29. QueryOrdersEx</a></li><li><a href="#30-queryunfinishedordersex">30. QueryUnfinishedOrdersEx</a></li><li><a href="#31-queryordersbypageex">31. QueryOrdersByPageEx</a></li><li><a href="#32-querytradesbyxtpid">32. QueryTradesByXTPID</a></li><li><a href="#33-querytrades">33. QueryTrades</a></li><li><a href="#34-querytradesbypage">34. QueryTradesByPage</a></li><li><a href="#35-queryposition">35. QueryPosition</a></li><li><a href="#36-queryasset">36. QueryAsset</a></li><li><a href="#37-querystructuredfund">37. QueryStructuredFund</a></li><li><a href="#38-fundtransfer">38. FundTransfer</a></li><li><a href="#39-queryfundtransfer">39. QueryFundTransfer</a></li><li><a href="#40-queryotherserverfund">40. QueryOtherServerFund</a></li><li><a href="#41-queryetf">41. QueryETF</a></li><li><a href="#42-queryetftickerbasket">42. QueryETFTickerBasket</a></li><li><a href="#43-queryipoinfolist">43. QueryIPOInfoList</a></li><li><a href="#44-queryipoquotainfo">44. QueryIPOQuotaInfo</a></li><li><a href="#45-querybondipoinfo">45. QueryBondIPOInfoList</a></li><li><a href="#46-queryoptionauctioninfo">46. QueryOptionAuctionInfo</a></li><li><a href="#47-creditcashrepay">47. CreditCashRepay</a></li><li><a href="#48-creditcashrepaydebtinterestfee">48. CreditCashRepayDebtInterestFee</a></li><li><a href="#49-creditsellstockrepaydebtinterestfee">49. CreditSellStockRepayDebtInterestFee</a></li><li><a href="#50-querycreditcashrepayinfo">50. QueryCreditCashRepayInfo</a></li><li><a href="#51-querycreditfundinfo">51. QueryCreditFundInfo</a></li><li><a href="#52-querycreditdebtinfo">52. QueryCreditDebtInfo</a></li><li><a href="#53-querycredittickerdebtinfo">53. QueryCreditTickerDebtInfo</a></li><li><a href="#54-querycreditassetdebtinfo">54. QueryCreditAssetDebtInfo</a></li><li><a href="#55-querycredittickerassigninfo">55. QueryCreditTickerAssignInfo</a></li><li><a href="#56-querycreditexcessstock">56. QueryCreditExcessStock</a></li><li><a href="#57-querymulcreditexcessstock">57. QueryMulCreditExcessStock</a></li><li><a href="#58-creditextenddebtdate">58. CreditExtendDebtDate</a></li><li><a href="#59-querycreditextenddebtdateorders">59. QueryCreditExtendDebtDateOrders</a></li><li><a href="#60-querycreditfundextrainfo">60. QueryCreditFundExtraInfo</a></li><li><a href="#61-querycreditpositionextrainfo">61. QueryCreditPositionExtraInfo</a></li><li><a href="#62-insertoptioncombinedorder">62. InsertOptionCombinedOrder</a></li><li><a href="#63-insertoptioncombinedorderextra">63. InsertOptionCombinedOrderExtra</a></li><li><a href="#64-canceloptioncombinedorder">64. CancelOptionCombinedOrder</a></li><li><a href="#65-queryoptioncombinedunfinishedorders">65. QueryOptionCombinedUnfinishedOrders</a></li><li><a href="#66-queryoptioncombinedorderbyxtpid">66. QueryOptionCombinedOrderByXTPID</a></li><li><a href="#67-queryoptioncombinedorders">67. QueryOptionCombinedOrders</a></li><li><a href="#68-queryoptioncombinedordersbypage">68. QueryOptionCombinedOrdersByPage</a></li><li><a href="#69-queryoptioncombinedunfinishedordersex">69. QueryOptionCombinedUnfinishedOrdersEx</a></li><li><a href="#70-queryoptioncombinedorderbyxtpidex">70. QueryOptionCombinedOrderByXTPIDEx</a></li><li><a href="#71-queryoptioncombinedordersex">71. QueryOptionCombinedOrdersEx</a></li><li><a href="#72-queryoptioncombinedordersbypageex">72. QueryOptionCombinedOrdersByPageEx</a></li><li><a href="#73-queryoptioncombinedtradesbyxtpid">73. QueryOptionCombinedTradesByXTPID</a></li><li><a href="#74-queryoptioncombinedtrades">74. QueryOptionCombinedTrades</a></li><li><a href="#75-queryoptioncombinedtradesbypage">75. QueryOptionCombinedTradesByPage</a></li><li><a href="#76-queryoptioncombinedposition">76. QueryOptionCombinedPosition</a></li><li><a href="#77-queryoptioncombinedstrategyinfo">77. QueryOptionCombinedStrategyInfo</a></li><li><a href="#78-queryoptioncombinedexecposition">78. QueryOptionCombinedExecPosition</a></li><li><a href="#79-loginalgo">79. LoginALGO</a></li><li><a href="#80-querystrategy">80. QueryStrategy</a></li><li><a href="#81-algouserestablishchannel">81. ALGOUserEstablishChannel</a></li><li><a href="#82-insertalgoorder">82. InsertAlgoOrder</a></li><li><a href="#83-cancelalgoorder">83. CancelAlgoOrder</a></li><li><a href="#84-getalgorithmidbyorder">84. GetAlgorithmIDByOrder</a></li><li><a href="#85-strategyrecommendation">85. StrategyRecommendation</a></li><li><a href="#86-querybondswapstockinfo">86. QueryBondSwapStockInfo</a></li><li><a href="#87-modifyalgoorder">87. ModifyAlgoOrder</a></li></ul>',1),r=a(`<p><br><br></p><p>TraderApi类提供了交易api的初始化、登录、报单等功能。</p><h3 id="_1-接口" tabindex="-1"><a class="header-anchor" href="#_1-接口"><span>1. 接口</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> XTP <span class="token punctuation">{</span>
	<span class="token keyword">namespace</span> API <span class="token punctuation">{</span>
		<span class="token keyword">class</span> <span class="token class-name">TRADER_API_EXPORT</span> TraderApi
		<span class="token punctuation">{</span>
		<span class="token keyword">public</span><span class="token operator">:</span>
			<span class="token comment">///创建TraderApi</span>
			<span class="token comment">///@param client_id （必须输入）客户端id，用于区分同一用户的不同客户端，由用户自定义，普通用户必须使用1-99之间的数值，否则可能无法登录</span>
			<span class="token comment">///@param save_file_path （必须输入）存贮订阅信息文件的目录，请设定一个真实存在的有可写权限的路径</span>
			<span class="token comment">///@param log_level 日志输出级别</span>
			<span class="token comment">///@return 创建出的UserApi</span>
			<span class="token comment">///@remark 只能创建一次，如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接。系统不支持过夜，请确保每天开盘前重新启动</span>
			<span class="token keyword">static</span> TraderApi <span class="token operator">*</span><span class="token function">CreateTraderApi</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> client_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>save_file_path<span class="token punctuation">,</span> XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">///删除接口对象本身</span>
			<span class="token comment">///@remark 不再使用本接口对象时,调用该函数删除接口对象</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取当前交易日</span>
			<span class="token comment">///@return 获取到的交易日</span>
			<span class="token comment">///@remark 只有登录成功后,才能得到正确的交易日</span>
			<span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///注册回调接口</span>
			<span class="token comment">///@param spi 派生自回调接口类的实例，请在登录之前设定</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegisterSpi</span><span class="token punctuation">(</span>TraderSpi <span class="token operator">*</span>spi<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取API的系统错误</span>
			<span class="token comment">///@return 返回的错误信息，可以在Login、InsertOrder、CancelOrder返回值为0时调用，获取失败的原因</span>
			<span class="token comment">///@remark 可以在调用api接口失败时调用，例如login失败时</span>
			<span class="token keyword">virtual</span> XTPRI <span class="token operator">*</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取API的发行版本号</span>
			<span class="token comment">///@return 返回api发行版本号</span>
			<span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///通过报单在xtp系统中的ID获取下单的客户端id</span>
			<span class="token comment">///@return 返回客户端id，可以用此方法过滤自己下的订单</span>
			<span class="token comment">///@param order_xtp_id 报单在xtp系统中的ID</span>
			<span class="token comment">///@remark 由于系统允许同一用户在不同客户端上登录操作，每个客户端通过不同的client_id进行区分</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint8_t</span> <span class="token function">GetClientIDByXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///通过报单在xtp系统中的ID获取相关资金账户名</span>
			<span class="token comment">///@return 返回资金账户名</span>
			<span class="token comment">///@param order_xtp_id 报单在xtp系统中的ID</span>
			<span class="token comment">///@remark 只有资金账户登录成功后,才能得到正确的信息</span>
			<span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetAccountByXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///订阅公共流。</span>
			<span class="token comment">///@param resume_type 公共流（订单响应、成交回报）重传方式  </span>
			<span class="token comment">///        XTP_TERT_RESTART:从本交易日开始重传</span>
			<span class="token comment">///        XTP_TERT_RESUME:(保留字段，此方式暂未支持)从上次收到的续传</span>
			<span class="token comment">///        XTP_TERT_QUICK:只传送登录后公共流的内容</span>
			<span class="token comment">///@remark 该方法要在Login方法前调用。若不调用则不会收到公共流的数据。注意在用户断线后，如果不登出就login()，公共流订阅方式不会起作用。用户只会收到断线后的所有消息。如果先logout()再login()，那么公共流订阅方式会起作用，用户收到的数据会根据用户的选择方式而定。</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SubscribePublicTopic</span><span class="token punctuation">(</span>XTP_TE_RESUME_TYPE resume_type<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设置软件开发版本号</span>
			<span class="token comment">///@param version 用户开发软件版本号，非api发行版本号，长度不超过15位，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@remark 此函数必须在Login之前调用，标识的是客户端版本号，而不是API的版本号，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetSoftwareVersion</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> version<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设置软件开发Key</span>
			<span class="token comment">///@param key 用户开发软件Key，用户申请开户时给予，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@remark 此函数必须在Login之前调用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetSoftwareKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///设置心跳检测时间间隔，单位为秒</span>
			<span class="token comment">///@param interval 心跳检测时间间隔，单位为秒</span>
			<span class="token comment">///@remark 此函数必须在Login之前调用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> interval<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///用户登录请求</span>
			<span class="token comment">///@return session_id表明此资金账号登录是否成功，“0”表示登录失败，可以调用GetApiLastError()来获取错误代码，非“0”表示登录成功，此时需要记录下这个返回值session_id，与登录的资金账户对应</span>
			<span class="token comment">///@param ip 服务器地址，类似“127.0.0.1”</span>
			<span class="token comment">///@param port 服务器端口号</span>
			<span class="token comment">///@param user 登录用户名</span>
			<span class="token comment">///@param password 登录密码</span>
			<span class="token comment">///@param sock_type “1”代表TCP，“2”代表UDP，目前暂时只支持TCP</span>
			<span class="token comment">///@param local_ip 本地网卡地址，类似“127.0.0.1”</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api可支持多个账户连接，但是同一个账户同一个client_id只能有一个session连接，后面的登录在前一个session存续期间，无法连接</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


			<span class="token comment">///登出请求</span>
			<span class="token comment">///@return 登出是否成功，“0”表示登出成功，“-1”表示登出失败</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///服务器是否重启过</span>
			<span class="token comment">///@return “true”表示重启过，“false”表示没有重启过</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 此函数必须在Login之后调用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsServerRestart</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///修改已登录用户的硬件信息，仅限授权系统使用</span>
			<span class="token comment">///@return 发送消息是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param info 需要修改成的用户硬件信息</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 此函数必须在Login之后调用，且仅限授权系统使用，一般客户无需使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ModifyUserTerminalInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPUserTerminalInfoReq<span class="token operator">*</span> info<span class="token punctuation">,</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///查询用户在本节点上的可交易市场类型</span>
			<span class="token comment">///@return 发送消息是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 此函数必须在Login之后调用，对应的响应函数是OnQueryAccountTradeMarket()</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAccountTradeMarket</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///为用户获取一个新的订单XTPID，用于报单</span>
			<span class="token comment">///@return 生成的订单XTPID，非“0”表示获取成功，“0”表示获取失败，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 此函数必须在Login之后调用，通过这个函数获取的order_xtp_id仅用于对应的用户报单，如果设置错误，将会导致下单失败</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">GetANewOrderXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///报单录入请求</span>
			<span class="token comment">///@return 报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示报单发送成功，用户需要记录下返回的order_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param order 报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 交易所接收订单后，会在报单响应函数OnOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOrder</span><span class="token punctuation">(</span>XTPOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			
			<span class="token comment">///已经提前设置order_xtp_id的报单录入请求，与GetANewOrderXTPID()配合使用</span>
			<span class="token comment">///@return 报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示报单发送成功，此时等同与传入的order_xtp_id</span>
			<span class="token comment">///@param order 报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单，也可以什么都不填。order.order_xtp_id字段必须是通过GetANewOrderXTPID()获得的值，order.ticker必须不带空格，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 使用设置好的order_xtp_id（通过GetANewOrderXTPID()获得）进行报单，注意此处如果order_xtp_id设置不对，将导致报单失败。交易所接收订单后，会在报单响应函数OnOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOrderExtra</span><span class="token punctuation">(</span>XTPOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///报单操作请求</span>
			<span class="token comment">///@return 撤单在XTP系统中的ID,如果为‘0’表示撤单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示撤单发送成功，用户需要记录下返回的order_cancel_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param order_xtp_id 需要撤销的委托单在XTP系统中的ID</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 如果撤单成功，会在报单响应函数OnOrderEvent()里返回原单部撤或者全撤的消息，如果不成功，会在OnCancelOrderError()响应函数中返回错误原因</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CancelOrder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据报单ID请求查询报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrderByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrders</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询未完结报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryUnfinishedOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据报单ID请求查询报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrderByXTPIDEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询未完结报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryUnfinishedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersByPageEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据委托编号请求查询相关成交</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的委托编号，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 此函数查询出的结果可能对应多个查询结果响应</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTradesByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询已成交</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的成交回报筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有成交回报，否则查询时间段内所有跟股票代码相关的成交回报，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTrades</span><span class="token punctuation">(</span>XTPQueryTraderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询成交回报</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询成交回报的条件，如果第一次查询，那么reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTradesByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryTraderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询投资者持仓</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param ticker 需要查询持仓的合约代码，可以为NULL，表示查询全市场，如果不为NULL，请不带空格，并以&#39;\\0&#39;结尾，注意需与market匹配，不匹配的话，可能由于证券代码沪深2个市场有重复，而导致查询不到所需的持仓</span>
			<span class="token comment">///@param market 需要查询持仓的合约所在市场，默认为0，仅在合约代码不为NULL的时候，才会使用。market不指定或者为非0的其他非有效值情况下，可能由于证券代码沪深2个市场有重复，而导致查询不到所需的持仓。如果想正确查询指定持仓，请指定market</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法如果用户提供了合约代码，则会查询此合约的持仓信息（注意请指定market，如果market为0，可能会查询到2个市场的持仓，如果market为其他非有效值，则查询结果会返回找不到持仓），如果合约代码为空，则默认查询所有持仓信息。</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> XTP_MARKET_TYPE market <span class="token operator">=</span> XTP_MKT_INIT<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询资产</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAsset</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询分级基金</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的分级基金筛选条件，其中母基金代码可以为空，则默认所有存在的母基金，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中交易市场不能为空</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 此函数查询出的结果可能对应多个查询结果响应</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryStructuredFund</span><span class="token punctuation">(</span>XTPQueryStructuredFundInfoReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///资金划拨请求</span>
			<span class="token comment">///@return 资金划拨订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示消息发送成功，用户需要记录下返回的serial_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param fund_transfer 资金划拨的请求信息</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 此函数支持一号两中心节点之间的资金划拨，注意资金划拨的方向。</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">FundTransfer</span><span class="token punctuation">(</span>XTPFundTransferReq <span class="token operator">*</span>fund_transfer<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询资金划拨</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的资金划拨订单筛选条件，其中serial_id可以为0，则默认所有资金划拨订单，如果不为0，则请求特定的资金划拨订单</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryFundTransfer</span><span class="token punctuation">(</span>XTPQueryFundTransferLogReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询其他节点可用资金</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 查询时需要提供的信息</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOtherServerFund</span><span class="token punctuation">(</span>XTPFundQueryReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询ETF清单文件</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的ETF清单文件的筛选条件，其中合约代码可以为空，则默认所有存在的ETF合约代码，market字段也可以为初始值，则默认所有市场的ETF合约</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryETF</span><span class="token punctuation">(</span>XTPQueryETFBaseReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询ETF股票篮</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询股票篮的的ETF合约，其中合约代码不可以为空，market字段也必须指定</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryETFTickerBasket</span><span class="token punctuation">(</span>XTPQueryETFComponentReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询今日新股申购信息列表</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryIPOInfoList</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询用户新股申购额度信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryIPOQuotaInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询可转债转股的基本信息</span>
			<span class="token comment">///@return 查询是否发送成功，“0”表示发送成功，非“0”表示发送出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的可转债转股信息的筛选条件，可以为NULL（为NULL表示查询所有的可转债转股信息），此参数中合约代码可以为空字符串，如果为空字符串，则查询所有可转债转股信息，如果不为空字符串，请不带空格，并以&#39;\\0&#39;结尾，且必须与market匹配</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryBondSwapStockInfo</span><span class="token punctuation">(</span>XTPQueryBondSwapStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权合约</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的期权合约的筛选条件，可以为NULL（为NULL表示查询所有的期权合约）</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionAuctionInfo</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中现金直接还款请求</span>
			<span class="token comment">///@return 现金直接还款订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param amount 现金还款的金额</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditCashRepay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中现金还指定负债合约息费请求</span>
			<span class="token comment">///@return 现金还息订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param debt_id 指定的负债合约编号</span>
			<span class="token comment">///@param amount 现金还息的金额</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditCashRepayDebtInterestFee</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debt_id<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中卖券还指定负债合约息费请求</span>
			<span class="token comment">///@return 卖券还息订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param order 卖券的报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param debt_id 指定的负债合约编号</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditSellStockRepayDebtInterestFee</span><span class="token punctuation">(</span>XTPOrderInsertInfo<span class="token operator">*</span> order<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debt_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询融资融券业务中的现金直接还款报单</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditCashRepayInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询信用账户特有信息，除资金账户以外的信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditFundInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询信用账户负债合约信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditDebtInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询指定证券负债未还信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的指定证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditTickerDebtInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdDebtStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询信用账户待还资金信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditAssetDebtInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询信用账户可融券头寸信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditTickerAssignInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中请求查询指定证券的余券</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的余券信息，不可以为空，需要明确指定</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法中用户必须提供了证券代码和所在市场</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中请求查询余券</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的余券信息。若填入市场和股票代码，返回单支股票信息；若市场代码为空，股票代码非空，是无效查询，会在SPI中返回错误；若市场和股票代码均为空，返回全市场信息；若市场代码非空，股票代码为空，返回单市场信息。</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryMulCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   

			<span class="token comment">///融资融券业务中请求负债合约展期</span>
			<span class="token comment">///@return 负债合约展期订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param debt_extend 负债合约展期的请求信息</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditExtendDebtDate</span><span class="token punctuation">(</span>XTPCreditDebtExtendReq <span class="token operator">*</span>debt_extend<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///融资融券业务中请求查询负债合约展期</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param xtp_id 需要查询的负债合约展期订单筛选条件，xtp_id可以为0，则默认所有负债合约展期订单，如果不为0，则请求特定的负债合约展期订单</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditExtendDebtDateOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询融资融券业务中账戶的附加信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditFundExtraInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询融资融券业务中账戶指定证券的附加信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要指定的证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditPositionExtraInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///期权组合策略报单录入请求</span>
			<span class="token comment">///@return 报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示报单发送成功，用户需要记录下返回的order_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param order 报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOptionCombinedOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 交易所接收订单后，会在报单响应函数OnOptionCombinedOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOptionCombinedOrder</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///已经提前设置order_xtp_id的期权组合策略报单录入请求，与GetANewOrderXTPID()配合使用</span>
			<span class="token comment">///@return 报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示报单发送成功，此时等同与传入的order_xtp_id</span>
			<span class="token comment">///@param order 报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单，也可以什么都不填。order.order_xtp_id字段必须是通过GetANewOrderXTPID()获得的值，order.ticker必须不带空格，以&#39;\\0&#39;结尾</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 使用设置好的order_xtp_id（通过GetANewOrderXTPID()获得）进行报单，注意此处如果order_xtp_id设置不对，将导致报单失败。交易所接收订单后，会在报单响应函数OnOptionCombinedOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOptionCombinedOrderExtra</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///期权组合策略报单撤单请求</span>
			<span class="token comment">///@return 撤单在XTP系统中的ID,如果为‘0’表示撤单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示撤单发送成功，用户需要记录下返回的order_cancel_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性</span>
			<span class="token comment">///@param order_xtp_id 需要撤销的期权组合策略委托单在XTP系统中的ID</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 如果撤单成功，会在报单响应函数OnOptionCombinedOrderEvent()里返回原单部撤或者全撤的消息，如果不成功，会在OnCancelOrderError()响应函数中返回错误原因</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CancelOptionCombinedOrder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略未完结报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedUnfinishedOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据报单ID请求查询期权组合策略报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrderByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrders</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询期权组合策略报单-旧版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略未完结报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedUnfinishedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据报单ID请求查询期权组合策略报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrderByXTPIDEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询期权组合策略报单-新版本接口</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersByPageEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///根据期权组合策略委托编号请求查询相关成交</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param order_xtp_id 需要查询的委托编号，即InsertOrder()成功时返回的order_xtp_id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 此函数查询出的结果可能对应多个查询结果响应</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTradesByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略的成交回报</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的成交回报筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有成交回报，否则查询时间段内所有跟股票代码相关的成交回报，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTrades</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombTraderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///分页请求查询期权组合策略成交回报</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要分页查询成交回报的条件，如果第一次查询，那么reference填0</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id，登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTradesByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombTraderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询投资者期权组合策略持仓</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询持仓的筛选条件，其中组合策略代码可以初始化为空，表示查询所有，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，注意需与market匹配，不匹配的话，可能导致查询不到所需的持仓</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法如果用户提供了合约代码，则会查询此合约的持仓信息（注意请指定market，如果market为0，可能会查询到2个市场的持仓，如果market为其他非有效值，则查询结果会返回找不到持仓），如果合约代码为空，则默认查询所有持仓信息。</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombPositionReq<span class="token operator">*</span> query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权组合策略信息</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法仅支持精确查询，不支持模糊查询</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedStrategyInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///请求查询期权行权合并头寸</span>
			<span class="token comment">///@return 查询请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param query_param 需要查询的行权合并的筛选条件，其中market为0会默认查询全市场，成分合约代码可以初始化为空，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，注意所有填写的条件都会进行匹配</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 该方法可能对应多条响应消息</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedExecPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombExecPosReq<span class="token operator">*</span> query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			
			<span class="token comment">///用户登录algo服务器请求</span>
			<span class="token comment">///@return 表明此资金账号登录是否成功，非“0”表示登录失败，可以调用GetApiLastError()来获取错误代码，“0”表示登录成功</span>
			<span class="token comment">///@param ip algo服务器地址，类似“127.0.0.1”</span>
			<span class="token comment">///@param port algo服务器端口号</span>
			<span class="token comment">///@param user 登录用户名</span>
			<span class="token comment">///@param password 登录密码</span>
			<span class="token comment">///@param sock_type “1”代表TCP，“2”代表UDP，目前暂时只支持TCP</span>
			<span class="token comment">///@param local_ip 本地网卡地址，类似“127.0.0.1”</span>
			<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只需调用一次，所有用户共用即可</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LoginALGO</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///algo业务中查询用户策略请求</span>
			<span class="token comment">///@return 请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param strategy_type 需要查询的策略类型，可填0</span>
			<span class="token comment">///@param client_strategy_id 需要查询的策略用户自定义id，可填0</span>
			<span class="token comment">///@param xtp_strategy_id 需要查询的策略在xtp系统中的id，如果指定，就一定按指定查询，如果填0，则按其他筛选条件查询</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark xtp_strategy_id条件的优先级最高，只有当xtp_strategy_id为0时，其他条件才生效，此条请求可能对应多条回应消息</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryStrategy</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> strategy_type<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> client_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///用户请求使用algo服务器建立算法通道</span>
			<span class="token comment">///@return 表明此资金账号建立算法通道请求消息发送是否成功，非“0”表示发送失败，可以调用GetApiLastError()来获取错误代码，“0”表示发送成功</span>
			<span class="token comment">///@param oms_ip oms服务器地址，类似“127.0.0.1”，非algo服务器地址</span>
			<span class="token comment">///@param oms_port oms服务器端口号，非algo服务器端口号</span>
			<span class="token comment">///@param user 登录用户名</span>
			<span class="token comment">///@param password 登录密码</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 此函数为异步方式，一个用户只能拥有一个算法通道，如果之前已经建立，则无需重复建立，在使用算法前，请先建立算法通道</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ALGOUserEstablishChannel</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> oms_ip<span class="token punctuation">,</span> <span class="token keyword">int</span> oms_port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///algo业务中用户报算法单请求</span>
			<span class="token comment">///@return 算法报单请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param strategy_type 需要创建的策略类型</span>
			<span class="token comment">///@param client_strategy_id 用户自定义id，帮助用户定位</span>
			<span class="token comment">///@param strategy_param 策略参数</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 仅能在用户建立算法通道后使用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">InsertAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> strategy_type<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> client_strategy_id<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///algo业务中用户撤销算法单请求</span>
			<span class="token comment">///@return 请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param cancel_flag 是否需要撤销的算法单已下的订单，true-撤单，false-不撤单</span>
			<span class="token comment">///@param xtp_strategy_id 需要撤销的算法单在xtp algobus系统中的id</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 仅能在用户建立算法通道后调用</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">CancelAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cancel_flag<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///获取算法单的母单ID</span>
			<span class="token comment">///@return 返回算法单的母单ID，如果返回为0表示不是算法单</span>
			<span class="token comment">///@param order_xtp_id 算法单对应的xtp id</span>
			<span class="token comment">///@param order_client_id 算法单对应的自定义ID，不可随意填写</span>
			<span class="token comment">///@remark 返回为0表示，不是算法单，如果传入的参数不对的话，可能会得不到正确结果，此函数调用不依赖于是否登录</span>
			<span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">GetAlgorithmIDByOrder</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> order_client_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///algo业务中请求推荐算法</span>
			<span class="token comment">///@return 请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param basket_flag 是否将满足条件的推荐结果打包成母单篮的标志，true-打包</span>
			<span class="token comment">///@param basket_param 需要算法推荐的证券列表，为json字串，具体格式参考说明文档或咨询运营人员</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@param request_id 用于用户定位查询响应的ID，由用户自定义</span>
			<span class="token comment">///@remark 此条请求可能对应多条回应消息</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">StrategyRecommendation</span><span class="token punctuation">(</span><span class="token keyword">bool</span> basket_flag<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> basket_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

			<span class="token comment">///algo业务中修改已有的算法单</span>
			<span class="token comment">///@return 算法单修改请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</span>
			<span class="token comment">///@param xtp_strategy_id xtp算法单策略ID</span>
			<span class="token comment">///@param strategy_param 修改后的策略参数</span>
			<span class="token comment">///@param session_id 资金账户对应的session_id,登录时得到</span>
			<span class="token comment">///@remark 仅能在用户建立算法通道后使用，此功能上线时间视服务器后台支持情况而定，具体以运营通知时间为准</span>
			<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ModifyAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      

		<span class="token keyword">protected</span><span class="token operator">:</span>
			<span class="token operator">~</span><span class="token function">TraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-示例代码" tabindex="-1"><a class="header-anchor" href="#_2-示例代码"><span>2. 示例代码</span></a></h3><p>以下是MyTraderApi.h文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_trader_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderSpi.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyTraderApi</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">explicit</span> <span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 初始化</span>
	<span class="token keyword">bool</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	TraderApi <span class="token operator">*</span>user_trade_api<span class="token punctuation">;</span>
	MyTraderSpi <span class="token operator">*</span>m_trader_spi<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是MyTraderApi.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTraderApi.h&quot;</span></span>

<span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_ <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    m_trader_spi <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyTraderApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">MyTraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 创建并初始化交易API</span>
	user_trade_api_ <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">TraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateTraderApi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trader_api_<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 注册回调接口</span>
		m_trader_spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>m_trader_spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 登录前参数设置，用户请自行修改</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareKey</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareVersion</span><span class="token punctuation">(</span><span class="token string">&quot;xx.xx.xx.xx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置公有流（订单响应、成交回报）重传方式</span>
		user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SubscribePublicTopic</span><span class="token punctuation">(</span>XTP_TERT_QUICK<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-createtraderapi" tabindex="-1"><a class="header-anchor" href="#_3-createtraderapi"><span>3. CreateTraderApi</span></a></h3><p>创建TraderApi的实例。只能创建一次，如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接。系统不支持过夜，请确保每天开盘前重新启动。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> TraderApi <span class="token operator">*</span><span class="token function">CreateTraderApi</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> client_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>save_file_path<span class="token punctuation">,</span> XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>client_id：（必须输入）客户端id，用于区分同一用户的不同客户端，由用户自定义，普通用户必须使用1-99之间的数值</p><p>save_file_path：（必须输入）存储交易api日志文件的目录，请设定一个真实存在的有可写权限的路径</p><p>log_level：日志输出级别</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//初始化api，创建单例</span>
<span class="token keyword">uint8_t</span> client_id_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
string <span class="token function">stdstr_log_path</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开发调试时用XTP_LOG_LEVEL_DEBUG，稳定运行时用XTP_LOG_LEVEL_INFO</span>
XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">;</span>

XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>TraderApi<span class="token operator">*</span> user_trade_api_ <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">TraderApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateTraderApi</span><span class="token punctuation">(</span>client_id_<span class="token punctuation">,</span> stdstr_log_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log_level<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 注册回调接口</span>
	MyTraderSpi <span class="token operator">*</span>spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4-release" tabindex="-1"><a class="header-anchor" href="#_4-release"><span>4. Release</span></a></h3><p>删除接口对象本身。当程序退出前，不再使用本接口对象时，调用该函数删除接口对象。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登出并删除接口对象</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span>session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5-gettradingday" tabindex="-1"><a class="header-anchor" href="#_5-gettradingday"><span>5. GetTradingDay</span></a></h3><p>获取当前交易日。只有登录成功后,才能得到正确的交易日。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>返回一个指向日期信息字符串的常量指针。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取交易日</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GetTradingDay：&quot;</span> <span class="token operator">&lt;&lt;</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetTradingDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6-registerspi" tabindex="-1"><a class="header-anchor" href="#_6-registerspi"><span>6. RegisterSpi</span></a></h3><p>注册回调接口。派生自回调接口类的实例，请在登录之前设定。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegisterSpi</span><span class="token punctuation">(</span>TraderSpi <span class="token operator">*</span>spi<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>TraderSpi：接口类实例</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 注册回调接口</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	MyTraderSpi <span class="token operator">*</span>spi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyTraderSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>spi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_7-getapilasterror" tabindex="-1"><a class="header-anchor" href="#_7-getapilasterror"><span>7. GetApiLastError</span></a></h3><p>获取API的系统错误。返回的错误信息，可以在Login、InsertOrder、CancelOrder返回值为0时调用，获取失败的原因。可以在调用api接口失败时调用，例如login失败时</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> XTPRI <span class="token operator">*</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///错误信息的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ERR_MSG_LEN</span>  <span class="token expression"><span class="token number">124</span></span></span>
<span class="token comment">///响应信息</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPRspInfoStruct</span>
<span class="token punctuation">{</span>
	<span class="token comment">///错误代码</span>
	<span class="token keyword">int32_t</span>	error_id<span class="token punctuation">;</span>
	<span class="token comment">///错误信息</span>
	<span class="token keyword">char</span>	error_msg<span class="token punctuation">[</span>XTP_ERR_MSG_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> XTPRI<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取API的系统错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_8-getapiversion" tabindex="-1"><a class="header-anchor" href="#_8-getapiversion"><span>8. GetApiVersion</span></a></h3><p>获取API的发行版本号。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>无</p><p>3.返回</p><p>返回api发行版本号。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 获取API的发行版本号</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GetApiVersion ：&quot;</span> <span class="token operator">&lt;&lt;</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_9-getclientidbyxtpid" tabindex="-1"><a class="header-anchor" href="#_9-getclientidbyxtpid"><span>9. GetClientIDByXTPID</span></a></h3><p>通过报单在xtp系统中的ID获取下单的客户端id。</p><p>由于系统允许同一用户在不同客户端上登录操作，每个客户端通过不同的client_id进行区分。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint8_t</span> <span class="token function">GetClientIDByXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：报单在xtp系统中的ID</p><p>3.返回</p><p>返回客户端id，可以用此方法过滤自己下的订单</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 通过报单在xtp系统中的ID获取下单的客户端id</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint8_t</span> clientId <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetClientIDByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_10-getaccountbyxtpid" tabindex="-1"><a class="header-anchor" href="#_10-getaccountbyxtpid"><span>10. GetAccountByXTPID</span></a></h3><p>通过报单在xtp系统中的ID获取相关资金账户名。只有资金账户登录成功后,才能得到正确的信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">GetAccountByXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：报单在xtp系统中的ID</p><p>3.返回</p><p>返回资金账户名。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 通过报单在xtp系统中的ID获取相关资金账户名</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>clientAccount <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetAccountByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_11-subscribepublictopic" tabindex="-1"><a class="header-anchor" href="#_11-subscribepublictopic"><span>11. SubscribePublicTopic</span></a></h3><p>订阅公共流。该方法要在Login方法前调用。若不调用则默认是用quick方式。注意在用户断线后，如果不登出就login()，公共流订阅方式将会默认使用resume方式。用户收到的数据会根据用户的选择方式而定。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SubscribePublicTopic</span><span class="token punctuation">(</span>XTP_TE_RESUME_TYPE resume_type<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_TE_RESUME_TYPE是公有流（订单响应、成交回报）重传方式</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_TE_RESUME_TYPE</span>
<span class="token punctuation">{</span>
	XTP_TERT_RESTART <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;从本交易日开始重传</span>
	XTP_TERT_RESUME<span class="token punctuation">,</span>		<span class="token comment">///&lt;从从上次收到的续传（暂未支持）</span>
	XTP_TERT_QUICK			<span class="token comment">///&lt;只传送登录后公有流（订单响应、成交回报）的内容</span>
<span class="token punctuation">}</span>XTP_TE_RESUME_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 订阅公有流，只传送登录后的订单响应和成交回报</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SubscribePublicTopic</span><span class="token punctuation">(</span>XTP_TERT_QUICK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_12-setsoftwareversion" tabindex="-1"><a class="header-anchor" href="#_12-setsoftwareversion"><span>12. SetSoftwareVersion</span></a></h3><p>设置软件开发版本号。此函数必须在Login之前调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetSoftwareVersion</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> version<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>version 用户开发软件版本号，非api发行版本号，长度不超过15位，以&#39;\\0&#39;结尾</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置软件开发版本号1.1.0，标识的是客户端版本号，而不是API的版本号，由用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareVersion</span><span class="token punctuation">(</span><span class="token string">&quot;1.1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_13-setsoftwarekey" tabindex="-1"><a class="header-anchor" href="#_13-setsoftwarekey"><span>13. SetSoftwareKey</span></a></h3><p>设置软件开发Key。此函数必须在Login之前调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetSoftwareKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Key:用户开发软件Key，用户申请开户时给予，以&#39;\\0&#39;结尾</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设置软件开发Key</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetSoftwareKey</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_14-setheartbeatinterval" tabindex="-1"><a class="header-anchor" href="#_14-setheartbeatinterval"><span>14. SetHeartBeatInterval</span></a></h3><p>设置心跳检测时间间隔，单位为秒，默认是15s。此函数必须在Login之前调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> interval<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Interval：心跳检测时间间隔，单位为秒</p><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 设定交易服务器超时时间为15秒，用户可自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	user_trade_api_<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_15-login" tabindex="-1"><a class="header-anchor" href="#_15-login"><span>15. Login</span></a></h3><p>用户登录请求。此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api可支持多个账户连接，但是同一个账户同一个client_id只能有一个session连接，后面的登录在前一个session存续期间，无法连接。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Ip：服务器地址，类似&quot;127.0.0.1&quot;</p><p>Port：服务器端口号</p><p>User：登录用户名</p><p>Password：登录密码</p><p>sock_type：&quot;1&quot;代表TCP，&quot;2&quot;代表UDP，目前暂时只支持TCP</p><p>local_ip：本地网卡地址，类似&quot;127.0.0.1&quot;</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// XTP_PROTOCOL_TYPE是通讯传输协议方式</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PROTOCOL_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PROTOCOL_TCP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;采用TCP方式传输</span>
	XTP_PROTOCOL_UDP		<span class="token comment">///&lt;采用UDP方式传输(仅行情接口支持)</span>
<span class="token punctuation">}</span>XTP_PROTOCOL_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>session_id表明此资金账号登录是否成功。</p><p>&quot;0&quot;表示登录失败，可以调用GetApiLastError()来获取错误代码。</p><p>非&quot;0&quot;表示登录成功，此时需要记录下这个返回值session_id，与登录的资金账户对应。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登录请求，参数网址端口账户密码模式等和默认参数本机地址需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>string trade_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> trade_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_name <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_pw <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//根据本地网卡对应的ip设定</span>
	
	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>trade_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trade_server_port<span class="token punctuation">,</span> account_name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account_pw<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_TCP<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_16-logout" tabindex="-1"><a class="header-anchor" href="#_16-logout"><span>16. Logout</span></a></h3><p>登出请求。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>登出是否成功，&quot;0&quot;表示登出成功，&quot;-1&quot;表示登出失败</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登出请求</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">Logout</span><span class="token punctuation">(</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_17-isserverrestart" tabindex="-1"><a class="header-anchor" href="#_17-isserverrestart"><span>17. IsServerRestart</span></a></h3><p>服务器是否重启过。此函数必须在Login之后调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsServerRestart</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>&quot;true&quot;表示重启过，&quot;false&quot;表示没有重启过。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询服务器是否重启过</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">bool</span> bisr <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">IsServerRestart</span><span class="token punctuation">(</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_18-modifyuserterminalinfo" tabindex="-1"><a class="header-anchor" href="#_18-modifyuserterminalinfo"><span>18. ModifyUserTerminalInfo</span></a></h3><p>修改已登录用户的硬件信息，仅限授权系统使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ModifyUserTerminalInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPUserTerminalInfoReq<span class="token operator">*</span> info<span class="token punctuation">,</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>info：需要修改成的用户硬件信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///申报用户的ip和mac等信息，仅限授权用户使用</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPUserTerminalInfoReq</span> <span class="token punctuation">{</span>
	<span class="token keyword">char</span>  local_ip<span class="token punctuation">[</span>XTP_INET_ADDRESS_STR_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>			<span class="token comment">///&lt;本地IP地址</span>
	<span class="token keyword">char</span>  mac_addr<span class="token punctuation">[</span>XTP_MAC_ADDRESS_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>				<span class="token comment">///&lt;MAC地址</span>
	<span class="token keyword">char</span>  hd<span class="token punctuation">[</span>XTP_HARDDISK_SN_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>						<span class="token comment">///&lt;硬盘序列号</span>
	XTPTerminalType term_type<span class="token punctuation">;</span>							<span class="token comment">///&lt;终端类型</span>
	<span class="token keyword">char</span>  internet_ip<span class="token punctuation">[</span>XTP_INET_ADDRESS_STR_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">///&lt;公网IP地址</span>
	<span class="token keyword">int32_t</span> internet_port<span class="token punctuation">;</span>								<span class="token comment">///&lt;公网端口号</span>
	XTPVersionType  client_version<span class="token punctuation">;</span>						<span class="token comment">///&lt;客户端版本号</span>
	<span class="token keyword">char</span>  macos_sno<span class="token punctuation">[</span>XTP_MACOS_SNO_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>					<span class="token comment">///&lt;MacOS系统的序列号，仅为MacOS系统需要填写</span>
	<span class="token keyword">char</span>  unused<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>									<span class="token comment">///&lt;预留</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTPTerminalType是一种终端类型枚举，仅供授权系统使用</span>
<span class="token keyword">enum</span> <span class="token class-name">XTPTerminalType</span>
<span class="token punctuation">{</span>
	XTP_TERMINAL_PC <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token comment">///&lt;&quot;PC&quot;,PC-windows及MacOS</span>
	XTP_TERMINAL_ANDROID<span class="token punctuation">,</span>           <span class="token comment">///&lt;&quot;MA&quot;,Mobile-Android</span>
	XTP_TERMINAL_IOS<span class="token punctuation">,</span>               <span class="token comment">///&lt;&quot;MI&quot;,Mobile-Ios</span>
	XTP_TERMINAL_WP<span class="token punctuation">,</span>                <span class="token comment">///&lt;&quot;MW&quot;,Mobile-Windows Phone</span>
	XTP_TERMINAL_STATION<span class="token punctuation">,</span>           <span class="token comment">///&lt;&quot;WP&quot;,无盘站</span>
	XTP_TERMINAL_TEL<span class="token punctuation">,</span>               <span class="token comment">///&lt;&quot;TO&quot;,电话委托</span>
	XTP_TERMINAL_PC_LINUX           <span class="token comment">///&lt;&quot;OH&quot;,PC-linux及其他终端</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 版本号类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span> XTPVersionType<span class="token punctuation">[</span>XTP_VERSION_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/// 存放版本号的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_VERSION_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">/// IP地址的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_INET_ADDRESS_STR_LEN</span> <span class="token expression"><span class="token number">64</span></span></span>
<span class="token comment">/// MAC地址的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_MAC_ADDRESS_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">/// 硬盘序列号的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_HARDDISK_SN_LEN</span> <span class="token expression"><span class="token number">24</span></span></span>
<span class="token comment">/// MacOS系统序列号的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_MACOS_SNO_LEN</span> <span class="token expression"><span class="token number">21</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>发送消息是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 修改已登录用户的硬件信息，所有参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    XTPUserTerminalInfoReq info<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPUserTerminalInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string s_local_ip<span class="token punctuation">{</span><span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string s_mac_addr<span class="token punctuation">{</span><span class="token string">&quot;xx.xx.xx.xx.xx.xx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string s_hd<span class="token punctuation">{</span><span class="token string">&quot;xxxxxxxxxxx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string s_internet_ip<span class="token punctuation">{</span><span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string s_client_version<span class="token punctuation">{</span><span class="token string">&quot;x.x.xx.xx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">strncpy</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>local_ip<span class="token punctuation">,</span> s_local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_INET_ADDRESS_STR_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>mac_addr<span class="token punctuation">,</span> s_mac_addr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_MAC_ADDRESS_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>hd<span class="token punctuation">,</span> s_hd<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_HARDDISK_SN_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    info<span class="token punctuation">.</span>term_type <span class="token operator">=</span> XTP_TERMINAL_PC<span class="token punctuation">;</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>internet_ip<span class="token punctuation">,</span> s_internet_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_INET_ADDRESS_STR_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    info<span class="token punctuation">.</span>internet_port <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>client_version<span class="token punctuation">,</span> s_client_version<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_VERSION_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">ModifyUserTerminalInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_19-queryaccounttrademarket" tabindex="-1"><a class="header-anchor" href="#_19-queryaccounttrademarket"><span>19. QueryAccountTradeMarket</span></a></h3><p>查询用户在本节点上的可交易市场类型。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAccountTradeMarket</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>发送消息是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryAccountTradeMarket</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAccountTradeMarket</span><span class="token punctuation">(</span><span class="token keyword">int</span> trade_location<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_20-getaneworderxtpid" tabindex="-1"><a class="header-anchor" href="#_20-getaneworderxtpid"><span>20. GetANewOrderXTPID</span></a></h3><p>为用户获取一个新的订单XTPID，用于报单。</p><p>此函数必须在Login之后调用，通过这个函数获取的order_xtp_id仅用于对应的用户报单，如果设置错误，将会导致下单失败。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">GetANewOrderXTPID</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>生成的订单XTPID，非“0”表示获取成功，“0”表示获取失败，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetANewOrderXTPID</span><span class="token punctuation">(</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_21-insertorder" tabindex="-1"><a class="header-anchor" href="#_21-insertorder"><span>21. InsertOrder</span></a></h3><p>报单录入请求。</p><p>交易所接收订单后，会在报单响应函数OnOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOrder</span><span class="token punctuation">(</span>XTPOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order：报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///新订单请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPOrderInsertInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">///XTP系统订单ID，无需用户填写，在XTP系统中唯一</span>
    <span class="token keyword">uint64_t</span>                order_xtp_id<span class="token punctuation">;</span>
    <span class="token comment">///报单引用，由客户自定义</span>
    <span class="token keyword">uint32_t</span>	            order_client_id<span class="token punctuation">;</span>
    <span class="token comment">///合约代码 客户端请求不带空格，以&#39;\\0&#39;结尾</span>
    <span class="token keyword">char</span>                    ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE         market<span class="token punctuation">;</span>
    <span class="token comment">///价格</span>
    <span class="token keyword">double</span>                  price<span class="token punctuation">;</span>
    <span class="token comment">///止损价（保留字段）</span>
    <span class="token keyword">double</span>                  stop_price<span class="token punctuation">;</span>
    <span class="token comment">///数量(股票单位为股，逆回购单位为张)</span>
    <span class="token keyword">int64_t</span>                 quantity<span class="token punctuation">;</span>
    <span class="token comment">///报单价格</span>
    XTP_PRICE_TYPE          price_type<span class="token punctuation">;</span>
    <span class="token keyword">union</span><span class="token punctuation">{</span>
		<span class="token comment">///32位字段，用来兼容老版本api，用户无需关心</span>
        <span class="token keyword">uint32_t</span>            u32<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token comment">///买卖方向</span>
            XTP_SIDE_TYPE               side<span class="token punctuation">;</span>
            <span class="token comment">///开平标志</span>
            XTP_POSITION_EFFECT_TYPE    position_effect<span class="token punctuation">;</span>
			<span class="token comment">///预留字段1</span>
            <span class="token keyword">uint8_t</span>                     reserved1<span class="token punctuation">;</span>
			<span class="token comment">///预留字段2</span>
			<span class="token keyword">uint8_t</span>                     reserved2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">///业务类型</span>
	XTP_BUSINESS_TYPE       business_type<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_PRICE_TYPE是价格类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PRICE_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PRICE_LIMIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token comment">///&lt;限价单-沪 / 深 / 沪期权 / 深期权 （除普通股票业务外，其余未特指的业务均使用此种类型）</span>
	XTP_PRICE_BEST_OR_CANCEL<span class="token punctuation">,</span>      <span class="token comment">///&lt;即时成交剩余转撤销，市价单-深 / 沪期权 / 深期权</span>
	XTP_PRICE_BEST5_OR_LIMIT<span class="token punctuation">,</span>      <span class="token comment">///&lt;最优五档即时成交剩余转限价，市价单-沪</span>
	XTP_PRICE_BEST5_OR_CANCEL<span class="token punctuation">,</span>     <span class="token comment">///&lt;最优5档即时成交剩余转撤销，市价单-沪深 / 深期权</span>
	XTP_PRICE_ALL_OR_CANCEL<span class="token punctuation">,</span>       <span class="token comment">///&lt;全部成交或撤销,市价单-深 / 沪期权 / 深期权</span>
	XTP_PRICE_FORWARD_BEST<span class="token punctuation">,</span>        <span class="token comment">///&lt;本方最优，市价单-深 / 深期权 / 沪科创板</span>
	XTP_PRICE_REVERSE_BEST_LIMIT<span class="token punctuation">,</span>  <span class="token comment">///&lt;对方最优剩余转限价，市价单-深 / 沪期权 / 深期权 / 沪科创板</span>
	XTP_PRICE_LIMIT_OR_CANCEL<span class="token punctuation">,</span>	   <span class="token comment">///&lt;期权限价申报FOK</span>
	XTP_PRICE_TYPE_UNKNOWN<span class="token punctuation">,</span>		   <span class="token comment">///&lt;未知或者无效价格类型</span>
<span class="token punctuation">}</span>XTP_PRICE_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_SIDE_TYPE是买卖方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_SIDE_TYPE<span class="token punctuation">;</span>

<span class="token comment">///买（新股申购，ETF买，配股，信用交易中担保品买）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_BUY</span>            <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">///卖（逆回购，ETF卖，信用交易中担保品卖）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SELL</span>           <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">///申购</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_PURCHASE</span>       <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">///赎回</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REDEMPTION</span>     <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">///拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SPLIT</span>          <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">///合并</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MERGE</span>          <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">///改版之后的side的备兑，暂不支持</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_COVER</span>          <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">///改版之后的side锁定（对应开平标识为开）/解锁（对应开平标识为平）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_FREEZE</span>         <span class="token expression"><span class="token number">12</span></span></span>
<span class="token comment">/// 融资买入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MARGIN_TRADE</span>	<span class="token expression"><span class="token number">21</span></span></span>
<span class="token comment">/// 融券卖出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SHORT_SELL</span>		<span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">/// 卖券还款</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_MARGIN</span>	<span class="token expression"><span class="token number">23</span></span></span>
<span class="token comment">/// 买券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_STOCK</span>	<span class="token expression"><span class="token number">24</span></span></span>
<span class="token comment">/// 现金还款（不放在普通订单协议，另加请求和查询协议）</span>
<span class="token comment">//#define XTP_SIDE_CASH_REPAY_MARGIN	25</span>
<span class="token comment">/// 现券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_STOCK_REPAY_STOCK</span>	<span class="token expression"><span class="token number">26</span></span></span>
<span class="token comment">/// 余券划转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SURSTK_TRANS</span>       <span class="token expression"><span class="token number">27</span></span></span>
<span class="token comment">/// 担保品转入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSIN</span>     <span class="token expression"><span class="token number">28</span></span></span>
<span class="token comment">/// 担保品转出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSOUT</span>    <span class="token expression"><span class="token number">29</span></span></span>

<span class="token comment">///组合策略的组合</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_COMBINE</span>        <span class="token expression"><span class="token number">31</span> </span></span>
<span class="token comment">///组合策略的拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT</span>          <span class="token expression"><span class="token number">32</span> </span></span>
<span class="token comment">///组合策略的管理员强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE</span>    <span class="token expression"><span class="token number">33</span> </span></span>
<span class="token comment">///组合策略的交易所强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE_EXCH</span>    <span class="token expression"><span class="token number">34</span></span></span>

<span class="token comment">///未知或者无效买卖方向</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_UNKNOWN</span>        <span class="token expression"><span class="token number">50</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_POSITION_EFFECT_TYPE是开平标识类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_POSITION_EFFECT_TYPE<span class="token punctuation">;</span>

<span class="token comment">/// 初始值或未知值开平标识，除期权外，均使用此值</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_INIT</span>                <span class="token expression"><span class="token number">0</span></span></span>
<span class="token comment">/// 开</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_OPEN</span>                <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">/// 平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSE</span>               <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">/// 强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_FORCECLOSE</span>          <span class="token expression"><span class="token number">3</span></span></span>
<span class="token comment">/// 平今</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSETODAY</span>          <span class="token expression"><span class="token number">4</span></span></span>
<span class="token comment">/// 平昨</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSEYESTERDAY</span>      <span class="token expression"><span class="token number">5</span></span></span>
<span class="token comment">/// 强减</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_FORCEOFF</span>            <span class="token expression"><span class="token number">6</span></span></span>
<span class="token comment">/// 本地强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_LOCALFORCECLOSE</span>     <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">/// 信用业务追保强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_COVER</span>  <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">/// 信用业务清偿强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_CLEAR</span>  <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">/// 信用业务合约到期强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_DEBT</span>   <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">/// 信用业务无条件强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_UNCOND</span> <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">/// 未知的开平标识类型</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_UNKNOWN</span>             <span class="token expression"><span class="token number">12</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_BUSINESS_TYPE证券业务类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_BUSINESS_TYPE</span>
<span class="token punctuation">{</span>
	XTP_BUSINESS_TYPE_CASH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">///&lt;普通股票业务（股票买卖，ETF买卖，沪市交易型货币基金等）</span>
	XTP_BUSINESS_TYPE_IPOS<span class="token punctuation">,</span>                <span class="token comment">///&lt;新股申购业务（对应的price type需选择限价类型）</span>
	XTP_BUSINESS_TYPE_REPO<span class="token punctuation">,</span>                <span class="token comment">///&lt;回购业务（国债逆回购业务对应的price type填为限价，side填为卖）</span>
	XTP_BUSINESS_TYPE_ETF<span class="token punctuation">,</span>                 <span class="token comment">///&lt;ETF申赎业务</span>
	XTP_BUSINESS_TYPE_MARGIN<span class="token punctuation">,</span>              <span class="token comment">///&lt;融资融券业务</span>
	XTP_BUSINESS_TYPE_DESIGNATION<span class="token punctuation">,</span>         <span class="token comment">///&lt;转托管（未支持）</span>
	XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">,</span>		   <span class="token comment">///&lt;配股业务（对应的price type需选择限价类型,side填为买）</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金申赎业务</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金拆分合并业务</span>
	XTP_BUSINESS_TYPE_MONEY_FUND<span class="token punctuation">,</span>		   <span class="token comment">///&lt;货币基金申赎业务（暂未支持，沪市交易型货币基金的买卖请使用普通股票业务）</span>
    XTP_BUSINESS_TYPE_OPTION<span class="token punctuation">,</span>              <span class="token comment">///&lt;期权业务</span>
    XTP_BUSINESS_TYPE_EXECUTE<span class="token punctuation">,</span>             <span class="token comment">///&lt;行权</span>
    XTP_BUSINESS_TYPE_FREEZE<span class="token punctuation">,</span>              <span class="token comment">///&lt;锁定解锁，暂不支持</span>
    XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">,</span>      <span class="token comment">///&lt;期权组合策略 组合和拆分业务</span>
    XTP_BUSINESS_TYPE_EXECUTE_COMBINE<span class="token punctuation">,</span>     <span class="token comment">///&lt;期权行权合并业务</span>
	XTP_BUSINESS_TYPE_BOND_SWAP_STOCK<span class="token punctuation">,</span>     <span class="token comment">///&lt;债转股业务</span>
    XTP_BUSINESS_TYPE_UNKNOWN<span class="token punctuation">,</span>             <span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span> XTP_BUSINESS_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示报单发送成功，用户需要记录下返回的order_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报入一笔限价单，以9.01的价格买入沪市&quot;600000&quot;的普通交易，数量1000。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPOrderInsertInfo order<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOrderInsertInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	order<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_CASH<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_BUY<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>position_effect <span class="token operator">=</span> XTP_POSITION_EFFECT_INIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price_type <span class="token operator">=</span> XTP_PRICE_LIMIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9.01</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> order_xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOrder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderEvent</span><span class="token punctuation">(</span>XTPOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 报单成交响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTradeEvent</span><span class="token punctuation">(</span>XTPTradeReport <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_22-insertorderextra" tabindex="-1"><a class="header-anchor" href="#_22-insertorderextra"><span>22. InsertOrderExtra</span></a></h3><p>已经提前设置order_xtp_id的报单录入请求，与GetANewOrderXTPID()配合使用。</p><p>使用设置好的order_xtp_id（通过GetANewOrderXTPID()获得）进行报单，注意此处如果order_xtp_id设置不对，将导致报单失败。</p><p>交易所接收订单后，会在报单响应函数OnOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOrderExtra</span><span class="token punctuation">(</span>XTPOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order：报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单，也可以什么都不填。order.order_xtp_id字段必须是通过GetANewOrderXTPID()获得的值，order.ticker必须不带空格，以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///新订单请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPOrderInsertInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">///XTP系统订单ID，无需用户填写，在XTP系统中唯一</span>
    <span class="token keyword">uint64_t</span>                order_xtp_id<span class="token punctuation">;</span>
    <span class="token comment">///报单引用，由客户自定义</span>
    <span class="token keyword">uint32_t</span>	            order_client_id<span class="token punctuation">;</span>
    <span class="token comment">///合约代码 客户端请求不带空格，以&#39;\\0&#39;结尾</span>
    <span class="token keyword">char</span>                    ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE         market<span class="token punctuation">;</span>
    <span class="token comment">///价格</span>
    <span class="token keyword">double</span>                  price<span class="token punctuation">;</span>
    <span class="token comment">///止损价（保留字段）</span>
    <span class="token keyword">double</span>                  stop_price<span class="token punctuation">;</span>
    <span class="token comment">///数量(股票单位为股，逆回购单位为张)</span>
    <span class="token keyword">int64_t</span>                 quantity<span class="token punctuation">;</span>
    <span class="token comment">///报单价格</span>
    XTP_PRICE_TYPE          price_type<span class="token punctuation">;</span>
    <span class="token keyword">union</span><span class="token punctuation">{</span>
		<span class="token comment">///32位字段，用来兼容老版本api，用户无需关心</span>
        <span class="token keyword">uint32_t</span>            u32<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token comment">///买卖方向</span>
            XTP_SIDE_TYPE               side<span class="token punctuation">;</span>
            <span class="token comment">///开平标志</span>
            XTP_POSITION_EFFECT_TYPE    position_effect<span class="token punctuation">;</span>
			<span class="token comment">///预留字段1</span>
            <span class="token keyword">uint8_t</span>                     reserved1<span class="token punctuation">;</span>
			<span class="token comment">///预留字段2</span>
			<span class="token keyword">uint8_t</span>                     reserved2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">///业务类型</span>
	XTP_BUSINESS_TYPE       business_type<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_PRICE_TYPE是价格类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PRICE_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PRICE_LIMIT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token comment">///&lt;限价单-沪 / 深 / 沪期权 / 深期权 （除普通股票业务外，其余未特指的业务均使用此种类型）</span>
	XTP_PRICE_BEST_OR_CANCEL<span class="token punctuation">,</span>      <span class="token comment">///&lt;即时成交剩余转撤销，市价单-深 / 沪期权 / 深期权</span>
	XTP_PRICE_BEST5_OR_LIMIT<span class="token punctuation">,</span>      <span class="token comment">///&lt;最优五档即时成交剩余转限价，市价单-沪</span>
	XTP_PRICE_BEST5_OR_CANCEL<span class="token punctuation">,</span>     <span class="token comment">///&lt;最优5档即时成交剩余转撤销，市价单-沪深 / 深期权</span>
	XTP_PRICE_ALL_OR_CANCEL<span class="token punctuation">,</span>       <span class="token comment">///&lt;全部成交或撤销,市价单-深 / 沪期权 / 深期权</span>
	XTP_PRICE_FORWARD_BEST<span class="token punctuation">,</span>        <span class="token comment">///&lt;本方最优，市价单-深 / 深期权 / 沪科创板</span>
	XTP_PRICE_REVERSE_BEST_LIMIT<span class="token punctuation">,</span>  <span class="token comment">///&lt;对方最优剩余转限价，市价单-深 / 沪期权 / 深期权 / 沪科创板</span>
	XTP_PRICE_LIMIT_OR_CANCEL<span class="token punctuation">,</span>	   <span class="token comment">///&lt;期权限价申报FOK</span>
	XTP_PRICE_TYPE_UNKNOWN<span class="token punctuation">,</span>		   <span class="token comment">///&lt;未知或者无效价格类型</span>
<span class="token punctuation">}</span>XTP_PRICE_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_SIDE_TYPE是买卖方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_SIDE_TYPE<span class="token punctuation">;</span>

<span class="token comment">///买（新股申购，ETF买，配股，信用交易中担保品买）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_BUY</span>            <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">///卖（逆回购，ETF卖，信用交易中担保品卖）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SELL</span>           <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">///申购</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_PURCHASE</span>       <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">///赎回</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REDEMPTION</span>     <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">///拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SPLIT</span>          <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">///合并</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MERGE</span>          <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">///改版之后的side的备兑，暂不支持</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_COVER</span>          <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">///改版之后的side锁定（对应开平标识为开）/解锁（对应开平标识为平）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_FREEZE</span>         <span class="token expression"><span class="token number">12</span></span></span>
<span class="token comment">/// 融资买入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MARGIN_TRADE</span>	<span class="token expression"><span class="token number">21</span></span></span>
<span class="token comment">/// 融券卖出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SHORT_SELL</span>		<span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">/// 卖券还款</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_MARGIN</span>	<span class="token expression"><span class="token number">23</span></span></span>
<span class="token comment">/// 买券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_STOCK</span>	<span class="token expression"><span class="token number">24</span></span></span>
<span class="token comment">/// 现金还款（不放在普通订单协议，另加请求和查询协议）</span>
<span class="token comment">//#define XTP_SIDE_CASH_REPAY_MARGIN	25</span>
<span class="token comment">/// 现券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_STOCK_REPAY_STOCK</span>	<span class="token expression"><span class="token number">26</span></span></span>
<span class="token comment">/// 余券划转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SURSTK_TRANS</span>       <span class="token expression"><span class="token number">27</span></span></span>
<span class="token comment">/// 担保品转入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSIN</span>     <span class="token expression"><span class="token number">28</span></span></span>
<span class="token comment">/// 担保品转出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSOUT</span>    <span class="token expression"><span class="token number">29</span></span></span>

<span class="token comment">///组合策略的组合</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_COMBINE</span>        <span class="token expression"><span class="token number">31</span> </span></span>
<span class="token comment">///组合策略的拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT</span>          <span class="token expression"><span class="token number">32</span> </span></span>
<span class="token comment">///组合策略的管理员强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE</span>    <span class="token expression"><span class="token number">33</span> </span></span>
<span class="token comment">///组合策略的交易所强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE_EXCH</span>    <span class="token expression"><span class="token number">34</span></span></span>

<span class="token comment">///未知或者无效买卖方向</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_UNKNOWN</span>        <span class="token expression"><span class="token number">50</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_POSITION_EFFECT_TYPE是开平标识类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_POSITION_EFFECT_TYPE<span class="token punctuation">;</span>

<span class="token comment">/// 初始值或未知值开平标识，除期权外，均使用此值</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_INIT</span>                <span class="token expression"><span class="token number">0</span></span></span>
<span class="token comment">/// 开</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_OPEN</span>                <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">/// 平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSE</span>               <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">/// 强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_FORCECLOSE</span>          <span class="token expression"><span class="token number">3</span></span></span>
<span class="token comment">/// 平今</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSETODAY</span>          <span class="token expression"><span class="token number">4</span></span></span>
<span class="token comment">/// 平昨</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CLOSEYESTERDAY</span>      <span class="token expression"><span class="token number">5</span></span></span>
<span class="token comment">/// 强减</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_FORCEOFF</span>            <span class="token expression"><span class="token number">6</span></span></span>
<span class="token comment">/// 本地强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_LOCALFORCECLOSE</span>     <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">/// 信用业务追保强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_COVER</span>  <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">/// 信用业务清偿强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_CLEAR</span>  <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">/// 信用业务合约到期强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_DEBT</span>   <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">/// 信用业务无条件强平</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_CREDIT_FORCE_UNCOND</span> <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">/// 未知的开平标识类型</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_POSITION_EFFECT_UNKNOWN</span>             <span class="token expression"><span class="token number">12</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_BUSINESS_TYPE证券业务类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_BUSINESS_TYPE</span>
<span class="token punctuation">{</span>
	XTP_BUSINESS_TYPE_CASH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">///&lt;普通股票业务（股票买卖，ETF买卖，沪市交易型货币基金等）</span>
	XTP_BUSINESS_TYPE_IPOS<span class="token punctuation">,</span>                <span class="token comment">///&lt;新股申购业务（对应的price type需选择限价类型）</span>
	XTP_BUSINESS_TYPE_REPO<span class="token punctuation">,</span>                <span class="token comment">///&lt;回购业务（国债逆回购业务对应的price type填为限价，side填为卖）</span>
	XTP_BUSINESS_TYPE_ETF<span class="token punctuation">,</span>                 <span class="token comment">///&lt;ETF申赎业务</span>
	XTP_BUSINESS_TYPE_MARGIN<span class="token punctuation">,</span>              <span class="token comment">///&lt;融资融券业务</span>
	XTP_BUSINESS_TYPE_DESIGNATION<span class="token punctuation">,</span>         <span class="token comment">///&lt;转托管（未支持）</span>
	XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">,</span>		   <span class="token comment">///&lt;配股业务（对应的price type需选择限价类型,side填为买）</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金申赎业务</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金拆分合并业务</span>
	XTP_BUSINESS_TYPE_MONEY_FUND<span class="token punctuation">,</span>		   <span class="token comment">///&lt;货币基金申赎业务（暂未支持，沪市交易型货币基金的买卖请使用普通股票业务）</span>
    XTP_BUSINESS_TYPE_OPTION<span class="token punctuation">,</span>              <span class="token comment">///&lt;期权业务</span>
    XTP_BUSINESS_TYPE_EXECUTE<span class="token punctuation">,</span>             <span class="token comment">///&lt;行权</span>
    XTP_BUSINESS_TYPE_FREEZE<span class="token punctuation">,</span>              <span class="token comment">///&lt;锁定解锁，暂不支持</span>
    XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">,</span>      <span class="token comment">///&lt;期权组合策略 组合和拆分业务</span>
    XTP_BUSINESS_TYPE_EXECUTE_COMBINE<span class="token punctuation">,</span>     <span class="token comment">///&lt;期权行权合并业务</span>
	XTP_BUSINESS_TYPE_BOND_SWAP_STOCK<span class="token punctuation">,</span>     <span class="token comment">///&lt;债转股业务</span>
    XTP_BUSINESS_TYPE_UNKNOWN<span class="token punctuation">,</span>             <span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span> XTP_BUSINESS_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非“0”表示报单发送成功，此时等同与传入的order_xtp_id。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报入一笔限价单，以9.01的价格买入沪市&quot;600000&quot;的普通交易，数量1000。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> new_xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetANewOrderXTPID</span><span class="token punctuation">(</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

	XTPOrderInsertInfo order<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOrderInsertInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	order<span class="token punctuation">.</span>order_xtp_id <span class="token operator">=</span> new_xtp_id<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_CASH<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_BUY<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>position_effect <span class="token operator">=</span> XTP_POSITION_EFFECT_INIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price_type <span class="token operator">=</span> XTP_PRICE_LIMIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9.01</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> order_xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOrderExtra</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>order_xtp_id <span class="token operator">==</span> new_xtp_id<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 报单发送成功</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderEvent</span><span class="token punctuation">(</span>XTPOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 报单成交响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTradeEvent</span><span class="token punctuation">(</span>XTPTradeReport <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_23-cancelorder" tabindex="-1"><a class="header-anchor" href="#_23-cancelorder"><span>23. CancelOrder</span></a></h3><p>撤单请求。</p><p>如果撤单成功，会在报单响应函数OnOrderEvent()里返回原单部撤或者全撤的消息，如果不成功，会在OnCancelOrderError()响应函数中返回错误原因。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CancelOrder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要撤销的委托单在XTP系统中的ID</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>撤单在XTP系统中的ID,如果为‘0’表示撤单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示撤单发送成功，用户需要记录下返回的order_cancel_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 撤单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CancelOrder</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 撤单响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderEvent</span><span class="token punctuation">(</span>XTPOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 撤单出错响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCancelOrderError</span><span class="token punctuation">(</span>XTPOrderCancelInfo <span class="token operator">*</span>cancel_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_24-queryorderbyxtpid" tabindex="-1"><a class="header-anchor" href="#_24-queryorderbyxtpid"><span>24. QueryOrderByXTPID</span></a></h3><p>根据报单ID请求查询报单-旧版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrderByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据报单ID请求查询报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrderByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrder</span><span class="token punctuation">(</span>XTPQueryOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_25-queryorders" tabindex="-1"><a class="header-anchor" href="#_25-queryorders"><span>25. QueryOrders</span></a></h3><p>请求查询报单-旧版本接口。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrders</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///报单查询请求-条件查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOrderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///证券代码，可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在当前交易日0点至当前时间点的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在22年8月1日0时至15时的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20220801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20220801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrder</span><span class="token punctuation">(</span>XTPQueryOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_26-queryunfinishedorders" tabindex="-1"><a class="header-anchor" href="#_26-queryunfinishedorders"><span>26. QueryUnfinishedOrders</span></a></h3><p>请求查询未完结报单-旧版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryUnfinishedOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 请求查询未完结报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryUnfinishedOrders</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrder</span><span class="token punctuation">(</span>XTPQueryOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_27-queryordersbypage" tabindex="-1"><a class="header-anchor" href="#_27-queryordersbypage"><span>27. QueryOrdersByPage</span></a></h3><p>分页请求查询报单-旧版本接口。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询订单请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOrderByPageReq</span>
<span class="token punctuation">{</span>
	<span class="token comment">///需要查询的订单条数</span>
    <span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
	<span class="token comment">///上一次收到的查询订单结果中带回来的索引，如果是从头查询，请置0</span>
    <span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
	<span class="token comment">///保留字段</span>
    <span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询1000条报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrdersByPage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrderByPage</span><span class="token punctuation">(</span>XTPQueryOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> order_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_28-queryorderbyxtpidex" tabindex="-1"><a class="header-anchor" href="#_28-queryorderbyxtpidex"><span>28. QueryOrderByXTPIDEx</span></a></h3><p>根据报单ID请求查询报单-新版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrderByXTPIDEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据报单ID请求查询报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrderByXTPIDEx</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrderEx</span><span class="token punctuation">(</span>XTPOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_29-queryordersex" tabindex="-1"><a class="header-anchor" href="#_29-queryordersex"><span>29. QueryOrdersEx</span></a></h3><p>请求查询报单-新版本接口。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///报单查询请求-条件查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOrderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///证券代码，可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在当前交易日0点至当前时间点的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在21年8月1日0时至15时的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20210801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20210801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrderEx</span><span class="token punctuation">(</span>XTPOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_30-queryunfinishedordersex" tabindex="-1"><a class="header-anchor" href="#_30-queryunfinishedordersex"><span>30. QueryUnfinishedOrdersEx</span></a></h3><p>请求查询未完结报单-新版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryUnfinishedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 请求查询未完结报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryUnfinishedOrdersEx</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrderEx</span><span class="token punctuation">(</span>XTPOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_31-queryordersbypageex" tabindex="-1"><a class="header-anchor" href="#_31-queryordersbypageex"><span>31. QueryOrdersByPageEx</span></a></h3><p>分页请求查询报单-新版本接口。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOrdersByPageEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询订单请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOrderByPageReq</span>
<span class="token punctuation">{</span>
	<span class="token comment">///需要查询的订单条数</span>
    <span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
	<span class="token comment">///上一次收到的查询订单结果中带回来的索引，如果是从头查询，请置0</span>
    <span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
	<span class="token comment">///保留字段</span>
    <span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询1000条报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOrdersByPageEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOrderByPageEx</span><span class="token punctuation">(</span>XTPOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> order_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_32-querytradesbyxtpid" tabindex="-1"><a class="header-anchor" href="#_32-querytradesbyxtpid"><span>32. QueryTradesByXTPID</span></a></h3><p>根据委托编号请求查询相关成交。</p><p>此函数查询出的结果可能对应多个查询结果响应。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTradesByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的委托编号，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据委托编号请求查询相关成交</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryTradesByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTrade</span><span class="token punctuation">(</span>XTPQueryTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_33-querytrades" tabindex="-1"><a class="header-anchor" href="#_33-querytrades"><span>33. QueryTrades</span></a></h3><p>请求查询已成交。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有成交回报，否则查询时间段内所有跟股票代码相关的成交回报，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTrades</span><span class="token punctuation">(</span>XTPQueryTraderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的成交回报筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询成交回报请求-查询条件</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryTraderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///证券代码，可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///开始时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span> 
    <span class="token comment">///结束时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在当前交易日0点至当前时间点的全部成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询600000这支股票在21年8月1日0时至15时的全部成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20210801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20210801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTrade</span><span class="token punctuation">(</span>XTPQueryTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_34-querytradesbypage" tabindex="-1"><a class="header-anchor" href="#_34-querytradesbypage"><span>34. QueryTradesByPage</span></a></h3><p>分页请求查询成交回报。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTradesByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryTraderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询成交回报的条件，如果第一次查询，那么reference填0</p><p>session_id：资金账户对应的session_id，登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询成交回报请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryTraderByPageReq</span>
<span class="token punctuation">{</span>
	<span class="token comment">///需要查询的成交回报条数</span>
	<span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
	<span class="token comment">///上一次收到的查询成交回报结果中带回来的索引，如果是从头查询，请置0</span>
	<span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
	<span class="token comment">///保留字段</span>
	<span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>无</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询1000条成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryTraderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryTraderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryTradesByPage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTradeByPage</span><span class="token punctuation">(</span>XTPQueryTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> trade_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_35-queryposition" tabindex="-1"><a class="header-anchor" href="#_35-queryposition"><span>35. QueryPosition</span></a></h3><p>请求查询投资者持仓。</p><p>该方法如果用户提供了合约代码，则会查询此合约的持仓信息，如果合约代码为空，则默认查询所有持仓信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> XTP_MARKET_TYPE market <span class="token operator">=</span> XTP_MKT_INIT<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Ticker：需要查询的持仓合约代码，可以为空，如果不为空，请不带空格，并以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>market：需要查询持仓的合约所在市场，默认为0，仅在合约代码不为NULL的时候，才会使用。market不指定或者为非0的其他非有效值情况下，可能由于证券代码沪深2个市场有重复，而导致查询不到所需的持仓。如果想正确查询指定持仓，请指定market</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询沪市600000这支股票的持仓</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token string">&quot;600000&quot;</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id， XTP_MKT_SH_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询全市场持仓</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryPosition</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">,</span> XTP_MKT_INIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryPosition</span><span class="token punctuation">(</span>XTPQueryStkPositionRsp <span class="token operator">*</span>position<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_36-queryasset" tabindex="-1"><a class="header-anchor" href="#_36-queryasset"><span>36. QueryAsset</span></a></h3><p>请求查询资产。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAsset</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询资金</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryAsset</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAsset</span><span class="token punctuation">(</span>XTPQueryAssetRsp <span class="token operator">*</span>asset<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_37-querystructuredfund" tabindex="-1"><a class="header-anchor" href="#_37-querystructuredfund"><span>37. QueryStructuredFund</span></a></h3><p>请求查询分级基金。此函数查询出的结果可能对应多个查询结果响应。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryStructuredFund</span><span class="token punctuation">(</span>XTPQueryStructuredFundInfoReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的分级基金筛选条件，其中母基金代码可以为空，则默认所有存在的母基金，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中交易市场不能为空</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询分级基金信息结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryStructuredFundInfoReq</span>
<span class="token punctuation">{</span>
	XTP_EXCHANGE_TYPE   exchange_id<span class="token punctuation">;</span>  <span class="token comment">///&lt;交易所代码，不可为空</span>
	<span class="token keyword">char</span>                sf_ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">///&lt;分级基金母基金代码，可以为空，如果为空，则默认查询所有的分级基金</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_EXCHANGE_TYPE是交易所类型，行情里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_EXCHANGE_TYPE</span>
<span class="token punctuation">{</span>
	XTP_EXCHANGE_SH <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;上证</span>
	XTP_EXCHANGE_SZ<span class="token punctuation">,</span>		<span class="token comment">///&lt;深证</span>
	XTP_EXCHANGE_NQ<span class="token punctuation">,</span>		<span class="token comment">///&lt;新三板 全国中小企业股份转让系统</span>
    XTP_EXCHANGE_UNKNOWN	<span class="token comment">///&lt;不存在的交易所类型</span>
<span class="token punctuation">}</span>XTP_EXCHANGE_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询深证交易所164809这支母基金的分级基金</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryStructuredFundInfoReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryStructuredFundInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>exchange_id <span class="token operator">=</span> XTP_EXCHANGE_SZ<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_sfticker <span class="token operator">=</span> <span class="token string">&quot;164809&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>sf_ticker<span class="token punctuation">,</span> stdstr_sfticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryStructuredFund</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 母基金代码可为空，查询深证交易所所有母基金的分级基金</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryStructuredFundInfoReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryStructuredFundInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>exchange_id <span class="token operator">=</span> XTP_EXCHANGE_SZ<span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryStructuredFund</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryStructuredFund</span><span class="token punctuation">(</span>XTPStructuredFundInfo <span class="token operator">*</span>fund_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_38-fundtransfer" tabindex="-1"><a class="header-anchor" href="#_38-fundtransfer"><span>38. FundTransfer</span></a></h3><p>资金划拨请求。此函数支持一号两中心节点之间的资金划拨，注意资金划拨的方向。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">FundTransfer</span><span class="token punctuation">(</span>XTPFundTransferReq <span class="token operator">*</span>fund_transfer<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>fund_transfer：资金划拨的请求信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///用户资金请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPFundTransferReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///资金内转编号，无需用户填写，类似于xtp_id</span>
    <span class="token keyword">uint64_t</span>	serial_id<span class="token punctuation">;</span>
	<span class="token comment">///资金账户代码</span>
	<span class="token keyword">char</span>        fund_account<span class="token punctuation">[</span>XTP_ACCOUNT_NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">///资金账户密码</span>
	<span class="token keyword">char</span>	    password<span class="token punctuation">[</span>XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">///金额</span>
	<span class="token keyword">double</span>	    amount<span class="token punctuation">;</span>
	<span class="token comment">///内转类型</span>
	XTP_FUND_TRANSFER_TYPE	transfer_type<span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_FUND_TRANSFER_TYPE是资金流转方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_FUND_TRANSFER_TYPE</span>
<span class="token punctuation">{</span>
    XTP_FUND_TRANSFER_OUT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;转出 从XTP转出到柜台</span>
    XTP_FUND_TRANSFER_IN<span class="token punctuation">,</span>	        <span class="token comment">///&lt;转入 从柜台转入XTP</span>
    XTP_FUND_INTER_TRANSFER_OUT<span class="token punctuation">,</span>    <span class="token comment">///&lt;跨节点转出 从本XTP节点1，转出到对端XTP节点2，XTP服务器之间划拨，只能跨账户用户使用</span>
    XTP_FUND_INTER_TRANSFER_IN<span class="token punctuation">,</span>     <span class="token comment">///&lt;跨节点转入 从对端XTP节点2，转入到本XTP节点1，XTP服务器之间划拨，只能跨账户用户使用</span>
    XTP_FUND_INTER_TRANSFER_REPAY_OUT<span class="token punctuation">,</span> <span class="token comment">///&lt;跨节点转出 融券卖出资金 从本XTP节点1，转出到对端XTP节点2，XTP服务器之间划拨</span>
    XTP_FUND_INTER_TRANSFER_REPAY_IN<span class="token punctuation">,</span> <span class="token comment">///&lt;跨节点转入 融券卖出资金 从对端XTP节点2，转入到本XTP节点1，XTP服务器之间划拨</span>
    XTP_FUND_INTER_TRANSFER_CONTRACT_OUT<span class="token punctuation">,</span> <span class="token comment">///&lt;跨节点转出 授信额度 从本XTP节点1，转出到对端XTP节点2，XTP服务器之间划拨</span>
    XTP_FUND_INTER_TRANSFER_CONTRACT_IN<span class="token punctuation">,</span> <span class="token comment">///&lt;跨节点转入 授信额度 从对端XTP节点2，转入到本XTP节点1，XTP服务器之间划拨</span>
    XTP_FUND_TRANSFER_UNKNOWN		<span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span>XTP_FUND_TRANSFER_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>资金划拨订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示消息发送成功，用户需要记录下返回的serial_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 发送某账户从柜台转入XTP的10000.01资金划拨请求，具体参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPFundTransferReq fund_transfer<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fund_transfer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPFundTransferReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string stdstr_fund_account <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>fund_transfer<span class="token punctuation">.</span>fund_account<span class="token punctuation">,</span> stdstr_fund_account<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_NAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>fund_transfer<span class="token punctuation">.</span>password<span class="token punctuation">,</span> stdstr_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	fund_transfer<span class="token punctuation">.</span>amount <span class="token operator">=</span> <span class="token number">10000.01</span><span class="token punctuation">;</span>
	fund_transfer<span class="token punctuation">.</span>transfer_type <span class="token operator">=</span> XTP_FUND_TRANSFER_IN<span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> serial_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">FundTransfer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fund_transfer<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>serial_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 发送失败，获取失败原因</span>
		XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> m_pTraderApi<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Fund transfer send error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 发送成功返回的serial_id，保证一个交易日内唯一</span>
		<span class="token comment">//TODO:其他逻辑</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnFundTransfer</span><span class="token punctuation">(</span>XTPFundTransferNotice <span class="token operator">*</span>fund_transfer_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_39-queryfundtransfer" tabindex="-1"><a class="header-anchor" href="#_39-queryfundtransfer"><span>39. QueryFundTransfer</span></a></h3><p>请求查询资金划拨。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryFundTransfer</span><span class="token punctuation">(</span>XTPQueryFundTransferLogReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：查询时需要提供的信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///资金内转流水查询请求与响应</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryFundTransferLogReq</span> <span class="token punctuation">{</span>
    <span class="token comment">///资金内转编号</span>
    <span class="token keyword">uint64_t</span>	serial_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询编号为1234567890123456的资金内转记录</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryFundTransferLogReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryFundTransferLogReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 资金内转编号需替换成用户自己的id</span>
	query_param<span class="token punctuation">.</span>serial_id <span class="token operator">=</span> <span class="token number">1234567890123456</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryFundTransfer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryFundTransfer</span><span class="token punctuation">(</span>XTPFundTransferNotice <span class="token operator">*</span>fund_transfer_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_40-queryotherserverfund" tabindex="-1"><a class="header-anchor" href="#_40-queryotherserverfund"><span>40. QueryOtherServerFund</span></a></h3><p>请求查询其他节点可用资金。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOtherServerFund</span><span class="token punctuation">(</span>XTPFundQueryReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：查询时需要提供的信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///用户资金查询请求结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPFundQueryReq</span>
<span class="token punctuation">{</span>
	<span class="token comment">///资金账户代码</span>
	<span class="token keyword">char</span>        fund_account<span class="token punctuation">[</span>XTP_ACCOUNT_NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">///资金账户密码</span>
	<span class="token keyword">char</span>	    password<span class="token punctuation">[</span>XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">///查询类型</span>
	XTP_FUND_QUERY_TYPE	query_type<span class="token punctuation">;</span>
	<span class="token comment">///预留字段，用户无需填写</span>
	<span class="token keyword">uint64_t</span>	unknown<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_FUND_QUERY_TYPE是柜台资金查询类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_FUND_QUERY_TYPE</span>
<span class="token punctuation">{</span>
	XTP_FUND_QUERY_JZ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;查询金证主柜台可转资金</span>
	XTP_FUND_QUERY_INTERNAL<span class="token punctuation">,</span>	<span class="token comment">///&lt;查询一账号两中心设置时，对方节点的资金</span>
	XTP_FUND_QUERY_INTERNAL_REPAY<span class="token punctuation">,</span>	<span class="token comment">///&lt;查询一账号两中心设置时，对方节点的融券卖余额资金 </span>
	XTP_FUND_QUERY_INTERNAL_CONTRACT<span class="token punctuation">,</span> <span class="token comment">///&lt;查询一账号两中心设置时，对方节点的授信额度</span>
	XTP_FUND_QUERY_UNKNOWN		<span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span>XTP_FUND_QUERY_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 用户资金账户的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ACCOUNT_NAME_LEN</span>        <span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">/// 用户资金账户的密码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ACCOUNT_PASSWORD_LEN</span>	<span class="token expression"><span class="token number">64</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某账户在金证主柜台的可转资金，具体参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPFundQueryReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPFundQueryReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>query_type <span class="token operator">=</span> XTP_FUND_QUERY_JZ<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_fund_account <span class="token operator">=</span> <span class="token string">&quot;xxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>fund_account<span class="token punctuation">,</span> stdstr_fund_account<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_NAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>password<span class="token punctuation">,</span> stdstr_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOtherServerFund</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOtherServerFund</span><span class="token punctuation">(</span>XTPFundQueryRsp <span class="token operator">*</span>fund_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_41-queryetf" tabindex="-1"><a class="header-anchor" href="#_41-queryetf"><span>41. QueryETF</span></a></h3><p>请求查询ETF清单文件。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryETF</span><span class="token punctuation">(</span>XTPQueryETFBaseReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的ETF清单文件的筛选条件，其中合约代码可以为空，则默认所有存在的ETF合约代码，market字段也可以为初始值，则默认所有市场的ETF合约</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询股票ETF合约基本情况--请求结构体,</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryETFBaseReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE    market<span class="token punctuation">;</span>
    <span class="token comment">///ETF买卖代码</span>
    <span class="token keyword">char</span>               ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 可以指定ticker，查询单个ETF</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryETFBaseReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryETFBaseReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryETF</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 可以ticker为0,查询全市场</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryETFBaseReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryETFBaseReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryETF</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryETF</span><span class="token punctuation">(</span>XTPQueryETFBaseRsp <span class="token operator">*</span>etf_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_42-queryetftickerbasket" tabindex="-1"><a class="header-anchor" href="#_42-queryetftickerbasket"><span>42. QueryETFTickerBasket</span></a></h3><p>请求查询ETF股票篮。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryETFTickerBasket</span><span class="token punctuation">(</span>XTPQueryETFComponentReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询股票篮的的ETF合约，其中合约代码不可以为空，market字段也必须指定</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询股票ETF合约成分股信息--请求结构体,请求参数为:交易市场+ETF买卖代码</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPQueryETFComponentReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE     market<span class="token punctuation">;</span>
    <span class="token comment">///ETF买卖代码</span>
    <span class="token keyword">char</span>                ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>XTPQueryETFComponentReq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询沪市某支ETF的成分股信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryETFComponentReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryETFComponentReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryETFTickerBasket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryETFBasket</span><span class="token punctuation">(</span>XTPQueryETFComponentRsp <span class="token operator">*</span>etf_component_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_43-queryipoinfolist" tabindex="-1"><a class="header-anchor" href="#_43-queryipoinfolist"><span>43. QueryIPOInfoList</span></a></h3><p>请求查询今日新股申购信息列表。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryIPOInfoList</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询今日新股申购信息列表</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryIPOInfoList</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryIPOInfoList</span><span class="token punctuation">(</span>XTPQueryIPOTickerRsp <span class="token operator">*</span>ipo_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_44-queryipoquotainfo" tabindex="-1"><a class="header-anchor" href="#_44-queryipoquotainfo"><span>44. QueryIPOQuotaInfo</span></a></h3><p>请求查询用户新股申购额度信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryIPOQuotaInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询用户新股申购额度信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryIPOQuotaInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryIPOQuotaInfo</span><span class="token punctuation">(</span>XTPQueryIPOQuotaRsp <span class="token operator">*</span>quota_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_45-querybondipoinfolist" tabindex="-1"><a class="header-anchor" href="#_45-querybondipoinfolist"><span>45. QueryBondIPOInfoList</span></a></h3><p>请求查询今日可转债申购信息列表。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryBondIPOInfoList</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询用户今日可转债申购信息列表</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryBondIPOInfoList</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span>  <span class="token function">OnQueryBondIPOInfoList</span><span class="token punctuation">(</span>XTPQueryIPOTickerRsp <span class="token operator">*</span>ipo_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_46-queryoptionauctioninfo" tabindex="-1"><a class="header-anchor" href="#_46-queryoptionauctioninfo"><span>46. QueryOptionAuctionInfo</span></a></h3><p>请求查询期权合约。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionAuctionInfo</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span>
<span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的期权合约的筛选条件，可以为NULL（为NULL表示查询所有的期权合约）</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权竞价交易业务参考信息--请求结构体,请求参数为:交易市场+8位期权代码</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptionAuctionInfoReq</span> <span class="token punctuation">{</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE     market<span class="token punctuation">;</span>
    <span class="token comment">///8位期权合约代码</span>
    <span class="token keyword">char</span>                ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询深市90000900这份期权合约详情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptionAuctionInfoReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;90000900&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionAuctionInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询深市所有期权合约详情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptionAuctionInfoReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionAuctionInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询所有期权合约详情</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptionAuctionInfoReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionAuctionInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionAuctionInfo</span><span class="token punctuation">(</span>XTPQueryOptionAuctionInfoRsp <span class="token operator">*</span>option_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_47-creditcashrepay" tabindex="-1"><a class="header-anchor" href="#_47-creditcashrepay"><span>47. CreditCashRepay</span></a></h3><p>融资融券业务中现金直接还款请求。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditCashRepay</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Amount：现金还款的金额</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>现金直接还款订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 某信用账户发出10000元现金还款的请求，具体参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CreditCashRepay</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCreditCashRepay</span><span class="token punctuation">(</span>XTPCrdCashRepayRsp <span class="token operator">*</span>cash_repay_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_48-creditcashrepaydebtinterestfee" tabindex="-1"><a class="header-anchor" href="#_48-creditcashrepaydebtinterestfee"><span>48. CreditCashRepayDebtInterestFee</span></a></h3><p>融资融券业务中现金还指定负债合约息费请求。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditCashRepayDebtInterestFee</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debt_id<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>debt_id：指定的负债合约编号</p><p>Amount：现金还息的金额</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>现金还息订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 某信用账户偿还编号为202111111111110000001这份负债合约息费10000元，具体参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CreditCashRepayDebtInterestFee</span><span class="token punctuation">(</span><span class="token string">&quot;202111111111110000001&quot;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCreditCashRepayDebtInterestFee</span><span class="token punctuation">(</span>XTPCrdCashRepayDebtInterestFeeRsp <span class="token operator">*</span>cash_repay_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_49-creditsellstockrepaydebtinterestfee" tabindex="-1"><a class="header-anchor" href="#_49-creditsellstockrepaydebtinterestfee"><span>49. CreditSellStockRepayDebtInterestFee</span></a></h3><p>融资融券业务中卖券还指定负债合约息费请求。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditSellStockRepayDebtInterestFee</span><span class="token punctuation">(</span>XTPOrderInsertInfo<span class="token operator">*</span> order<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debt_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>Order：卖券的报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</p><p>debt_id：指定的负债合约编号</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///新订单请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPOrderInsertInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">///XTP系统订单ID，无需用户填写，在XTP系统中唯一</span>
    <span class="token keyword">uint64_t</span>                order_xtp_id<span class="token punctuation">;</span>
    <span class="token comment">///报单引用，由客户自定义</span>
    <span class="token keyword">uint32_t</span>	            order_client_id<span class="token punctuation">;</span>
    <span class="token comment">///合约代码 客户端请求不带空格，以&#39;\\0&#39;结尾</span>
    <span class="token keyword">char</span>                    ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE         market<span class="token punctuation">;</span>
    <span class="token comment">///价格</span>
    <span class="token keyword">double</span>                  price<span class="token punctuation">;</span>
    <span class="token comment">///止损价（保留字段）</span>
    <span class="token keyword">double</span>                  stop_price<span class="token punctuation">;</span>
    <span class="token comment">///数量(股票单位为股，逆回购单位为张)</span>
    <span class="token keyword">int64_t</span>                 quantity<span class="token punctuation">;</span>
    <span class="token comment">///报单价格</span>
    XTP_PRICE_TYPE          price_type<span class="token punctuation">;</span>
    <span class="token keyword">union</span><span class="token punctuation">{</span>
		<span class="token comment">///32位字段，用来兼容老版本api，用户无需关心</span>
        <span class="token keyword">uint32_t</span>            u32<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token comment">///买卖方向</span>
            XTP_SIDE_TYPE               side<span class="token punctuation">;</span>
            <span class="token comment">///开平标志</span>
            XTP_POSITION_EFFECT_TYPE    position_effect<span class="token punctuation">;</span>
			<span class="token comment">///预留字段1</span>
            <span class="token keyword">uint8_t</span>                     reserved1<span class="token punctuation">;</span>
			<span class="token comment">///预留字段2</span>
			<span class="token keyword">uint8_t</span>                     reserved2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">///业务类型</span>
	XTP_BUSINESS_TYPE       business_type<span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>卖券还息订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 某信用账户报单以123.4元卖出深市某股票100份，偿还编号为202111111111110000001的负债合约的息费</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPOrderInsertInfo order<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOrderInsertInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	order<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_MARGIN<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_REPAY_MARGIN<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>position_effect <span class="token operator">=</span> XTP_POSITION_EFFECT_INIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price_type <span class="token operator">=</span> XTP_PRICE_LIMIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">123.40</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string str_debt_id <span class="token operator">=</span> <span class="token string">&quot;202111111111110000001&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">uint64_t</span> order_xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CreditSellStockRepayDebtInterestFee</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> str_debt_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单完成响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOrderEvent</span><span class="token punctuation">(</span>XTPOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 报单成交响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnTradeEvent</span><span class="token punctuation">(</span>XTPTradeReport <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_50-querycreditcashrepayinfo" tabindex="-1"><a class="header-anchor" href="#_50-querycreditcashrepayinfo"><span>50. QueryCreditCashRepayInfo</span></a></h3><p>请求查询融资融券业务中的现金直接还款报单。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditCashRepayInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询融资融券业务中的现金直接还款报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditCashRepayInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditCashRepayInfo</span><span class="token punctuation">(</span>XTPCrdCashRepayInfo <span class="token operator">*</span>cash_repay_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_51-querycreditfundinfo" tabindex="-1"><a class="header-anchor" href="#_51-querycreditfundinfo"><span>51. QueryCreditFundInfo</span></a></h3><p>请求查询信用账户特有信息，除资金账户以外的信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditFundInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询信用账户特有信息，除资金账户以外的信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditFundInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditFundInfo</span><span class="token punctuation">(</span>XTPCrdFundInfo <span class="token operator">*</span>fund_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_52-querycreditdebtinfo" tabindex="-1"><a class="header-anchor" href="#_52-querycreditdebtinfo"><span>52. QueryCreditDebtInfo</span></a></h3><p>请求查询信用账户负债合约信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditDebtInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询信用账户负债合约信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditDebtInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditDebtInfo</span><span class="token punctuation">(</span>XTPCrdDebtInfo <span class="token operator">*</span>debt_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_53-querycredittickerdebtinfo" tabindex="-1"><a class="header-anchor" href="#_53-querycredittickerdebtinfo"><span>53. QueryCreditTickerDebtInfo</span></a></h3><p>请求查询指定证券负债未还信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditTickerDebtInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdDebtStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的指定证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///融资融券指定证券上的负债未还数量请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPClientQueryCrdDebtStockReq</span>
<span class="token punctuation">{</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>                 <span class="token comment">///&lt; 市场</span>
    <span class="token keyword">char</span>            ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 证券代码</span>
<span class="token punctuation">}</span>XTPClientQueryCrdDebtStockReq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询所有负债未还的证券信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdDebtStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdDebtStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditTickerDebtInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询510500的负债未还信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdDebtStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdDebtStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;510500&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditTickerDebtInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditTickerDebtInfo</span><span class="token punctuation">(</span>XTPCrdDebtStockInfo <span class="token operator">*</span>debt_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_54-querycreditassetdebtinfo" tabindex="-1"><a class="header-anchor" href="#_54-querycreditassetdebtinfo"><span>54. QueryCreditAssetDebtInfo</span></a></h3><p>请求查询信用账户待还资金信息</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditAssetDebtInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询信用账户待还资金信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditAssetDebtInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditAssetDebtInfo</span><span class="token punctuation">(</span><span class="token keyword">double</span> remain_amount<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_55-querycredittickerassigninfo" tabindex="-1"><a class="header-anchor" href="#_55-querycredittickerassigninfo"><span>55. QueryCreditTickerAssignInfo</span></a></h3><p>请求查询信用账户可融券头寸信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditTickerAssignInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的指定证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///融券头寸证券查询请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPClientQueryCrdPositionStockReq</span>
<span class="token punctuation">{</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>                 <span class="token comment">///&lt; 证券市场</span>
    <span class="token keyword">char</span>            ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 证券代码</span>
<span class="token punctuation">}</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询信用账户中所有可融券头寸信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdPositionStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditTickerAssignInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询代码为510500的证券的可融券头寸信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdPositionStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;510500&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditTickerAssignInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditTickerAssignInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStkInfo <span class="token operator">*</span>assign_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_56-querycreditexcessstock" tabindex="-1"><a class="header-anchor" href="#_56-querycreditexcessstock"><span>56. QueryCreditExcessStock</span></a></h3><p>融资融券业务中请求查询指定证券的余券。该方法中用户必须提供了证券代码和所在市场。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的余券信息，不可以为空，需要明确指定</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 信用业务余券查询请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPClientQueryCrdSurplusStkReqInfo</span>
<span class="token punctuation">{</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>                 <span class="token comment">///&lt; 证券市场</span>
    <span class="token keyword">char</span>            ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 证券代码</span>
<span class="token punctuation">}</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询沪市510500的余券信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdSurplusStkReqInfo query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;510500&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditExcessStock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkRspInfo<span class="token operator">*</span> stock_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_57-querymulcreditexcessstock" tabindex="-1"><a class="header-anchor" href="#_57-querymulcreditexcessstock"><span>57. QueryMulCreditExcessStock</span></a></h3><p>融资融券业务中请求查询余券。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryMulCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的余券信息。若填入市场和股票代码，返回单支股票信息；若市场代码为空，股票代码非空，是无效查询，会在SPI中返回错误；若市场和股票代码均为空，返回全市场信息；若市场代码非空，股票代码为空，返回单市场信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 信用业务余券查询请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPClientQueryCrdSurplusStkReqInfo</span>
<span class="token punctuation">{</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>                 <span class="token comment">///&lt; 证券市场</span>
    <span class="token keyword">char</span>            ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 证券代码</span>
<span class="token punctuation">}</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询沪市510500的余券信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdSurplusStkReqInfo query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;510500&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryMulCreditExcessStock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询沪市余券信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdSurplusStkReqInfo query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryMulCreditExcessStock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询全市场余券信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdSurplusStkReqInfo query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkReqInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryMulCreditExcessStock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryMulCreditExcessStock</span><span class="token punctuation">(</span>XTPClientQueryCrdSurplusStkRspInfo<span class="token operator">*</span> stock_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_58-creditextenddebtdate" tabindex="-1"><a class="header-anchor" href="#_58-creditextenddebtdate"><span>58. CreditExtendDebtDate</span></a></h3><p>融资融券业务中请求负债合约展期。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CreditExtendDebtDate</span><span class="token punctuation">(</span>XTPCreditDebtExtendReq <span class="token operator">*</span>debt_extend<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>debt_extend：负债合约展期的请求信息</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///用户展期请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPCreditDebtExtendReq</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span>	xtpid<span class="token punctuation">;</span>								<span class="token comment">///&lt;xtpid</span>
	<span class="token keyword">char</span>		debt_id<span class="token punctuation">[</span>XTP_CREDIT_DEBT_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">///&lt;负债合约编号</span>
	<span class="token keyword">uint32_t</span>	defer_days<span class="token punctuation">;</span>							<span class="token comment">///&lt;展期天数</span>
	<span class="token keyword">char</span>        fund_account<span class="token punctuation">[</span>XTP_ACCOUNT_NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">///&lt;资金账号</span>
	<span class="token keyword">char</span>	    password<span class="token punctuation">[</span>XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">///&lt;资金账号密码</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 信用业务合约负债编号长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_CREDIT_DEBT_ID_LEN</span> 		<span class="token expression"><span class="token number">33</span></span></span>
<span class="token comment">/// 用户资金账户的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ACCOUNT_NAME_LEN</span> 		<span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">///用户资金账户的密码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_ACCOUNT_PASSWORD_LEN</span> 	<span class="token expression"><span class="token number">64</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>负债合约展期订单在XTP系统中的ID,如果为‘0’表示消息发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示消息发送成功，用户需要记录下返回的xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 某信用账户请求对202111111111110000001这份负债合约展期</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPCreditDebtExtendReq debt_extend<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>debt_extend<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPCreditDebtExtendReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	debt_extend<span class="token punctuation">.</span>defer_days <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_debt_id <span class="token operator">=</span> <span class="token string">&quot;202111111111110000001&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_fund_account <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>debt_extend<span class="token punctuation">.</span>debt_id<span class="token punctuation">,</span> stdstr_debt_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_CREDIT_DEBT_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>debt_extend<span class="token punctuation">.</span>fund_account<span class="token punctuation">,</span> stdstr_fund_account<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_NAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>debt_extend<span class="token punctuation">.</span>password<span class="token punctuation">,</span> stdstr_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_ACCOUNT_PASSWORD_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CreditExtendDebtDate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>debt_extend<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCreditExtendDebtDate</span><span class="token punctuation">(</span>XTPCreditDebtExtendNotice <span class="token operator">*</span>debt_extend_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_59-querycreditextenddebtdateorders" tabindex="-1"><a class="header-anchor" href="#_59-querycreditextenddebtdateorders"><span>59. QueryCreditExtendDebtDateOrders</span></a></h3><p>融资融券业务中请求查询负债合约展期。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditExtendDebtDateOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span>
session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.参数</p><p>xtp_id：需要查询的负债合约展期订单筛选条件，xtp_id可以为0，则默认所有负债合约展期订单，如果不为0，则请求特定的负债合约展期订单</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询编号为1234567890123456789的负债合约展期订单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditExtendDebtDateOrders</span><span class="token punctuation">(</span><span class="token number">1234567890123456789</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询所有负债合约展期订单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditExtendDebtDateOrders</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditExtendDebtDateOrders</span><span class="token punctuation">(</span>XTPCreditDebtExtendNotice <span class="token operator">*</span>debt_extend_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_60-querycreditfundextrainfo" tabindex="-1"><a class="header-anchor" href="#_60-querycreditfundextrainfo"><span>60. QueryCreditFundExtraInfo</span></a></h3><p>请求查询融资融券业务中账戶的附加信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditFundExtraInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询融资融券业务中账戶的附加信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditFundExtraInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditFundExtraInfo</span><span class="token punctuation">(</span>XTPCrdFundExtraInfo <span class="token operator">*</span>fund_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_61-querycreditpositionextrainfo" tabindex="-1"><a class="header-anchor" href="#_61-querycreditpositionextrainfo"><span>61. QueryCreditPositionExtraInfo</span></a></h3><p>请求查询融资融券业务中账戶指定证券的附加信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryCreditPositionExtraInfo</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要指定的证券，筛选条件中ticker可以全填0，如果不为0，请不带空格，并以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///融券头寸证券查询请求结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPClientQueryCrdPositionStockReq</span>
<span class="token punctuation">{</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>                 <span class="token comment">///&lt; 证券市场</span>
    <span class="token keyword">char</span>            ticker<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 证券代码</span>
<span class="token punctuation">}</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询融资融券业务中所有证券的附加信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdPositionStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditPositionExtraInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询证券510500的附加信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPClientQueryCrdPositionStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPClientQueryCrdPositionStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;510500&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> res <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryCreditPositionExtraInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryCreditPositionExtraInfo</span><span class="token punctuation">(</span>XTPCrdPositionExtraInfo <span class="token operator">*</span>fund_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_62-insertoptioncombinedorder" tabindex="-1"><a class="header-anchor" href="#_62-insertoptioncombinedorder"><span>62. InsertOptionCombinedOrder</span></a></h3><p>期权组合策略报单录入请求。</p><p>交易所接收订单后，会在报单响应函数OnOptionCombinedOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOptionCombinedOrder</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order：报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOptionCombinedOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单。当然，如果你什么都不填，也是可以的。order.order_xtp_id字段无需用户填写，order.ticker必须不带空格，以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略新订单请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPOptCombOrderInsertInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">///XTP系统订单ID，无需用户填写，在XTP系统中唯一</span>
    <span class="token keyword">uint64_t</span>                order_xtp_id<span class="token punctuation">;</span>
    <span class="token comment">///报单引用，由客户自定义</span>
    <span class="token keyword">uint32_t</span>	            order_client_id<span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE         market<span class="token punctuation">;</span>
    <span class="token comment">///数量(单位为份)</span>
    <span class="token keyword">int64_t</span>                 quantity<span class="token punctuation">;</span>

    <span class="token comment">///组合方向</span>
    XTP_SIDE_TYPE           side<span class="token punctuation">;</span>

    <span class="token comment">///业务类型</span>
    XTP_BUSINESS_TYPE       business_type<span class="token punctuation">;</span>

    <span class="token comment">///期权组合策略信息</span>
    XTPOptCombPlugin        opt_comb_info<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_SIDE_TYPE是买卖方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_SIDE_TYPE<span class="token punctuation">;</span>

<span class="token comment">///买（新股申购，ETF买，配股，信用交易中担保品买）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_BUY</span>            <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">///卖（逆回购，ETF卖，信用交易中担保品卖）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SELL</span>           <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">///申购</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_PURCHASE</span>       <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">///赎回</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REDEMPTION</span>     <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">///拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SPLIT</span>          <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">///合并</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MERGE</span>          <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">///改版之后的side的备兑，暂不支持</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_COVER</span>          <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">///改版之后的side锁定（对应开平标识为开）/解锁（对应开平标识为平）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_FREEZE</span>         <span class="token expression"><span class="token number">12</span></span></span>
<span class="token comment">/// 融资买入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MARGIN_TRADE</span>	<span class="token expression"><span class="token number">21</span></span></span>
<span class="token comment">/// 融券卖出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SHORT_SELL</span>		<span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">/// 卖券还款</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_MARGIN</span>	<span class="token expression"><span class="token number">23</span></span></span>
<span class="token comment">/// 买券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_STOCK</span>	<span class="token expression"><span class="token number">24</span></span></span>
<span class="token comment">/// 现金还款（不放在普通订单协议，另加请求和查询协议）</span>
<span class="token comment">//#define XTP_SIDE_CASH_REPAY_MARGIN	25</span>
<span class="token comment">/// 现券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_STOCK_REPAY_STOCK</span>	<span class="token expression"><span class="token number">26</span></span></span>
<span class="token comment">/// 余券划转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SURSTK_TRANS</span>       <span class="token expression"><span class="token number">27</span></span></span>
<span class="token comment">/// 担保品转入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSIN</span>     <span class="token expression"><span class="token number">28</span></span></span>
<span class="token comment">/// 担保品转出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSOUT</span>    <span class="token expression"><span class="token number">29</span></span></span>

<span class="token comment">///组合策略的组合</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_COMBINE</span>        <span class="token expression"><span class="token number">31</span> </span></span>
<span class="token comment">///组合策略的拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT</span>          <span class="token expression"><span class="token number">32</span> </span></span>
<span class="token comment">///组合策略的管理员强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE</span>    <span class="token expression"><span class="token number">33</span> </span></span>
<span class="token comment">///组合策略的交易所强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE_EXCH</span>    <span class="token expression"><span class="token number">34</span></span></span>

<span class="token comment">///未知或者无效买卖方向</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_UNKNOWN</span>        <span class="token expression"><span class="token number">50</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_BUSINESS_TYPE证券业务类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_BUSINESS_TYPE</span>
<span class="token punctuation">{</span>
	XTP_BUSINESS_TYPE_CASH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">///&lt;普通股票业务（股票买卖，ETF买卖，沪市交易型货币基金等）</span>
	XTP_BUSINESS_TYPE_IPOS<span class="token punctuation">,</span>                <span class="token comment">///&lt;新股申购业务（对应的price type需选择限价类型）</span>
	XTP_BUSINESS_TYPE_REPO<span class="token punctuation">,</span>                <span class="token comment">///&lt;回购业务（国债逆回购业务对应的price type填为限价，side填为卖）</span>
	XTP_BUSINESS_TYPE_ETF<span class="token punctuation">,</span>                 <span class="token comment">///&lt;ETF申赎业务</span>
	XTP_BUSINESS_TYPE_MARGIN<span class="token punctuation">,</span>              <span class="token comment">///&lt;融资融券业务</span>
	XTP_BUSINESS_TYPE_DESIGNATION<span class="token punctuation">,</span>         <span class="token comment">///&lt;转托管（未支持）</span>
	XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">,</span>		   <span class="token comment">///&lt;配股业务（对应的price type需选择限价类型,side填为买）</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金申赎业务</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金拆分合并业务</span>
	XTP_BUSINESS_TYPE_MONEY_FUND<span class="token punctuation">,</span>		   <span class="token comment">///&lt;货币基金申赎业务（暂未支持，沪市交易型货币基金的买卖请使用普通股票业务）</span>
    XTP_BUSINESS_TYPE_OPTION<span class="token punctuation">,</span>              <span class="token comment">///&lt;期权业务</span>
    XTP_BUSINESS_TYPE_EXECUTE<span class="token punctuation">,</span>             <span class="token comment">///&lt;行权</span>
    XTP_BUSINESS_TYPE_FREEZE<span class="token punctuation">,</span>              <span class="token comment">///&lt;锁定解锁，暂不支持</span>
    XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">,</span>      <span class="token comment">///&lt;期权组合策略 组合和拆分业务</span>
    XTP_BUSINESS_TYPE_EXECUTE_COMBINE<span class="token punctuation">,</span>     <span class="token comment">///&lt;期权行权合并业务</span>
	XTP_BUSINESS_TYPE_BOND_SWAP_STOCK<span class="token punctuation">,</span>     <span class="token comment">///&lt;债转股业务</span>
    XTP_BUSINESS_TYPE_UNKNOWN<span class="token punctuation">,</span>             <span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span> XTP_BUSINESS_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略报单附加信息结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPOptCombPlugin</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span>                                strategy_id<span class="token punctuation">[</span>XTP_STRATEGY_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">///&lt; 组合策略代码，比如CNSJC认购牛市价差策略等。合并行权时，此字段可为空</span>
    <span class="token keyword">char</span>                                comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">///&lt; 组合编码，组合申报时，该字段为空；拆分申报时，填写拟拆分组合的组合编码。</span>
    <span class="token keyword">int32_t</span>                             num_legs<span class="token punctuation">;</span>                                       <span class="token comment">///&lt; 成分合约数</span>
    XTPOptCombLegInfo                   leg_detail<span class="token punctuation">[</span>XTP_STRATEGE_LEG_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">///&lt; 成分合约数组，最多四条腿。</span>
<span class="token punctuation">}</span>XTPOptCombPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 组合策略腿合约信息结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPOptCombLegInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span>                            leg_security_id<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 成分合约代码</span>
    XTP_OPT_CALL_OR_PUT_TYPE        leg_cntr_type<span class="token punctuation">;</span>                   <span class="token comment">///&lt; 合约类型，认沽或认购。</span>
    XTP_POSITION_DIRECTION_TYPE     leg_side<span class="token punctuation">;</span>                        <span class="token comment">///&lt; 持仓方向，权利方或义务方。</span>
    XTP_OPT_COVERED_OR_UNCOVERED    leg_covered<span class="token punctuation">;</span>                     <span class="token comment">///&lt; 备兑标签</span>
    <span class="token keyword">int32_t</span>                         leg_qty<span class="token punctuation">;</span>                         <span class="token comment">///&lt; 成分合约数量（张）</span>
<span class="token punctuation">}</span>XTPOptCombLegInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_OPT_CALL_OR_PUT_TYPE是一个认沽或认购类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_OPT_CALL_OR_PUT_TYPE</span> <span class="token punctuation">{</span>
	XTP_OPT_CALL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	    <span class="token comment">///&lt;认购</span>
	XTP_OPT_PUT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;认沽</span>
<span class="token punctuation">}</span>XTP_OPT_CALL_OR_PUT_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_POSITION_DIRECTION_TYPE是一个持仓方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_POSITION_DIRECTION_TYPE</span> <span class="token punctuation">{</span>
	XTP_POSITION_DIRECTION_NET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>	    <span class="token comment">///&lt;净</span>
	XTP_POSITION_DIRECTION_LONG<span class="token punctuation">,</span>		<span class="token comment">///&lt;多（期权则为权利方）</span>
    XTP_POSITION_DIRECTION_SHORT<span class="token punctuation">,</span>       <span class="token comment">///&lt;空（期权则为义务方）</span>
    XTP_POSITION_DIRECTION_COVERED<span class="token punctuation">,</span>     <span class="token comment">///&lt;备兑（期权则为备兑义务方）</span>
<span class="token punctuation">}</span>XTP_POSITION_DIRECTION_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_OPT_COVERED_OR_UNCOVERED是否备兑的标签</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_OPT_COVERED_OR_UNCOVERED</span> <span class="token punctuation">{</span>
    XTP_POSITION_UNCOVERED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment">///&lt;非备兑</span>
    XTP_POSITION_COVERED<span class="token punctuation">,</span>           <span class="token comment">///&lt;备兑</span>
<span class="token punctuation">}</span>XTP_OPT_COVERED_OR_UNCOVERED<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">/// 期权组合策略最多腿数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_STRATEGE_LEG_NUM</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token comment">/// 期权组合策略代码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_STRATEGY_ID_LEN</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">/// 期权组合策略组合编码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SECONDARY_ORDER_ID_LEN</span> <span class="token expression"><span class="token number">18</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示报单发送成功，用户需要记录下返回的order_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 按CNSJC策略对深市某组合中的100份进行拆分</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 期权组合策略报单附加信息结构体初始化</span>
	XTPOptCombPlugin plugin_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>plugin_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOptCombPlugin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string std_str_strategy_id <span class="token operator">=</span> <span class="token string">&quot;CNSJC&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>plugin_param<span class="token punctuation">.</span>strategy_id<span class="token punctuation">,</span> std_str_strategy_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_STRATEGY_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 需要拆分的组合编码</span>
	std<span class="token double-colon punctuation">::</span>string std_str_comb_num <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>plugin_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> std_str_comb_num<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 期权组合策略报单结构体初始化</span>
	XTPOptCombOrderInsertInfo order<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	order<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_OPT_SPLIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>opt_comb_info <span class="token operator">=</span> plugin_param<span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOptionCombinedOrder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单完成响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOptionCombinedOrderEvent</span><span class="token punctuation">(</span>XTPOptCombOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 报单成交响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOptionCombinedTradeEvent</span><span class="token punctuation">(</span>XTPOptCombTradeReport <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_63-insertoptioncombinedorderextra" tabindex="-1"><a class="header-anchor" href="#_63-insertoptioncombinedorderextra"><span>63. InsertOptionCombinedOrderExtra</span></a></h3><p>已经提前设置order_xtp_id的期权组合策略报单录入请求，与GetANewOrderXTPID()配合使用。</p><p>使用设置好的order_xtp_id（通过GetANewOrderXTPID()获得）进行报单，注意此处如果order_xtp_id设置不对，将导致报单失败。交易所接收订单后，会在报单响应函数OnOptionCombinedOrderEvent()中返回报单未成交的状态，之后所有的订单状态改变（除了部成状态）都会通过报单响应函数返回。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">InsertOptionCombinedOrderExtra</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo <span class="token operator">*</span>order<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order：报单录入信息，其中order.order_client_id字段是用户自定义字段，用户输入什么值，订单响应OnOptionCombinedOrderEvent()返回时就会带回什么值，类似于备注，方便用户自己定位订单，也可以什么都不填。order.order_xtp_id字段必须是通过GetANewOrderXTPID()获得的值，order.ticker必须不带空格，以&#39;\\0&#39;结尾</p><p>session_id：资金账户对应的session_id,登录时得到</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略新订单请求</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPOptCombOrderInsertInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">///XTP系统订单ID，无需用户填写，在XTP系统中唯一</span>
    <span class="token keyword">uint64_t</span>                order_xtp_id<span class="token punctuation">;</span>
    <span class="token comment">///报单引用，由客户自定义</span>
    <span class="token keyword">uint32_t</span>	            order_client_id<span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE         market<span class="token punctuation">;</span>
    <span class="token comment">///数量(单位为份)</span>
    <span class="token keyword">int64_t</span>                 quantity<span class="token punctuation">;</span>

    <span class="token comment">///组合方向</span>
    XTP_SIDE_TYPE           side<span class="token punctuation">;</span>

    <span class="token comment">///业务类型</span>
    XTP_BUSINESS_TYPE       business_type<span class="token punctuation">;</span>

    <span class="token comment">///期权组合策略信息</span>
    XTPOptCombPlugin        opt_comb_info<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_SIDE_TYPE是买卖方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">uint8_t</span> XTP_SIDE_TYPE<span class="token punctuation">;</span>

<span class="token comment">///买（新股申购，ETF买，配股，信用交易中担保品买）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_BUY</span>            <span class="token expression"><span class="token number">1</span></span></span>
<span class="token comment">///卖（逆回购，ETF卖，信用交易中担保品卖）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SELL</span>           <span class="token expression"><span class="token number">2</span></span></span>
<span class="token comment">///申购</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_PURCHASE</span>       <span class="token expression"><span class="token number">7</span></span></span>
<span class="token comment">///赎回</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REDEMPTION</span>     <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">///拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SPLIT</span>          <span class="token expression"><span class="token number">9</span></span></span>
<span class="token comment">///合并</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MERGE</span>          <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">///改版之后的side的备兑，暂不支持</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_COVER</span>          <span class="token expression"><span class="token number">11</span></span></span>
<span class="token comment">///改版之后的side锁定（对应开平标识为开）/解锁（对应开平标识为平）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_FREEZE</span>         <span class="token expression"><span class="token number">12</span></span></span>
<span class="token comment">/// 融资买入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_MARGIN_TRADE</span>	<span class="token expression"><span class="token number">21</span></span></span>
<span class="token comment">/// 融券卖出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SHORT_SELL</span>		<span class="token expression"><span class="token number">22</span></span></span>
<span class="token comment">/// 卖券还款</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_MARGIN</span>	<span class="token expression"><span class="token number">23</span></span></span>
<span class="token comment">/// 买券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_REPAY_STOCK</span>	<span class="token expression"><span class="token number">24</span></span></span>
<span class="token comment">/// 现金还款（不放在普通订单协议，另加请求和查询协议）</span>
<span class="token comment">//#define XTP_SIDE_CASH_REPAY_MARGIN	25</span>
<span class="token comment">/// 现券还券</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_STOCK_REPAY_STOCK</span>	<span class="token expression"><span class="token number">26</span></span></span>
<span class="token comment">/// 余券划转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_SURSTK_TRANS</span>       <span class="token expression"><span class="token number">27</span></span></span>
<span class="token comment">/// 担保品转入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSIN</span>     <span class="token expression"><span class="token number">28</span></span></span>
<span class="token comment">/// 担保品转出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_GRTSTK_TRANSOUT</span>    <span class="token expression"><span class="token number">29</span></span></span>

<span class="token comment">///组合策略的组合</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_COMBINE</span>        <span class="token expression"><span class="token number">31</span> </span></span>
<span class="token comment">///组合策略的拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT</span>          <span class="token expression"><span class="token number">32</span> </span></span>
<span class="token comment">///组合策略的管理员强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE</span>    <span class="token expression"><span class="token number">33</span> </span></span>
<span class="token comment">///组合策略的交易所强制拆分</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_OPT_SPLIT_FORCE_EXCH</span>    <span class="token expression"><span class="token number">34</span></span></span>

<span class="token comment">///未知或者无效买卖方向</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SIDE_UNKNOWN</span>        <span class="token expression"><span class="token number">50</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_BUSINESS_TYPE证券业务类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_BUSINESS_TYPE</span>
<span class="token punctuation">{</span>
	XTP_BUSINESS_TYPE_CASH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token comment">///&lt;普通股票业务（股票买卖，ETF买卖，沪市交易型货币基金等）</span>
	XTP_BUSINESS_TYPE_IPOS<span class="token punctuation">,</span>                <span class="token comment">///&lt;新股申购业务（对应的price type需选择限价类型）</span>
	XTP_BUSINESS_TYPE_REPO<span class="token punctuation">,</span>                <span class="token comment">///&lt;回购业务（国债逆回购业务对应的price type填为限价，side填为卖）</span>
	XTP_BUSINESS_TYPE_ETF<span class="token punctuation">,</span>                 <span class="token comment">///&lt;ETF申赎业务</span>
	XTP_BUSINESS_TYPE_MARGIN<span class="token punctuation">,</span>              <span class="token comment">///&lt;融资融券业务</span>
	XTP_BUSINESS_TYPE_DESIGNATION<span class="token punctuation">,</span>         <span class="token comment">///&lt;转托管（未支持）</span>
	XTP_BUSINESS_TYPE_ALLOTMENT<span class="token punctuation">,</span>		   <span class="token comment">///&lt;配股业务（对应的price type需选择限价类型,side填为买）</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金申赎业务</span>
	XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE<span class="token punctuation">,</span>	   <span class="token comment">///&lt;分级基金拆分合并业务</span>
	XTP_BUSINESS_TYPE_MONEY_FUND<span class="token punctuation">,</span>		   <span class="token comment">///&lt;货币基金申赎业务（暂未支持，沪市交易型货币基金的买卖请使用普通股票业务）</span>
    XTP_BUSINESS_TYPE_OPTION<span class="token punctuation">,</span>              <span class="token comment">///&lt;期权业务</span>
    XTP_BUSINESS_TYPE_EXECUTE<span class="token punctuation">,</span>             <span class="token comment">///&lt;行权</span>
    XTP_BUSINESS_TYPE_FREEZE<span class="token punctuation">,</span>              <span class="token comment">///&lt;锁定解锁，暂不支持</span>
    XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">,</span>      <span class="token comment">///&lt;期权组合策略 组合和拆分业务</span>
    XTP_BUSINESS_TYPE_EXECUTE_COMBINE<span class="token punctuation">,</span>     <span class="token comment">///&lt;期权行权合并业务</span>
	XTP_BUSINESS_TYPE_BOND_SWAP_STOCK<span class="token punctuation">,</span>     <span class="token comment">///&lt;债转股业务</span>
    XTP_BUSINESS_TYPE_UNKNOWN<span class="token punctuation">,</span>             <span class="token comment">///&lt;未知类型</span>
<span class="token punctuation">}</span> XTP_BUSINESS_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略报单附加信息结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPOptCombPlugin</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span>                                strategy_id<span class="token punctuation">[</span>XTP_STRATEGY_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">///&lt; 组合策略代码，比如CNSJC认购牛市价差策略等。合并行权时，此字段可为空</span>
    <span class="token keyword">char</span>                                comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">///&lt; 组合编码，组合申报时，该字段为空；拆分申报时，填写拟拆分组合的组合编码。</span>
    <span class="token keyword">int32_t</span>                             num_legs<span class="token punctuation">;</span>                                       <span class="token comment">///&lt; 成分合约数</span>
    XTPOptCombLegInfo                   leg_detail<span class="token punctuation">[</span>XTP_STRATEGE_LEG_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">///&lt; 成分合约数组，最多四条腿。</span>
<span class="token punctuation">}</span>XTPOptCombPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 组合策略腿合约信息结构体</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">XTPOptCombLegInfo</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span>                            leg_security_id<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">///&lt; 成分合约代码</span>
    XTP_OPT_CALL_OR_PUT_TYPE        leg_cntr_type<span class="token punctuation">;</span>                   <span class="token comment">///&lt; 合约类型，认沽或认购。</span>
    XTP_POSITION_DIRECTION_TYPE     leg_side<span class="token punctuation">;</span>                        <span class="token comment">///&lt; 持仓方向，权利方或义务方。</span>
    XTP_OPT_COVERED_OR_UNCOVERED    leg_covered<span class="token punctuation">;</span>                     <span class="token comment">///&lt; 备兑标签</span>
    <span class="token keyword">int32_t</span>                         leg_qty<span class="token punctuation">;</span>                         <span class="token comment">///&lt; 成分合约数量（张）</span>
<span class="token punctuation">}</span>XTPOptCombLegInfo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_OPT_CALL_OR_PUT_TYPE是一个认沽或认购类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_OPT_CALL_OR_PUT_TYPE</span> <span class="token punctuation">{</span>
	XTP_OPT_CALL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	    <span class="token comment">///&lt;认购</span>
	XTP_OPT_PUT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>		<span class="token comment">///&lt;认沽</span>
<span class="token punctuation">}</span>XTP_OPT_CALL_OR_PUT_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_POSITION_DIRECTION_TYPE是一个持仓方向类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_POSITION_DIRECTION_TYPE</span> <span class="token punctuation">{</span>
	XTP_POSITION_DIRECTION_NET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>	    <span class="token comment">///&lt;净</span>
	XTP_POSITION_DIRECTION_LONG<span class="token punctuation">,</span>		<span class="token comment">///&lt;多（期权则为权利方）</span>
    XTP_POSITION_DIRECTION_SHORT<span class="token punctuation">,</span>       <span class="token comment">///&lt;空（期权则为义务方）</span>
    XTP_POSITION_DIRECTION_COVERED<span class="token punctuation">,</span>     <span class="token comment">///&lt;备兑（期权则为备兑义务方）</span>
<span class="token punctuation">}</span>XTP_POSITION_DIRECTION_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_OPT_COVERED_OR_UNCOVERED是否备兑的标签</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_OPT_COVERED_OR_UNCOVERED</span> <span class="token punctuation">{</span>
    XTP_POSITION_UNCOVERED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment">///&lt;非备兑</span>
    XTP_POSITION_COVERED<span class="token punctuation">,</span>           <span class="token comment">///&lt;备兑</span>
<span class="token punctuation">}</span>XTP_OPT_COVERED_OR_UNCOVERED<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
<span class="token comment">/// 期权组合策略最多腿数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_STRATEGE_LEG_NUM</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token comment">/// 期权组合策略代码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_STRATEGY_ID_LEN</span> <span class="token expression"><span class="token number">10</span></span></span>
<span class="token comment">/// 期权组合策略组合编码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SECONDARY_ORDER_ID_LEN</span> <span class="token expression"><span class="token number">18</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>报单在XTP系统中的ID,如果为‘0’表示报单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示报单发送成功，此时等同与传入的order_xtp_id。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 按CNSJC策略对深市某组合中的100份进行拆分</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> new_xtp_id <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetANewOrderXTPID</span><span class="token punctuation">(</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 期权组合策略报单附加信息结构体初始化</span>
	XTPOptCombPlugin plugin_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>plugin_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOptCombPlugin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string std_str_strategy_id <span class="token operator">=</span> <span class="token string">&quot;CNSJC&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>plugin_param<span class="token punctuation">.</span>strategy_id<span class="token punctuation">,</span> std_str_strategy_id<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_STRATEGY_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 需要拆分的组合编码</span>
	std<span class="token double-colon punctuation">::</span>string std_str_comb_num <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>plugin_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> std_str_comb_num<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 期权组合策略报单结构体初始化</span>
	XTPOptCombOrderInsertInfo order<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPOptCombOrderInsertInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	order<span class="token punctuation">.</span>order_xtp_id <span class="token operator">=</span> new_xtp_id<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>business_type <span class="token operator">=</span> XTP_BUSINESS_TYPE_OPTION_COMBINE<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>side <span class="token operator">=</span> XTP_SIDE_OPT_SPLIT<span class="token punctuation">;</span>
	order<span class="token punctuation">.</span>opt_comb_info <span class="token operator">=</span> plugin_param<span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertOptionCombinedOrderExtra</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">,</span>session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> new_xtp_id<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 组合策略报单发送成功</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单完成响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOptionCombinedOrderEvent</span><span class="token punctuation">(</span>XTPOptCombOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 报单成交响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOptionCombinedTradeEvent</span><span class="token punctuation">(</span>XTPOptCombTradeReport <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_64-canceloptioncombinedorder" tabindex="-1"><a class="header-anchor" href="#_64-canceloptioncombinedorder"><span>64. CancelOptionCombinedOrder</span></a></h3><p>期权组合策略报单撤单请求。</p><p>如果撤单成功，会在报单响应函数OnOptionCombinedOrderEvent()里返回原单部撤或者全撤的消息，如果不成功，会在OnCancelOrderError()响应函数中返回错误原因。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">CancelOptionCombinedOrder</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要撤销的期权组合策略委托单在XTP系统中的ID</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>撤单在XTP系统中的ID,如果为‘0’表示撤单发送失败，此时用户可以调用GetApiLastError()来获取错误代码，非&quot;0&quot;表示撤单发送成功，用户需要记录下返回的order_cancel_xtp_id，它保证一个交易日内唯一，不同的交易日不保证唯一性。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 期权组合策略报单撤单请求</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CancelOptionCombinedOrder</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 撤单完成响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnOptionCombinedOrderEvent</span><span class="token punctuation">(</span>XTPOptCombOrderInfo <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 撤单失败响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCancelOptionCombinedOrderError</span><span class="token punctuation">(</span>XTPOptCombOrderCancelInfo <span class="token operator">*</span>cancel_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_65-queryoptioncombinedunfinishedorders" tabindex="-1"><a class="header-anchor" href="#_65-queryoptioncombinedunfinishedorders"><span>65. QueryOptionCombinedUnfinishedOrders</span></a></h3><p>请求查询期权组合策略未完结报单-旧版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedUnfinishedOrders</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询期权组合策略未完结报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedUnfinishedOrders</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span>request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrders</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_66-queryoptioncombinedorderbyxtpid" tabindex="-1"><a class="header-anchor" href="#_66-queryoptioncombinedorderbyxtpid"><span>66. QueryOptionCombinedOrderByXTPID</span></a></h3><p>根据报单ID请求查询期权组合策略报单-旧版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrderByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据报单ID请求查询期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrderByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrders</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_67-queryoptioncombinedorders" tabindex="-1"><a class="header-anchor" href="#_67-queryoptioncombinedorders"><span>67. QueryOptionCombinedOrders</span></a></h3><p>请求查询期权组合策略报单-旧版本接口。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrders</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略报单查询请求-条件查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombOrderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///组合编码（流水号），可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 期权组合策略组合编码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SECONDARY_ORDER_ID_LEN</span> <span class="token expression"><span class="token number">18</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在当前交易日0点至当前时间点的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在21年8月1日0时至15时的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20210801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20210801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrders</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrders</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_68-queryoptioncombinedordersbypage" tabindex="-1"><a class="header-anchor" href="#_68-queryoptioncombinedordersbypage"><span>68. QueryOptionCombinedOrdersByPage</span></a></h3><p>分页请求查询期权组合策略报单-旧版本接口。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权组合策略订单请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombOrderByPageReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///需要查询的订单条数</span>
    <span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
    <span class="token comment">///上一次收到的查询订单结果中带回来的索引，如果是从头查询，请置0</span>
    <span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
    <span class="token comment">///保留字段</span>
    <span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询50条期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombOrderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombOrderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrdersByPage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrdersByPage</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> order_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_69-queryoptioncombinedunfinishedordersex" tabindex="-1"><a class="header-anchor" href="#_69-queryoptioncombinedunfinishedordersex"><span>69. QueryOptionCombinedUnfinishedOrdersEx</span></a></h3><p>请求查询期权组合策略未完结报单-新版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedUnfinishedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询期权组合策略未完结报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedUnfinishedOrders</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span>request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_70-queryoptioncombinedorderbyxtpidex" tabindex="-1"><a class="header-anchor" href="#_70-queryoptioncombinedorderbyxtpidex"><span>70. QueryOptionCombinedOrderByXTPIDEx</span></a></h3><p>根据报单ID请求查询期权组合策略报单-新版本接口。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrderByXTPIDEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的报单在xtp系统中的ID，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据报单ID请求查询期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrderByXTPIDEx</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span>XTPQueryOptCombOrderRsp <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_71-queryoptioncombinedordersex" tabindex="-1"><a class="header-anchor" href="#_71-queryoptioncombinedordersex"><span>71. QueryOptionCombinedOrdersEx</span></a></h3><p>请求查询期权组合策略报单-新版本接口。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有报单，否则查询时间段内所有跟股票代码相关的报单，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的订单相关筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///期权组合策略报单查询请求-条件查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombOrderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///组合编码（流水号），可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span>
    <span class="token comment">///格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 期权组合策略组合编码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SECONDARY_ORDER_ID_LEN</span> <span class="token expression"><span class="token number">18</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在当前交易日0点至当前时间点的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在21年8月1日0时至15时的全部报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOrderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOrderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20210801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20210801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrdersEx</span><span class="token punctuation">(</span>XTPOptCombOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_72-queryoptioncombinedordersbypageex" tabindex="-1"><a class="header-anchor" href="#_72-queryoptioncombinedordersbypageex"><span>72. QueryOptionCombinedOrdersByPageEx</span></a></h3><p>分页请求查询期权组合策略报单-新版本接口。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedOrdersByPageEx</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombOrderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询订单的条件，如果第一次查询，那么query_param.reference填0</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权组合策略订单请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombOrderByPageReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///需要查询的订单条数</span>
    <span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
    <span class="token comment">///上一次收到的查询订单结果中带回来的索引，如果是从头查询，请置0</span>
    <span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
    <span class="token comment">///保留字段</span>
    <span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询50条期权组合策略报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombOrderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombOrderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedOrdersByPageEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedOrdersByPageEx</span><span class="token punctuation">(</span>XTPOptCombOrderInfoEx <span class="token operator">*</span>order_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> order_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_73-queryoptioncombinedtradesbyxtpid" tabindex="-1"><a class="header-anchor" href="#_73-queryoptioncombinedtradesbyxtpid"><span>73. QueryOptionCombinedTradesByXTPID</span></a></h3><p>根据期权组合策略委托编号请求查询相关成交。此函数查询出的结果可能对应多个查询结果响应。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTradesByXTPID</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：需要查询的委托编号，即InsertOrder()成功时返回的order_xtp_id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据期权组合策略委托编号请求查询相关成交</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedTradesByXTPID</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedTrades</span><span class="token punctuation">(</span>XTPQueryOptCombTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_74-queryoptioncombinedtrades" tabindex="-1"><a class="header-anchor" href="#_74-queryoptioncombinedtrades"><span>74. QueryOptionCombinedTrades</span></a></h3><p>请求查询期权组合策略的成交回报。</p><p>该方法支持分时段查询，如果股票代码为空，则默认查询时间段内的所有成交回报，否则查询时间段内所有跟股票代码相关的成交回报，此函数查询出的结果可能对应多个查询结果响应。此函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTrades</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombTraderReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的成交回报筛选条件，其中合约代码可以为空，则默认所有存在的合约代码，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，其中起始时间格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点，结束时间格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权组合策略成交回报请求-查询条件</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombTraderReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///组合编码（流水号），可以为空，如果为空，则默认查询时间段内的所有成交回报</span>
    <span class="token keyword">char</span>      comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///开始时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点</span>
    <span class="token keyword">int64_t</span>   begin_time<span class="token punctuation">;</span>
    <span class="token comment">///结束时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前时间</span>
    <span class="token keyword">int64_t</span>   end_time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询当前交易日0点至当前时间点的所有成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在当前交易日0点至当前时间点的全部成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权组合策略在21年8月1日0时至15时的全部成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombTraderReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombTraderReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>string <span class="token function">comNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> comNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> <span class="token number">20210801000000000</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>end_time <span class="token operator">=</span> <span class="token number">20210801150000000</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedTrades</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedTrades</span><span class="token punctuation">(</span>XTPQueryOptCombTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_75-queryoptioncombinedtradesbypage" tabindex="-1"><a class="header-anchor" href="#_75-queryoptioncombinedtradesbypage"><span>75. QueryOptionCombinedTradesByPage</span></a></h3><p>分页请求查询期权组合策略成交回报。</p><p>该方法支持分页查询，注意用户需要记录下最后一笔查询结果的reference以便用户下次查询使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedTradesByPage</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombTraderByPageReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要分页查询订单的条件，如果第一次查询，那么reference填0</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权组合策略成交回报请求-分页查询</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombTraderByPageReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///需要查询的成交回报条数</span>
    <span class="token keyword">int64_t</span>         req_count<span class="token punctuation">;</span>
    <span class="token comment">///上一次收到的查询成交回报结果中带回来的索引，如果是从头查询，请置0</span>
    <span class="token keyword">int64_t</span>         reference<span class="token punctuation">;</span>
    <span class="token comment">///保留字段</span>
    <span class="token keyword">int64_t</span>         reserved<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 从索引初始开始分页查询50条期权组合策略成交单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombTraderByPageReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombTraderByPageReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	query_param<span class="token punctuation">.</span>req_count <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
	query_param<span class="token punctuation">.</span>reference <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedTradesByPage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span>session_id<span class="token punctuation">,</span>request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedTradesByPage</span><span class="token punctuation">(</span>XTPQueryOptCombTradeRsp <span class="token operator">*</span>trade_info<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> req_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> trade_sequence<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> query_reference<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_76-queryoptioncombinedposition" tabindex="-1"><a class="header-anchor" href="#_76-queryoptioncombinedposition"><span>76. QueryOptionCombinedPosition</span></a></h3><p>请求查询投资者期权组合策略持仓。</p><p>该方法如果用户提供了合约代码，则会查询此合约的持仓信息（注意请指定market，如果market为0，可能会查询到2个市场的持仓，如果market为其他非有效值，则查询结果会返回找不到持仓），如果合约代码为空，则默认查询所有持仓信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombPositionReq<span class="token operator">*</span> query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询持仓的筛选条件，其中组合策略代码可以初始化为空，表示查询所有，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，注意需与market匹配，不匹配的话，可能导致查询不到所需的持仓</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权组合策略持仓情况请求结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombPositionReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///组合编码</span>
    <span class="token keyword">char</span> comb_num<span class="token punctuation">[</span>XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///交易市场</span>
    XTP_MARKET_TYPE     market<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///XTP_MARKET_TYPE市场类型，交易里使用</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_MARKET_TYPE</span>
<span class="token punctuation">{</span>
    XTP_MKT_INIT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">///&lt;初始化值或者未知</span>
    XTP_MKT_SZ_A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">///&lt;深圳A股</span>
    XTP_MKT_SH_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;上海A股</span>
    XTP_MKT_BJ_A<span class="token punctuation">,</span>    <span class="token comment">///&lt;北京A股</span>
    XTP_MKT_HK<span class="token punctuation">,</span>      <span class="token comment">///&lt;港股</span>
    XTP_MKT_UNKNOWN   <span class="token comment">///&lt;未知交易市场类型</span>
<span class="token punctuation">}</span>XTP_MARKET_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 期权组合策略组合编码字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_SECONDARY_ORDER_ID_LEN</span>  <span class="token expression"><span class="token number">18</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询深市某期权组合策略的持仓信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombPositionReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombPositionReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SZ_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string <span class="token function">combNumStr</span><span class="token punctuation">(</span><span class="token string">&quot;xxxxxxxxxxxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>comb_num<span class="token punctuation">,</span> combNumStr<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_SECONDARY_ORDER_ID_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedPosition</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询全市场所有的期权组合策略持仓信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombPositionReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombPositionReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedPosition</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedPosition</span><span class="token punctuation">(</span>XTPQueryOptCombPositionRsp <span class="token operator">*</span>position_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_77-queryoptioncombinedstrategyinfo" tabindex="-1"><a class="header-anchor" href="#_77-queryoptioncombinedstrategyinfo"><span>77. QueryOptionCombinedStrategyInfo</span></a></h3><p>请求查询期权组合策略信息。该方法仅支持精确查询，不支持模糊查询。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedStrategyInfo</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询期权组合策略信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedStrategyInfo</span><span class="token punctuation">(</span>session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedStrategyInfo</span><span class="token punctuation">(</span>XTPQueryCombineStrategyInfoRsp <span class="token operator">*</span>strategy_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_78-queryoptioncombinedexecposition" tabindex="-1"><a class="header-anchor" href="#_78-queryoptioncombinedexecposition"><span>78. QueryOptionCombinedExecPosition</span></a></h3><p>请求查询期权行权合并头寸。该方法可能对应多条响应消息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryOptionCombinedExecPosition</span><span class="token punctuation">(</span><span class="token keyword">const</span> XTPQueryOptCombExecPosReq<span class="token operator">*</span> query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的行权合并的筛选条件，其中market为0会默认查询全市场，成分合约代码可以初始化为空，如果不为空，请不带空格，并以&#39;\\0&#39;结尾，注意所有填写的条件都会进行匹配</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询期权行权合并头寸请求结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">XTPQueryOptCombExecPosReq</span>
<span class="token punctuation">{</span>
    <span class="token comment">///市场</span>
    XTP_MARKET_TYPE market<span class="token punctuation">;</span>
    <span class="token comment">///成分合约1代码</span>
    <span class="token keyword">char</span> cntrt_code_1<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">///成分合约2代码</span>
    <span class="token keyword">char</span> cntrt_code_2<span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/// 存放证券代码的字符串长度</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">XTP_TICKER_LEN</span> <span class="token expression"><span class="token number">16</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询某期权行权合并头寸</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombExecPosReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombExecPosReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_INIT<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string ticker1 <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string ticker2 <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>cntrt_code_1<span class="token punctuation">,</span> ticker1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>cntrt_code_1<span class="token punctuation">,</span> ticker2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedExecPosition</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询全市场期权行权合并头寸</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryOptCombExecPosReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryOptCombExecPosReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryOptionCombinedExecPosition</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryOptionCombinedExecPosition</span><span class="token punctuation">(</span>XTPQueryOptCombExecPosRsp <span class="token operator">*</span>position_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_79-loginalgo" tabindex="-1"><a class="header-anchor" href="#_79-loginalgo"><span>79. LoginALGO</span></a></h3><p>用户登录algo服务器请求。此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只需调用一次，所有用户共用即可。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LoginALGO</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>ip：algo服务器地址，类似&quot;127.0.0.1&quot;</p><p>port：algo服务器端口号</p><p>user：登录用户名</p><p>password：登录密码</p><p>sock_type：&quot;1&quot;代表TCP，&quot;2&quot;代表UDP，目前暂时只支持TCP</p><p>local_ip：本地网卡地址，类似&quot;127.0.0.1&quot;</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// XTP_PROTOCOL_TYPE是通讯传输协议方式</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">XTP_PROTOCOL_TYPE</span>
<span class="token punctuation">{</span>
	XTP_PROTOCOL_TCP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>	<span class="token comment">///&lt;采用TCP方式传输</span>
	XTP_PROTOCOL_UDP		<span class="token comment">///&lt;采用UDP方式传输(仅行情接口支持)</span>
<span class="token punctuation">}</span>XTP_PROTOCOL_TYPE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.返回</p><p>表明此资金账号登录是否成功，非“0”表示登录失败，可以调用GetApiLastError()来获取错误代码，“0”表示登录成功。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 登录algo服务器请求，参数网址端口账户密码模式等和默认参数本机地址需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>string server_ip_algo <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> server_port_algo <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_name_algo <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string account_pw_algo <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//根据本地网卡对应的ip设定</span>
	
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">LoginALGO</span><span class="token punctuation">(</span>server_ip_algo<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server_port_algo<span class="token punctuation">,</span> account_name_algo<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account_pw_algo<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_PROTOCOL_TCP<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>login_ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 登录algo服务器成功</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> account_name_algo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; login to AlgoBus success.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
		<span class="token comment">// 登录algo服务器失败</span>
		XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> user_trader_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> account_name_algo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; login to AlgoBus error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_80-querystrategy" tabindex="-1"><a class="header-anchor" href="#_80-querystrategy"><span>80. QueryStrategy</span></a></h3><p>algo业务中查询用户策略请求。xtp_strategy_id条件的优先级最高，只有当xtp_strategy_id为0时，其他条件才生效，此条请求可能对应多条回应消息.</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryStrategy</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> strategy_type<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> client_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>strategy_type：需要查询的策略类型，可填0</p><p>client_strategy_id：需要查询的策略用户自定义id，可填0</p><p>xtp_strategy_id：需要查询的策略在xtp系统中的id，如果指定，就一定按指定查询，如果填0，则按其他筛选条件查询</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询algo业务中查询用户策略，参数需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryStrategy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// algo业务中查询策略列表的响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryStrategy</span><span class="token punctuation">(</span>XTPStrategyInfoStruct<span class="token operator">*</span> strategy_info<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_81-algouserestablishchannel" tabindex="-1"><a class="header-anchor" href="#_81-algouserestablishchannel"><span>81. ALGOUserEstablishChannel</span></a></h3><p>用户请求使用algo服务器建立算法通道。此函数为异步方式，一个用户只能拥有一个算法通道，如果之前已经建立，则无需重复建立，在使用算法前，请先建立算法通道。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ALGOUserEstablishChannel</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> oms_ip<span class="token punctuation">,</span> <span class="token keyword">int</span> oms_port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>oms_ip：oms服务器地址，类似&quot;127.0.0.1&quot;，非algo服务器地址</p><p>oms_port：oms服务器端口号</p><p>user：登录用户名</p><p>password：登录密码</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>表明此资金账号建立算法通道请求消息发送是否成功，非“0”表示发送失败，可以调用GetApiLastError()来获取错误代码，“0”表示发送成功</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 请求使用algo服务器建立算法通道，参数服务器地址端口用户名密码等需用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">///在用户成功登录交易服务器后，算法用户建立算法通道</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>session_id_ <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string oms_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> oms_server_port <span class="token operator">=</span> xxxx<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string account_name_oms <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string account_pw_oms <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">ALGOUserEstablishChannel</span><span class="token punctuation">(</span>oms_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oms_server_port<span class="token punctuation">,</span> account_name_oms<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account_pw_oms<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session_id_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 建立算法通道请求消息，发送成功</span>
		<span class="token punctuation">{</span>
			std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> account_name_oms <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; establish channel send success.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 建立算法通道请求消息，发送失败</span>
			XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> user_trader_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> account_name_algo <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; establish channel send error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// algo业务中用户建立算法通道的消息响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnALGOUserEstablishChannel</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> XTPRI<span class="token operator">*</span> error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_82-insertalgoorder" tabindex="-1"><a class="header-anchor" href="#_82-insertalgoorder"><span>82. InsertAlgoOrder</span></a></h3><p>algo业务中用户报算法单请求。</p><p>仅能在用户建立算法通道后使用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">InsertAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> strategy_type<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> client_strategy_id<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>strategy_type：需要创建的策略类型</p><p>client_strategy_id：用户自定义id，帮助用户定位</p><p>strategy_param：策略参数</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>算法报单请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 报单，参数需要用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint32_t</span> strategy_type <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
	<span class="token keyword">uint64_t</span> client_strategy_id <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string strategy_param <span class="token operator">=</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">InsertAlgoOrder</span><span class="token punctuation">(</span>strategy_type<span class="token punctuation">,</span> client_strategy_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>strategy_param<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 发送算法单成功</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Insert algo order send success.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 发送算法单失败，获取下单发送失败的错误信息，并输出打印</span>
		XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Failed to insert algo order, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// algo业务中报送策略单的响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnInsertAlgoOrder</span><span class="token punctuation">(</span>XTPStrategyInfoStruct<span class="token operator">*</span> strategy_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_83-cancelalgoorder" tabindex="-1"><a class="header-anchor" href="#_83-cancelalgoorder"><span>83. CancelAlgoOrder</span></a></h3><p>algo业务中用户撤销算法单请求。</p><p>仅能在用户建立算法通道后调用。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">CancelAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">bool</span> cancel_flag<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>cancel_flag：是否需要撤销的算法单已下的订单，true-撤单，false-不撤单</p><p>xtp_strategy_id：需要撤销的算法单在xtp algobus系统中的id</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 撤单，参数用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">CancelAlgoOrder</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> xtp_strategy_id<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// algo业务中撤销策略单的响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnCancelAlgoOrder</span><span class="token punctuation">(</span>XTPStrategyInfoStruct<span class="token operator">*</span> strategy_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_84-getalgorithmidbyorder" tabindex="-1"><a class="header-anchor" href="#_84-getalgorithmidbyorder"><span>84. GetAlgorithmIDByOrder</span></a></h3><p>获取算法单的母单ID。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">uint64_t</span> <span class="token function">GetAlgorithmIDByOrder</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> order_xtp_id<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> order_client_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>order_xtp_id：算法单对应的xtp id</p><p>order_client_id：算法单对应的自定义ID，不可随意填写</p><p>3.返回</p><p>返回算法单的母单ID，如果返回为0表示不是算法单</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 根据报单ID请求查询报单</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> order_client_id <span class="token operator">=</span> xxx<span class="token punctuation">;</span>

	<span class="token keyword">uint64_t</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetAlgorithmIDByOrder</span><span class="token punctuation">(</span>order_xtp_id<span class="token punctuation">,</span> order_client_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ret不为0即为算法母单ID</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_85-strategyrecommendation" tabindex="-1"><a class="header-anchor" href="#_85-strategyrecommendation"><span>85. StrategyRecommendation</span></a></h3><p>algo业务中请求推荐算法。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">StrategyRecommendation</span><span class="token punctuation">(</span><span class="token keyword">bool</span> basket_flag<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> basket_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>basket_flag：是否将满足条件的推荐结果打包成母单篮的标志，true-打包</p><p>basket_param：需要算法推荐的证券列表，为json字串，具体格式参考说明文档或咨询运营人员</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 请求推荐算法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> basket_flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//需要打包成母单篮</span>
	std<span class="token double-colon punctuation">::</span>string basket_param <span class="token operator">=</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//需要算法推荐的证券列表，为json字串</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">StrategyRecommendation</span><span class="token punctuation">(</span>basket_flag<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>basket_param<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 请求发送成功</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Strategy recommendation send success.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 发送请求推荐算法失败，获取发送失败的错误信息，并输出打印</span>
		XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Failed to strategy recommendation, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///algo业务中算法推荐的响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnStrategyRecommendation</span><span class="token punctuation">(</span><span class="token keyword">bool</span> basket_flag<span class="token punctuation">,</span> XTPStrategyRecommendationInfo<span class="token operator">*</span> recommendation_info<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_86-querybondswapstockinfo" tabindex="-1"><a class="header-anchor" href="#_86-querybondswapstockinfo"><span>86. QueryBondSwapStockInfo</span></a></h3><p>请求查询用户可转债转股信息。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryBondSwapStockInfo</span><span class="token punctuation">(</span>XTPQueryBondSwapStockReq <span class="token operator">*</span>query_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>query_param：需要查询的可转债转股信息的筛选条件，可以为NULL（为NULL表示查询所有的可转债转股信息），此参数中合约代码可以为空字符串，如果为空字符串，则查询所有可转债转股信息，如果不为空字符串，请不带空格，并以&#39;\\0&#39;结尾，且必须与market匹配</p><p>session_id：资金账户对应的session_id,登录时得到</p><p>request_id：用于用户定位查询响应的ID，由用户自定义</p><p>3.返回</p><p>查询请求发送是否成功，&quot;0&quot;表示成功，非&quot;0&quot;表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询用户可转债转股信息</span>
<span class="token comment">// 可以指定ticker，查询单个可转债转股</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryBondSwapStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryBondSwapStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	query_param<span class="token punctuation">.</span>market <span class="token operator">=</span> XTP_MKT_SH_A<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string stdstr_ticker <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>query_param<span class="token punctuation">.</span>ticker<span class="token punctuation">,</span> stdstr_ticker<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryBondSwapStockInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 查询所有的可转债转股信息</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	XTPQueryBondSwapStockReq query_param<span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>XTPQueryBondSwapStockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">QueryBondSwapStockInfo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>query_param<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span> request_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryBondSwapStockInfo</span><span class="token punctuation">(</span>XTPQueryBondSwapStockRsp <span class="token operator">*</span>swap_stock_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">int</span> request_id<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_87-modifyalgoorder" tabindex="-1"><a class="header-anchor" href="#_87-modifyalgoorder"><span>87. ModifyAlgoOrder</span></a></h3><p>algo业务中修改已有的算法单。</p><p>1.函数原型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">ModifyAlgoOrder</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> xtp_strategy_id<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> strategy_param<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.参数</p><p>xtp_strategy_id：xtp算法单策略ID strategy_param：修改后的策略参数 session_id：资金账户对应的session_id,登录时得到</p><p>3.返回</p><p>算法单修改请求发送是否成功，“0”表示成功，非“0”表示出错，此时用户可以调用GetApiLastError()来获取错误代码。</p><p>4.调用示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 修改已有的算法单，参数需要用户自定义</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user_trade_api_<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint64_t</span> xtp_strategy_id <span class="token operator">=</span> xxx<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>string strategy_param <span class="token operator">=</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">ModifyAlgoOrder</span><span class="token punctuation">(</span>xtp_strategy_id<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>strategy_param<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 发送算法单修改请求成功</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Modify algo order send success.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 发送算法单修改请求失败，获取发送失败的错误信息，并输出打印</span>
		XTPRI <span class="token operator">*</span>error_info <span class="token operator">=</span> user_trade_api_<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Failed to modify algo order, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.响应函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnModifyAlgoOrder</span><span class="token punctuation">(</span>XTPStrategyInfoStruct<span class="token operator">*</span> strategy_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> session_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><br>`,1348);function u(d,k){return t(),p("div",null,[c,i,s(" TOC "),l,s(" /TOC "),r])}const _=e(o,[["render",u],["__file","TraderApi.html.vue"]]),b=JSON.parse('{"path":"/docs/API_DOC_XTP_API%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E4%B8%8E%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%20-%20XAlgo/TraderApi.html","title":"","lang":"zh-CN","frontmatter":{"description":"TraderApi 目录 1. 接口 2. 示例代码 3. CreateTraderApi 4. Release 5. GetTradingDay 6. RegisterSpi 7. GetApiLastError 8. GetApiVersion 9. GetClientIDByXTPID 10. GetAccountByXTPID 11. Subs...","head":[["meta",{"property":"og:url","content":"https://10000l.github.io/docs/API_DOC_XTP_API%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E4%B8%8E%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%20-%20XAlgo/TraderApi.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:description","content":"TraderApi 目录 1. 接口 2. 示例代码 3. CreateTraderApi 4. Release 5. GetTradingDay 6. RegisterSpi 7. GetApiLastError 8. GetApiVersion 9. GetClientIDByXTPID 10. GetAccountByXTPID 11. Subs..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T15:52:56.000Z"}],["meta",{"property":"article:author","content":"xtp_master"}],["meta",{"property":"article:modified_time","content":"2024-06-03T15:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T15:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xtp_master\\",\\"url\\":\\"https://xtp.zts.com.cn\\"}]}"]]},"headers":[{"level":2,"title":"TraderApi","slug":"traderapi","link":"#traderapi","children":[{"level":3,"title":"1. 接口","slug":"_1-接口","link":"#_1-接口","children":[]},{"level":3,"title":"2. 示例代码","slug":"_2-示例代码","link":"#_2-示例代码","children":[]},{"level":3,"title":"3. CreateTraderApi","slug":"_3-createtraderapi","link":"#_3-createtraderapi","children":[]},{"level":3,"title":"4. Release","slug":"_4-release","link":"#_4-release","children":[]},{"level":3,"title":"5. GetTradingDay","slug":"_5-gettradingday","link":"#_5-gettradingday","children":[]},{"level":3,"title":"6. RegisterSpi","slug":"_6-registerspi","link":"#_6-registerspi","children":[]},{"level":3,"title":"7. GetApiLastError","slug":"_7-getapilasterror","link":"#_7-getapilasterror","children":[]},{"level":3,"title":"8. GetApiVersion","slug":"_8-getapiversion","link":"#_8-getapiversion","children":[]},{"level":3,"title":"9. GetClientIDByXTPID","slug":"_9-getclientidbyxtpid","link":"#_9-getclientidbyxtpid","children":[]},{"level":3,"title":"10. GetAccountByXTPID","slug":"_10-getaccountbyxtpid","link":"#_10-getaccountbyxtpid","children":[]},{"level":3,"title":"11. SubscribePublicTopic","slug":"_11-subscribepublictopic","link":"#_11-subscribepublictopic","children":[]},{"level":3,"title":"12. SetSoftwareVersion","slug":"_12-setsoftwareversion","link":"#_12-setsoftwareversion","children":[]},{"level":3,"title":"13. SetSoftwareKey","slug":"_13-setsoftwarekey","link":"#_13-setsoftwarekey","children":[]},{"level":3,"title":"14. SetHeartBeatInterval","slug":"_14-setheartbeatinterval","link":"#_14-setheartbeatinterval","children":[]},{"level":3,"title":"15. Login","slug":"_15-login","link":"#_15-login","children":[]},{"level":3,"title":"16. Logout","slug":"_16-logout","link":"#_16-logout","children":[]},{"level":3,"title":"17. IsServerRestart","slug":"_17-isserverrestart","link":"#_17-isserverrestart","children":[]},{"level":3,"title":"18. ModifyUserTerminalInfo","slug":"_18-modifyuserterminalinfo","link":"#_18-modifyuserterminalinfo","children":[]},{"level":3,"title":"19. QueryAccountTradeMarket","slug":"_19-queryaccounttrademarket","link":"#_19-queryaccounttrademarket","children":[]},{"level":3,"title":"20. GetANewOrderXTPID","slug":"_20-getaneworderxtpid","link":"#_20-getaneworderxtpid","children":[]},{"level":3,"title":"21. InsertOrder","slug":"_21-insertorder","link":"#_21-insertorder","children":[]},{"level":3,"title":"22. InsertOrderExtra","slug":"_22-insertorderextra","link":"#_22-insertorderextra","children":[]},{"level":3,"title":"23. CancelOrder","slug":"_23-cancelorder","link":"#_23-cancelorder","children":[]},{"level":3,"title":"24. QueryOrderByXTPID","slug":"_24-queryorderbyxtpid","link":"#_24-queryorderbyxtpid","children":[]},{"level":3,"title":"25. QueryOrders","slug":"_25-queryorders","link":"#_25-queryorders","children":[]},{"level":3,"title":"26. QueryUnfinishedOrders","slug":"_26-queryunfinishedorders","link":"#_26-queryunfinishedorders","children":[]},{"level":3,"title":"27. QueryOrdersByPage","slug":"_27-queryordersbypage","link":"#_27-queryordersbypage","children":[]},{"level":3,"title":"28. QueryOrderByXTPIDEx","slug":"_28-queryorderbyxtpidex","link":"#_28-queryorderbyxtpidex","children":[]},{"level":3,"title":"29. QueryOrdersEx","slug":"_29-queryordersex","link":"#_29-queryordersex","children":[]},{"level":3,"title":"30. QueryUnfinishedOrdersEx","slug":"_30-queryunfinishedordersex","link":"#_30-queryunfinishedordersex","children":[]},{"level":3,"title":"31. QueryOrdersByPageEx","slug":"_31-queryordersbypageex","link":"#_31-queryordersbypageex","children":[]},{"level":3,"title":"32. QueryTradesByXTPID","slug":"_32-querytradesbyxtpid","link":"#_32-querytradesbyxtpid","children":[]},{"level":3,"title":"33. QueryTrades","slug":"_33-querytrades","link":"#_33-querytrades","children":[]},{"level":3,"title":"34. QueryTradesByPage","slug":"_34-querytradesbypage","link":"#_34-querytradesbypage","children":[]},{"level":3,"title":"35. QueryPosition","slug":"_35-queryposition","link":"#_35-queryposition","children":[]},{"level":3,"title":"36. QueryAsset","slug":"_36-queryasset","link":"#_36-queryasset","children":[]},{"level":3,"title":"37. QueryStructuredFund","slug":"_37-querystructuredfund","link":"#_37-querystructuredfund","children":[]},{"level":3,"title":"38. FundTransfer","slug":"_38-fundtransfer","link":"#_38-fundtransfer","children":[]},{"level":3,"title":"39. QueryFundTransfer","slug":"_39-queryfundtransfer","link":"#_39-queryfundtransfer","children":[]},{"level":3,"title":"40. QueryOtherServerFund","slug":"_40-queryotherserverfund","link":"#_40-queryotherserverfund","children":[]},{"level":3,"title":"41. QueryETF","slug":"_41-queryetf","link":"#_41-queryetf","children":[]},{"level":3,"title":"42. QueryETFTickerBasket","slug":"_42-queryetftickerbasket","link":"#_42-queryetftickerbasket","children":[]},{"level":3,"title":"43. QueryIPOInfoList","slug":"_43-queryipoinfolist","link":"#_43-queryipoinfolist","children":[]},{"level":3,"title":"44. QueryIPOQuotaInfo","slug":"_44-queryipoquotainfo","link":"#_44-queryipoquotainfo","children":[]},{"level":3,"title":"45. QueryBondIPOInfoList","slug":"_45-querybondipoinfolist","link":"#_45-querybondipoinfolist","children":[]},{"level":3,"title":"46. QueryOptionAuctionInfo","slug":"_46-queryoptionauctioninfo","link":"#_46-queryoptionauctioninfo","children":[]},{"level":3,"title":"47. CreditCashRepay","slug":"_47-creditcashrepay","link":"#_47-creditcashrepay","children":[]},{"level":3,"title":"48. CreditCashRepayDebtInterestFee","slug":"_48-creditcashrepaydebtinterestfee","link":"#_48-creditcashrepaydebtinterestfee","children":[]},{"level":3,"title":"49. CreditSellStockRepayDebtInterestFee","slug":"_49-creditsellstockrepaydebtinterestfee","link":"#_49-creditsellstockrepaydebtinterestfee","children":[]},{"level":3,"title":"50. QueryCreditCashRepayInfo","slug":"_50-querycreditcashrepayinfo","link":"#_50-querycreditcashrepayinfo","children":[]},{"level":3,"title":"51. QueryCreditFundInfo","slug":"_51-querycreditfundinfo","link":"#_51-querycreditfundinfo","children":[]},{"level":3,"title":"52. QueryCreditDebtInfo","slug":"_52-querycreditdebtinfo","link":"#_52-querycreditdebtinfo","children":[]},{"level":3,"title":"53. QueryCreditTickerDebtInfo","slug":"_53-querycredittickerdebtinfo","link":"#_53-querycredittickerdebtinfo","children":[]},{"level":3,"title":"54. QueryCreditAssetDebtInfo","slug":"_54-querycreditassetdebtinfo","link":"#_54-querycreditassetdebtinfo","children":[]},{"level":3,"title":"55. QueryCreditTickerAssignInfo","slug":"_55-querycredittickerassigninfo","link":"#_55-querycredittickerassigninfo","children":[]},{"level":3,"title":"56. QueryCreditExcessStock","slug":"_56-querycreditexcessstock","link":"#_56-querycreditexcessstock","children":[]},{"level":3,"title":"57. QueryMulCreditExcessStock","slug":"_57-querymulcreditexcessstock","link":"#_57-querymulcreditexcessstock","children":[]},{"level":3,"title":"58. CreditExtendDebtDate","slug":"_58-creditextenddebtdate","link":"#_58-creditextenddebtdate","children":[]},{"level":3,"title":"59. QueryCreditExtendDebtDateOrders","slug":"_59-querycreditextenddebtdateorders","link":"#_59-querycreditextenddebtdateorders","children":[]},{"level":3,"title":"60. QueryCreditFundExtraInfo","slug":"_60-querycreditfundextrainfo","link":"#_60-querycreditfundextrainfo","children":[]},{"level":3,"title":"61. QueryCreditPositionExtraInfo","slug":"_61-querycreditpositionextrainfo","link":"#_61-querycreditpositionextrainfo","children":[]},{"level":3,"title":"62. InsertOptionCombinedOrder","slug":"_62-insertoptioncombinedorder","link":"#_62-insertoptioncombinedorder","children":[]},{"level":3,"title":"63. InsertOptionCombinedOrderExtra","slug":"_63-insertoptioncombinedorderextra","link":"#_63-insertoptioncombinedorderextra","children":[]},{"level":3,"title":"64. CancelOptionCombinedOrder","slug":"_64-canceloptioncombinedorder","link":"#_64-canceloptioncombinedorder","children":[]},{"level":3,"title":"65. QueryOptionCombinedUnfinishedOrders","slug":"_65-queryoptioncombinedunfinishedorders","link":"#_65-queryoptioncombinedunfinishedorders","children":[]},{"level":3,"title":"66. QueryOptionCombinedOrderByXTPID","slug":"_66-queryoptioncombinedorderbyxtpid","link":"#_66-queryoptioncombinedorderbyxtpid","children":[]},{"level":3,"title":"67. QueryOptionCombinedOrders","slug":"_67-queryoptioncombinedorders","link":"#_67-queryoptioncombinedorders","children":[]},{"level":3,"title":"68. QueryOptionCombinedOrdersByPage","slug":"_68-queryoptioncombinedordersbypage","link":"#_68-queryoptioncombinedordersbypage","children":[]},{"level":3,"title":"69. QueryOptionCombinedUnfinishedOrdersEx","slug":"_69-queryoptioncombinedunfinishedordersex","link":"#_69-queryoptioncombinedunfinishedordersex","children":[]},{"level":3,"title":"70. QueryOptionCombinedOrderByXTPIDEx","slug":"_70-queryoptioncombinedorderbyxtpidex","link":"#_70-queryoptioncombinedorderbyxtpidex","children":[]},{"level":3,"title":"71. QueryOptionCombinedOrdersEx","slug":"_71-queryoptioncombinedordersex","link":"#_71-queryoptioncombinedordersex","children":[]},{"level":3,"title":"72. QueryOptionCombinedOrdersByPageEx","slug":"_72-queryoptioncombinedordersbypageex","link":"#_72-queryoptioncombinedordersbypageex","children":[]},{"level":3,"title":"73. QueryOptionCombinedTradesByXTPID","slug":"_73-queryoptioncombinedtradesbyxtpid","link":"#_73-queryoptioncombinedtradesbyxtpid","children":[]},{"level":3,"title":"74. QueryOptionCombinedTrades","slug":"_74-queryoptioncombinedtrades","link":"#_74-queryoptioncombinedtrades","children":[]},{"level":3,"title":"75. QueryOptionCombinedTradesByPage","slug":"_75-queryoptioncombinedtradesbypage","link":"#_75-queryoptioncombinedtradesbypage","children":[]},{"level":3,"title":"76. QueryOptionCombinedPosition","slug":"_76-queryoptioncombinedposition","link":"#_76-queryoptioncombinedposition","children":[]},{"level":3,"title":"77. QueryOptionCombinedStrategyInfo","slug":"_77-queryoptioncombinedstrategyinfo","link":"#_77-queryoptioncombinedstrategyinfo","children":[]},{"level":3,"title":"78. QueryOptionCombinedExecPosition","slug":"_78-queryoptioncombinedexecposition","link":"#_78-queryoptioncombinedexecposition","children":[]},{"level":3,"title":"79. LoginALGO","slug":"_79-loginalgo","link":"#_79-loginalgo","children":[]},{"level":3,"title":"80. QueryStrategy","slug":"_80-querystrategy","link":"#_80-querystrategy","children":[]},{"level":3,"title":"81. ALGOUserEstablishChannel","slug":"_81-algouserestablishchannel","link":"#_81-algouserestablishchannel","children":[]},{"level":3,"title":"82. InsertAlgoOrder","slug":"_82-insertalgoorder","link":"#_82-insertalgoorder","children":[]},{"level":3,"title":"83. CancelAlgoOrder","slug":"_83-cancelalgoorder","link":"#_83-cancelalgoorder","children":[]},{"level":3,"title":"84. GetAlgorithmIDByOrder","slug":"_84-getalgorithmidbyorder","link":"#_84-getalgorithmidbyorder","children":[]},{"level":3,"title":"85. StrategyRecommendation","slug":"_85-strategyrecommendation","link":"#_85-strategyrecommendation","children":[]},{"level":3,"title":"86. QueryBondSwapStockInfo","slug":"_86-querybondswapstockinfo","link":"#_86-querybondswapstockinfo","children":[]},{"level":3,"title":"87. ModifyAlgoOrder","slug":"_87-modifyalgoorder","link":"#_87-modifyalgoorder","children":[]}]}],"git":{"createdTime":1717429976000,"updatedTime":1717429976000,"contributors":[{"name":"linxiaolx-lx","email":"1247776138@qq.com","commits":1}]},"readingTime":{"minutes":135.85,"words":40755},"filePathRelative":"docs/API_DOC_XTP_API接口说明与示例代码 - XAlgo/TraderApi.md","localizedDate":"2024年6月3日","autoDesc":true}');export{_ as comp,b as data};
