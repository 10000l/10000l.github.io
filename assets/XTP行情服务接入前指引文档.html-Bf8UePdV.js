import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as i,b as a,f as s,d as n,e as t}from"./app-C9BeCxEA.js";const o="/assets/12-ChhlW375.jpg",p="/assets/13-DwFlH-zs.jpg",r="/assets/17-C7MyV03N.jpg",c="/assets/18-DMTEwiES.jpg",d="/assets/20-Bb52caPw.jpg",u="/assets/21-By5dQwOy.jpg",_={},k=n("h1",{id:"xtp行情服务接入前指引",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#xtp行情服务接入前指引"},[n("span",null,"XTP行情服务接入前指引")])],-1),m=t('<ul><li><a href="#%E4%B8%80xtp%E8%A1%8C%E6%83%85%E6%8E%A5%E5%85%A5%E8%A6%81%E7%82%B9%E6%A6%82%E8%BF%B0">一、XTP行情接入要点概述</a></li><li><a href="#%E4%BA%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C">二、基础操作</a><ul><li><a href="#1%E7%99%BB%E9%99%86">1. 登录</a></li><li><a href="#2%E6%9F%A5%E8%AF%A2">2. 查询</a></li><li><a href="#3%E8%AE%A2%E9%98%85">3. 订阅</a></li><li><a href="#4%E6%8E%A8%E9%80%81">4. 推送</a></li></ul></li><li><a href="#%E4%B8%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AD%97%E6%AE%B5%E5%90%AB%E4%B9%89">三、数据结构及字段含义</a><ul><li><a href="#1%E8%A1%8C%E6%83%85%E5%BF%AB%E7%85%A7xtpmd%E8%B5%8B%E5%80%BC%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%90%AB%E4%B9%89">1. 行情快照（XTPMD）赋值字段及含义</a></li><li><a href="#2%E9%80%90%E7%AC%94xtptbt%E8%B5%8B%E5%80%BC%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%90%AB%E4%B9%89">2.逐笔（XTPTBT）赋值字段及含义</a></li><li><a href="#3%E8%AE%A2%E5%8D%95%E8%96%84xtpob%E8%B5%8B%E5%80%BC%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%90%AB%E4%B9%89">3.订单薄（XTPOB）赋值字段及含义</a></li></ul></li><li><a href="#%E5%9B%9Bfaq">四、FAQ</a><ul><li><a href="#1%E5%85%AC%E7%BD%91%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83">1.公网测试环境</a></li><li><a href="#2%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83">2.生产环境</a></li><li><a href="#3udp%E7%BB%84%E6%92%AD%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5">3.UDP（组播）推送方式及问题排查 </a></li><li><a href="#4tcp%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5">4. TCP推送方式及问题排查</a></li><li><a href="#5%E8%A1%8C%E6%83%85%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E9%A2%91%E7%8E%87">5. 行情数据更新频率</a></li><li><a href="#6%E4%B8%A2%E5%8C%85%E9%97%AE%E9%A2%98api%E6%97%A5%E5%BF%97%E6%8E%92%E6%9F%A5">6. 丢包问题API日志排查</a></li><li><a href="#7%E5%AF%B9seq-is-discrete-n-to-m%E7%9A%84%E8%A7%A3%E9%87%8A">7. 对seq is discrete N to M的解释</a></li><li><a href="#8%E5%85%B6%E5%AE%83%E9%97%AE%E9%A2%98">8. 其它问题</a></li></ul></li></ul>',1),b=t('<h2 id="一、xtp行情接入要点概述" tabindex="-1"><a class="header-anchor" href="#一、xtp行情接入要点概述"><span>一、XTP行情接入要点概述</span></a></h2><ol><li>XQuote是XTP自主开发的行情解码、数据推送的服务器。<br></li><li>支持的行情源包括SHL1，SHL2，SZL1，SZL2行情及北交所行情。<br></li><li>用户可以通过API获取股票、基金、债券、指数、期权行情。<br></li><li>目前XQuote只提供实时行情，不提供历史行情。<br></li><li>行情推送方式有两种：TCP推送和UDP（组播）推送（生产环境使用UDP推送）。<br></li><li>推送的数据包括：行情快照、买一卖一委托队列、逐笔、订单薄。<br></li><li>XQuote提供按市场订阅和按股票代码订阅两种模式。<br></li><li>因为实盘的数据量，比公网测试环境的数据量大得多，所以用户在接入实盘前，一定要在实盘上做接入测试。<br></li><li>接入前请下载最新的API，网址为https://xtp.zts.com.cn/service/download/info?id=1&amp;type=downloadProducts 请勿下载1.1.14.x版本的API，该版本不能用来登陆行情服务器。</li></ol><h2 id="二、基础操作" tabindex="-1"><a class="header-anchor" href="#二、基础操作"><span>二、基础操作</span></a></h2><h3 id="_1、登陆" tabindex="-1"><a class="header-anchor" href="#_1、登陆"><span>1、登陆</span></a></h3><br>',5),h=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///用户登录请求</span>
<span class="token comment">///@return 登录是否成功，“0”表示登录成功，“-1”表示连接服务器出错，此时用户可以调用GetApiLastError()来获取错误代码，“-2”表示已存在连接，不允许重复登录，如果需要重连，请先logout，“-3”表示输入有错误</span>
<span class="token comment">///@param ip 服务器ip地址，类似“127.0.0.1”</span>
<span class="token comment">///@param port 服务器端口号</span>
<span class="token comment">///@param user 登陆用户名</span>
<span class="token comment">///@param password 登陆密码</span>
<span class="token comment">///@param sock_type “1”代表TCP，“2”代表UDP</span>
<span class="token comment">///@param local_ip 本地网卡地址，类似“127.0.0.1”</span>
<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,2),v=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///创建QuoteApi</span>
<span class="token comment">///@param client_id （必须输入）用于区分同一用户的不同客户端，由用户自定义</span>
<span class="token comment">///@param save_file_path （必须输入）存贮订阅信息文件的目录，请设定一个有可写权限的真实存在的路径，如果路径不存在的话，可能会因为写冲突而造成断线</span>
<span class="token comment">///@param log_level 日志输出级别</span>
<span class="token comment">///@return 创建出的UserApi</span>
<span class="token comment">///@remark 如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接</span>
<span class="token keyword">static</span> QuoteApi <span class="token operator">*</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> client_id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>save_file_path<span class="token punctuation">,</span> XTP_LOG_LEVEL log_level<span class="token operator">=</span>XTP_LOG_LEVEL_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过CreateQuoteApi的log_level参数来调整API的日志级别，默认为DEBUG。但DEBUG级别的日志会非常多，请慎重使用。</p><br>`,3),E=n("p",null,"XTP的行情是允许一个账号在多个客户端同时登陆的。只需要将CreateQuoteApi的第client_id参数设置为不同的值即可。",-1),y=n("h3",{id:"_2、查询",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2、查询"},[n("span",null,"2、查询")])],-1),T=n("br",null,null,-1),g=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///获取当前交易日合约部分静态信息</span>
<span class="token comment">///@return 发送查询请求是否成功，“0”表示发送查询请求成功，非“0”表示发送查询请求不成功</span>
<span class="token comment">///@param exchange_id 交易所代码，必须提供 1-上海 2-深圳</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickers</span><span class="token punctuation">(</span>XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询合约部分静态信息的应答</span>
<span class="token comment">///@param ticker_info 合约部分静态信息</span>
<span class="token comment">///@param error_info 查询合约部分静态信息时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误</span>
<span class="token comment">///@param is_last 是否此次查询合约部分静态信息的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryAllTickers</span><span class="token punctuation">(</span>XTPQSI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用QueryAllTickers，查询对应市场可交易合约（股票/基金/债券/期权）基本信息。<br> 行情服务器内部对从数据库查询的到ticker进行过滤，过滤条件为(trade_status=0)，所以该接口，查询不到指数的信息。<br> 当行情服务器返回数据时，OnQueryAllTickers函数被调用（异步接口）。<br> 注意：目前（2018-12）生产环境，把停牌股票的trade_status配置成了0，即该接口也返回停牌股票。<br></p><p>返回的数据类型列表：</p><table><thead><tr><th>返回类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>XTP_TICKER_TYPE_STOCK(0)</td><td>股票</td><td>主板/中小板/创业板</td></tr><tr><td>XTP_TICKER_TYPE_TECH_STOCK(5)</td><td>科创版</td><td>科创版(上海)</td></tr><tr><td>XTP_TICKER_TYPE_BOND(3)</td><td>债券</td><td>国债/企业债/公司债/转换债券/国债逆回购</td></tr><tr><td>XTP_TICKER_TYPE_FUND(2)</td><td>基金</td><td>ETF/分级基金子基金/深交所仅申赎基金/上交所货币基金/深交所货币基金</td></tr><tr><td>XTP_TICKER_TYPE_OPTION(4)</td><td>期权</td><td>个股期权/ETF期权</td></tr><tr><td>XTP_TICKER_TYPE_UNKNOWN(6)</td><td></td><td>客户应该过滤掉返回类型为6的ticker</td></tr><tr><td>XTP_TICKER_TYPE_INDEX(1)</td><td>指数</td><td>本接口不返回指数</td></tr></tbody></table><br>`,6),S=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///获取合约的最新价格信息</span>
<span class="token comment">///@return 发送查询请求是否成功，“0”表示发送查询请求成功，非“0”表示发送查询请求不成功</span>
<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格  </span>
<span class="token comment">///@param count 要查询的合约个数</span>
<span class="token comment">///@param exchange_id 交易所代码</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryTickersPriceInfo</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///获取所有合约的最新价格信息</span>
<span class="token comment">///@return 发送查询请求是否成功，“0”表示发送查询请求成功，非“0”表示发送查询请求不成功</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">QueryAllTickersPriceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///查询合约的最新价格信息应答</span>
<span class="token comment">///@param ticker_info 合约的最新价格信息</span>
<span class="token comment">///@param error_info 查询合约的最新价格信息时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误</span>
<span class="token comment">///@param is_last 是否此次查询的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnQueryTickersPriceInfo</span><span class="token punctuation">(</span>XTPTPI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口可以返回股票/基金/债券/期权等最新价格。</p><p><em>需要注意的是：</em></p><p>（1）请使用“订阅/推送”的方式来获取行情最新价格，不要频繁调用查询接口。<br> （2）服务器对“全查询或超过3000只股票的查询”频率做了限制。<br></p><h3 id="_3、订阅" tabindex="-1"><a class="header-anchor" href="#_3、订阅"><span>3、订阅</span></a></h3><p>目前我们支持按股票代码和按市场进行订阅。快照、逐笔、订单薄(OB)使用不同的订阅接口。<br> 生产环境使用UDP组播，推荐客户按市场进行订阅。<br> SubscribeAllMarketData、SubscribeAllOptionMarketData、SubscribeAllTickByTick、SubscribeAllOrderBook<br> SubscribeMarketData、SubscribeTickByTick、SubscribeOrderBook<br> 例如：使用SubscribeMarketData订阅快照行情：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///订阅行情，包括股票、指数和期权。</span>
<span class="token comment">///@return 订阅接口调用是否成功，“0”表示接口调用成功，非“0”表示接口调用出错</span>
<span class="token comment">///@param ticker 合约ID数组，注意合约代码必须以&#39;\\0&#39;结尾，不包含空格 </span>
<span class="token comment">///@param count 要订阅/退订行情的合约个数</span>
<span class="token comment">///@param exchange_id 交易所代码</span>
<span class="token comment">///@remark 可以一次性订阅同一证券交易所的多个合约，无论用户因为何种问题需要重新登录行情服务器，都需要重新订阅行情</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ticker<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> XTP_EXCHANGE_TYPE exchange_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅函数，传入需要订阅的股票代码，订阅股票的个数，以及市场。注意市场不要写错误。如股票代码同样是“000001”，深交所表示平安银行，上交所表示上证指数。<br> OnSubMarektData返回订阅结果。<br></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///订阅行情应答，包括股票、指数和期权</span>
<span class="token comment">///@param ticker 详细的合约订阅情况</span>
<span class="token comment">///@param error_info 订阅合约发生错误时的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误</span>
<span class="token comment">///@param is_last 是否此次订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应</span>
<span class="token comment">///@remark 每条订阅的合约均对应一条订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意：</em><br> （1）生产环境L1/L2行情服务器均使用UDP推送模式，生产环境推荐使用全市场订阅接口。<br> （2）测试环境使用TCP的方式推送行情。由于带宽的限制，请客户只订阅少量股票，否则会出现推送延时、断线等问题。<br></p><h3 id="_4、推送" tabindex="-1"><a class="header-anchor" href="#_4、推送"><span>4、推送</span></a></h3><p>订阅成功后，当有行情服务器有数据推过来时，OnDepthMarketData、OnSubOrderBook、OnTickByTick会被回调。用户就可以从该函数中取数据了。<br> 在这些回调函数中，请不要使用耗时操作，需尽快返回。否则会造成API来不及接收数据而丢行情。<br></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///深度行情通知，包含买一卖一队列</span>
<span class="token comment">///@param market_data 行情数据</span>
<span class="token comment">///@param bid1_qty 买一队列数据</span>
<span class="token comment">///@param bid1_count 买一队列的有效委托笔数</span>
<span class="token comment">///@param max_bid1_count 买一队列总委托笔数</span>
<span class="token comment">///@param ask1_qty 卖一队列数据</span>
<span class="token comment">///@param ask1_count 卖一队列的有效委托笔数</span>
<span class="token comment">///@param max_ask1_count 卖一队列总委托笔数</span>
<span class="token comment">///@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、数据结构及字段含义" tabindex="-1"><a class="header-anchor" href="#三、数据结构及字段含义"><span>三、数据结构及字段含义</span></a></h2><h3 id="_1、行情快照-xtpmd-赋值字段及含义" tabindex="-1"><a class="header-anchor" href="#_1、行情快照-xtpmd-赋值字段及含义"><span>1、行情快照（XTPMD）赋值字段及含义</span></a></h3><p>有关ticker代码及其含义的说明:<br> http://www.sse.com.cn/market/price/report/ http://www.szse.cn/market/trend/<br></p><p>从API 2.2.32.2开始，XTPMarketDataStruct结构体，增加XTP_MARKETDATA_TYPE_V2 data_type_v2 字段，来表明是哪种数据类型。</p><p>（1）指数字段说明</p><p>data_type_v2 = XTP_MARKETDATA_V2_INDEX；</p><ul><li>exchange_id，交易所ID，枚举值</li><li>ticker，股票代码，6位</li><li>last_price，最新</li><li>pre_close_price，昨日收盘</li><li>open_price，今日开盘</li><li>high_price，最高</li><li>low_price，最低</li><li>close_price，今收。上交所有该字段（大于0该值有效）。深交所无该字段，xquote将其赋值为- last_price。</li><li>data_time <ul><li>SHL1取自每行的时戳</li><li>SHL2取自FAST层的时戳(非STEP层)</li><li>SZ直接由深交所给出</li></ul></li><li>qty，成交量，上交所单位手，深交所单位股</li><li>turnover，成交金额，单位元</li><li>trades_count，成交笔数，SH无意义（填0），SZ有值</li></ul><br>`,23),P=t("<p>股票的价格精度为0.01元，债券为0.001元<br> data_type_v2 = XTP_MARKETDATA_V2_ACTUAL；<br></p><ul><li>exchange_id，交易所ID，枚举值</li><li>ticker，股票代码，6位</li><li>last_price，最新</li><li>pre_close_price，昨收</li><li>open_price，今开</li><li>high_price，最高</li><li>low_price，最低</li><li>close_price，今收。上交所有该字段（大于0该值有效）。深交所无该字段，xquote将其赋值为last_price。</li></ul><p>深交所的今收，是在收盘后，通过文件( cashsecurityclosemd _*.xml )的形式下发的。</p><ul><li>data_time <ul><li>SHL1取自每行的时戳（非第一行header的时戳），含义为最近一次的成交时间</li><li>SHL2取自FAST层的时戳（非STEP层），含义为“最新委托、最新成交、最新状态”的最新时间，全市场行情时间，会持续更新</li><li>SZ直接由深交所给出</li></ul></li><li>upper_limit_price/lower_limit_price，涨/跌停价。SZ该值由深交所实时给出；SH来源于初始化文件（上交所没有实时给出该值）。</li><li>qty，成交量，单位股</li><li>turnover，成交金额，单位元</li><li>avg_price，无意义</li><li>bid[10]/ask[10]，买/卖价 <ul><li>L1数据源，只显示5档。L2数据源，显示10档。</li><li>单位元。</li></ul></li><li>bid_qty[10]/ask_qty[10]，买/卖量 <ul><li>L1数据源，只显示5档。L2数据源，显示10档。</li><li>单位股。</li></ul></li><li>trades_count，成交笔数。SHL1无意义（填0），SHL2/SZL1/SZL2有值。</li><li>ticker_status，当前交易状态及标志，8字节。</li></ul><p>第 0 位：</p><ul><li>‘S’，启动（开市前）时段(SH/SZ)</li><li>‘C’，集合竞价(SH/SZ)</li><li>‘T’，连续竞价(SH/SZ)</li><li>‘B’，休市（SZ）</li><li>‘E’，闭市(SH/SZ)</li><li>‘P’，产品停牌(SH/SZ)</li><li>‘M’，表示可恢复交易的熔断时段（盘中集合竞价）(SH)</li><li>‘N’，表示不可恢复交易的熔断时段（暂停交易至闭市）(SH)</li><li>‘U’，表示收盘集合竞价时段(SH)</li><li>‘D’，开盘结合竞价结束到连续竞价开始前（SH）</li><li>‘A’，盘后交易（SZ）</li><li>‘V’，波动性中断（SZ，SH期权）</li></ul><p>第 1 位：</p><ul><li>‘0’，此产品不可正常交易</li><li>‘1’，此产品可以正常交易</li><li>无意义填空格</li></ul><p>第 2 位：</p><ul><li>‘0’，未上市</li><li>‘1’，已上市</li></ul><p>第 3 位：</p><ul><li>‘0’，此产品在当前时段，不接受进行新订单申报</li><li>‘1’，此产品在当前时段，可接受进行新订单申报</li><li>无意义填空格</li></ul><p>深交所只有第0、1位，没有第2、3位</p><table><thead><tr><th>上海市场</th><th>0-9:15</th><th>9:15-9:25</th><th>9:25-9:30</th><th>9:30-11:30</th><th>11:30-13:00</th><th>13:00-14:57</th><th>14:57-15:00</th><th>15:00-</th></tr></thead><tbody><tr><td>非停牌</td><td>S 11</td><td>C111</td><td>T111</td><td>T111</td><td>T111</td><td>T111</td><td>U111</td><td>E111</td></tr><tr><td>停牌</td><td>P011</td><td>P011</td><td>P011</td><td>P011</td><td>P011</td><td>P011</td><td>P011</td><td>P011</td></tr></tbody></table><table><thead><tr><th>上海市场</th><th>0-9:25</th><th>9:25</th><th>9:25-9:30</th><th>9:30-11:30</th><th>11:30-13:00</th><th>13:00-14:57</th><th>14:57-15:00</th><th>15:00-</th></tr></thead><tbody><tr><td>SH603192<br>2018.08.28<br>[9:30-10:00]<br>盘中停牌</td><td>---</td><td>C111</td><td>T111</td><td>P011</td><td>T111</td><td>T111</td><td>U111</td><td>E111</td></tr></tbody></table><p>注意：从2018-12月份开始，上交所停止发送开盘集合竞价消息（UA3107）。开盘/收盘集合竞价消息，直接从UA3202发出。</p><table><thead><tr><th>深圳市场</th><th>0-9:15</th><th>9:15-9:25</th><th>9:25-9:30</th><th>9:30-11:30</th><th>11:30-13:00</th><th>13:00-14:57</th><th>14:57-15:00</th><th>15:00-</th></tr></thead><tbody><tr><td>非停牌</td><td>S1</td><td>C1</td><td>B1</td><td>T1</td><td>B1</td><td>T1</td><td>C1</td><td>E1</td></tr><tr><td>停牌</td><td>S0</td><td>C0</td><td>B0</td><td>T0</td><td>B0</td><td>T0</td><td>C0</td><td>E0</td></tr></tbody></table><table><thead><tr><th>深圳市场</th><th>0-9:15</th><th>9:15-9:25</th><th>9:25-9:30</th><th>9:30</th><th>9:30-10:00</th><th>10:00-11:30</th><th>11:30-13:00</th><th>13:00-14:57</th><th>14:57-15:00</th><th>15:00-</th></tr></thead><tbody><tr><td>SZ300747<br>2018.05.25<br>[9:30-10:00]<br>盘中停牌</td><td>S1</td><td>C1</td><td>B1</td><td>T1</td><td>V1</td><td>T1</td><td>B1</td><td>T1</td><td>C1</td><td>E1</td></tr></tbody></table><ul><li>data_type，股票时为0。</li><li>stk，股票扩展字段。 <ul><li>total_bid_qty，委托买入总量，SHL2/SZ有值。</li><li>total_ask_qty，委托卖出总量，SHL2/SZ有值。</li><li>ma_bid_price，加权平均委买价格，SHL2/SZ有值。</li><li>ma_ask_price，加权平均委卖价格，SHL2/SZ有值。</li><li>ma_bond_bid_price，债券加权平均委买价格，SHL2有值。</li><li>ma_bond_ask_price，债券加权平均委卖价格，SHL2有值。</li><li>yield_to_maturity，债券到期收益率，SHL2有值。</li><li>iopv，基金实时参考净值，SH/SZ有值。</li><li>etf_buy_count，ETF申购笔数，SHL2有值。</li><li>etf_sell_count，ETF赎回笔数，SHL2有值。</li><li>etf_buy_qty，ETF申购数量，SHL2有值。</li><li>etf_buy_money，ETF申购数量，SHL2有值。</li><li>etf_sell_qty，ETF赎回数量，SHL2有值。</li><li>etf_sell_money，ETF赎回金额，SHL2有值。</li><li>total_warrant_exec_qty，权证执行的总数量，SHL2有值。</li><li>warrant_lower_price，权证跌停价格，SHL2有值。</li><li>warrant_upper_price，权证涨停价格，SHL2有值。</li><li>cancel_buy_count，买入撤单笔数，SHL2有值。</li><li>cancel_sell_count，卖出撤单笔数，SHL2有值。</li><li>cancel_buy_qty，买入撤单数量，SHL2有值。</li><li>cancel_sell_qty，卖出撤单数量，SHL2有值。</li><li>cancel_buy_money，买入撤单金额，SHL2有值。</li><li>cancel_sell_money，卖出撤单金额，SHL2有值。</li><li>total_buy_count，买入总笔数，SHL2有值。</li><li>total_sell_count，卖出总笔数，SHL2有值。</li><li>duration_after_buy，买入委托成交最大等待时间，SHL2有值。</li><li>duration_after_sell，卖出委托成交最大等待时间，SHL2有值。</li><li>num_bid_orders，买方委托价位数，SHL2有值。</li><li>num_ask_orders，卖方委托价位数，SHL2有值。</li><li>pre_iopv，基金T-1日净值。SZ有值。</li></ul></li></ul><br>",20),A=t("<p>期权的价格精度为0.0001元<br> data_type_v2 = XTP_MARKETDATA_V2_OPTION；</p><ul><li>exchange_id，交易所ID，枚举值</li><li>ticker，股票代码，8位</li><li>last_price，最新成交价</li><li>pre_close_price，昨日收盘价 <ul><li>SH mktdt数据源，在行情文件中不提供，初始化时从reff03MMDD.txt取；</li><li>SH LDDS数据源，在流式行情中提供该字段(PrevClosePx)；</li><li>SZ 数据源，在流式行情中提供该字段(PrevClosePx).</li></ul></li><li>open_price，今开</li><li>high_price，当日最高价</li><li>low_price，当日最低价</li><li>close_price，今收价，SH mktdt总为0。SH LDDS大于0该值有效（观察到盘中为0，收盘后大于0）。SZ 该值总等于last_price。</li><li>pre_total_long_positon，SH和SZ市场，该值总为0</li><li>total_long_positon，未平仓合约数量（张或股）</li><li>pre_settl_price，昨日结算价</li><li>settl_price，今日结算价，SH mktdt该值为0，SH LDDS数据源有值；SZ数据源该值为0</li><li>upper_limit_price/lower_limit_price，涨/跌停价。SH来源于初始化文件（上交所没有实时给出该值）。</li><li>data_time <ul><li>SH mktdt数据源，取自每行的时戳（观察到为上交所最近一次的成交时间，若委托发生变化，该值不变）</li><li>SH LDDS数据源，取自FAST层最里面的时戳（观察到为上交所最近一次的成交时间，若委托发生变化，该值不变）</li></ul></li><li>qty，当日累计成交量</li><li>turnover，当日累计成交金额</li><li>avg_price，均价，计算方法为turnover/qty，无意义</li><li>bid[10]/ask[10]，买/卖价，SH/SZ均只有5档</li><li>bid_qty[10]/ask_qty[10]，买卖量，SH/SZ均只有5档</li><li>trades_count，成交笔数，SH mktdt数据源为0，SH LDDS数据源有值</li><li>ticker_status，当前交易状态及标志，8字节</li></ul><p><strong>上交所标志含义</strong></p><p>第 0 位：</p><ul><li>‘S’，启动（开市前）阶段</li><li>‘C’，集合竞价</li><li>‘T’，连续交易</li><li>‘B’，休市</li><li>‘E’，闭市</li><li>‘V’，波动性中断</li><li>‘P’，临时停牌</li><li>‘U’，收盘集合竞价</li><li>‘M’，可恢复交易的熔断（盘中集合竞价）</li><li>‘N’，不可恢复交易的熔断（暂停交易至闭市）</li></ul><p>第 1 位：</p><ul><li>‘0’，未连续停牌</li><li>‘1’，连续停牌</li><li>预留则填空格</li></ul><p>第 2 位：</p><ul><li>‘0’，不限制开仓</li><li>‘1’，限制备兑开仓</li><li>‘2’，卖出开仓</li><li>‘3’，限制卖出开仓、备兑开仓</li><li>‘4’，限制买入开仓</li><li>‘5’，限制买入开仓、备兑开仓</li><li>‘6’，限制买入开仓、卖出开仓</li><li>‘7’，限制买入开仓、卖出开仓、备兑开仓</li></ul><p>第 3 位：</p><ul><li>‘0’，此产品在当前时段不接受进行新订单申报</li><li>‘1’，此产品在当前时段可接受进行新订单申报</li></ul><p><strong>深交所标志含义</strong></p><p>同股票字段说明</p><ul><li>data_type，期权为1</li><li>opt，期权扩展字段（仅SH市场有意义，SZ市场值均无意义） <ul><li>auction_price，波段性中断参考价</li><li>auction_qty，波段性中断集合竞价虚拟匹配量</li><li>last_enquiry_time，最近询价时间，格式为YYYYMMDDHHMMSSsss，若无询价时，HHMMSSsss部分为0。总为0。</li></ul></li></ul><br>",15),D=n("p",null,[s("data_type_v2 = XTP_MARKETDATA_V2_BOND；"),n("br"),s(" 从2021.10.25后，上交所启用新的债券交易系统，修改了债券行情的协议。"),n("br"),s(" 上交所L1时，ticker_status有值；"),n("br"),s(" 上交所L2时，ticker_status无意义；bond.instrument_status有值；"),n("br"),s(" 深交所L1/L2时，ticker_status有值。"),n("br"),s(" SHL2的债券的加权平均价，要用ma_bond_bid_price和ma_bond_ask_price。 "),n("br"),s(" SZ的债券加权平均价，则用ma_bid_price和ma_ask_price。 "),n("br")],-1),q=n("br",null,null,-1),f=t('<p>A. 实时行情字段说明<br> 快照行情发布使用和沪深一样的结构体(XTPMarketDataStruct)中的一部分字段，如下所示：</p><ul><li>exchange_id，交易所 ID，枚举值：XTP_EXCHANGE_NQ</li><li>ticker，股票代码，6 位</li><li>last_price，最新</li><li>pre_close_price，昨收</li><li>open_price，今开</li><li>high_price，最高</li><li>low_price，最低</li><li>close_price，今收盘</li><li>total_long_position，持仓量</li><li>data_time，DBF 行情，取的是 DBF 文件更新时间</li><li>qty，成交量</li><li>turnover，成交额</li><li>bid[10]/ask[10]，买/卖价 <ul><li>北交所数据源，只显示 5 档。</li><li>单位元。</li></ul></li><li>bid_qty[10]/ask_qty[10]，买/卖量 <ul><li>北交所数据源，只显示 5 档。</li><li>单位股。</li></ul></li></ul><p>其余字段北交所快照均未使用。</p><p>B. 请求接口XTPQuoteNQFullInfo静态数据字段说明：</p><ul><li>“layer_type” 分层信息：用于过滤北交所的证券代码，layer_type为2时，是北交所证券，其中有一个指数899050是北证50指数，交易所给的layer_type是8，若需要指数，需按照代码过滤899050。 <ul><li>2 - 北交所</li><li>1 - 创新层</li><li>0 - 基础层</li><li>8 - 其他</li></ul></li><li>“security_type” 合约详细类型，目前该字段没有定义，取值是255-其他。</li></ul><p>若需要判断证券类型，请根据交易所证券代码前三位字符进行判断：</p><table><thead><tr><th style="text-align:center;">类型\\合约代码</th><th style="text-align:center;">第一位</th><th style="text-align:center;">第一位</th><th style="text-align:center;">第三位</th></tr></thead><tbody><tr><td style="text-align:center;">现货</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">8</td><td style="text-align:center;">3</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">8</td><td style="text-align:center;">7</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">指数</td><td style="text-align:center;">8</td><td style="text-align:center;">9</td><td style="text-align:center;">9</td></tr></tbody></table><p>注意：目前北交所上线的证券只有现货股票和一个指数899050。<br></p><br>',9),x=t(`<p>L1没有委托队列，L2有委托队列。<br> 在订阅行情快照后，若有行情数据推过来，OnDepthMarketData函数就会被回调。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///深度行情通知，包含买一卖一队列</span>
<span class="token comment">///@param market_data 行情数据</span>
<span class="token comment">///@param bid1_qty 买一队列数据</span>
<span class="token comment">///@param bid1_count 买一队列的有效委托笔数</span>
<span class="token comment">///@param max_bid1_count 买一队列总委托笔数</span>
<span class="token comment">///@param ask1_qty 卖一队列数据</span>
<span class="token comment">///@param ask1_count 卖一队列的有效委托笔数</span>
<span class="token comment">///@param max_ask1_count 卖一队列总委托笔数</span>
<span class="token comment">///@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="avatar" tabindex="0" loading="lazy"><figcaption>avatar</figcaption></figure><h3 id="_2、逐笔-xtptbt-赋值字段及含义" tabindex="-1"><a class="header-anchor" href="#_2、逐笔-xtptbt-赋值字段及含义"><span>2、逐笔（XTPTBT）赋值字段及含义</span></a></h3><br>',5),B=t("<p>深交所只有逐笔委托和逐笔成交，没有逐笔状态。<br></p><ul><li>exchange_id，交易所ID</li><li>ticker，股票代码，6字节</li><li>seq，无意义，预留</li><li>data_time，委托时间或成交时间，格式YYYYMMDDHHMMSSsss</li><li>type，委托或成交标识</li><li>entrust，逐笔委托 <ul><li>channel_no，频道代码</li><li>seq，在该channel_no内的委托序号</li><li>price，委托价格</li><li>qty，委托数量</li><li>side，买卖方向。&#39;1&#39;:买; &#39;2&#39;:卖; &#39;G&#39;:借入; &#39;F&#39;:出借。</li><li>ord_type，订单类别。&#39;1&#39;: 市价; &#39;2&#39;: 限价; &#39;U&#39;: 本方最优。注：交易所没有给出转限、转撤等更加详细的信息</li></ul></li><li>trade，逐笔成交 <ul><li>channel_no，频道代码</li><li>seq，在该channel_no内的成交序号</li><li>price，成交价格</li><li>qty，成交数量</li><li>money，成交金额，无意义</li><li>bid_no，买方订单号，可以追溯到entrust中的seq</li><li>ask_no，卖方订单号，可以追溯到entrust中的seq</li><li>trade_flag，成交标志。SZL2，成交标识（&#39;4&#39;:撤; &#39;F&#39;:成交）</li></ul></li></ul><br>",3),L=t("<p>跟深交所相比，上交所增加了逐笔状态消息。<br></p><ul><li>exchange_id，交易所ID</li><li>ticker，股票代码，6字节</li><li>seq，对应上交所bizIndex字段，在同一个channel内唯一</li><li>data_time，委托时间或成交时间，格式YYYYMMDDHHMMSSsss</li><li>type，委托或成交标识</li><li>entrust，逐笔委托 <ul><li>channel_no，频道代码</li><li>seq，在该channel_no内的委托序号，单调递增</li><li>price，委托价格</li><li>qty，委托数量</li><li>side，买卖方向。&#39;B&#39;:买; &#39;S&#39;:卖</li><li>ord_type，订单类别。&#39;A&#39;:增加; &#39;D&#39;:删除</li><li>order_no，原始订单编号</li></ul></li><li>trade，逐笔成交 <ul><li>channel_no，频道代码</li><li>seq，在该channel_no内的成交序号，单调递增</li><li>price，成交价格</li><li>qty，成交数量</li><li>money，成交金额，SHL2有该值，SZL2没有该值（总为0）</li><li>bid_no，买方订单号，可以追溯到entrust中的order_no</li><li>ask_no，卖方订单号，可以追溯到entrust中的order_no</li><li>trade_flag，成交标志。SHL2，内外盘标识（&#39;B&#39;:主动买; &#39;S&#39;:主动卖; &#39;N&#39;:未知）</li></ul></li><li>state，状态订单 <ul><li>channel_no，频道代码</li><li>seq，在该channel_no内的序号，单调递增</li><li>flag，状态</li></ul></li></ul><br>",3),M=n("p",null,[s("SHL1、SZL1没有逐笔。"),n("br"),s(" SHL2的撤单信息在逐笔委托中(order_type=’D’)；SZL2的撤单信息在逐笔成交中（trade_flag=’4’）。"),n("br"),s(" channel_no，频道代码。同一只股票的逐笔委托和逐笔成交行情数据中，channel_no都相同。不同股票的逐笔委托和逐笔成交，channel_no可能不同。同一个channel_no会有多只股票的逐笔委托和逐笔成交数据。"),n("br"),s(" SZL2的逐笔委托和逐笔成交，放到一起编号。可通过逐笔成交里的订单号（bid_no或ask_no）追溯到对应的委托逐笔（XTPTickByTickEntrust.seq）。"),n("br"),s(" SHL2的逐笔委托&逐笔成交&逐笔状态，放到一起编号。可通过逐笔成交里的订单号（bid_no或ask_no）追溯到对应的委托逐笔（XTPTickByTickEntrust.order_no）。"),n("br"),s(" 注意："),n("br"),s(" 上交所逐笔委托和成交消息合并之前，SHL2股票/基金，逐笔委托单独编号（entrust.seq），逐笔成交单独编号（trade.seq）。逐笔委托&逐笔成交一起有编号（tbt.seq）。"),n("br")],-1),w=n("br",null,null,-1),H=n("br",null,null,-1),Y=n("br",null,null,-1),C=n("br",null,null,-1),X=n("br",null,null,-1),I=n("h3",{id:"_3、订单薄-xtpob-赋值字段及含义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、订单薄-xtpob-赋值字段及含义"},[n("span",null,"3、订单薄（XTPOB）赋值字段及含义")])],-1),O=n("br",null,null,-1),Z=t("<ul><li>exchange_id，交易所ID</li><li>ticker，股票代码</li><li>last_price，最近成交价</li><li>qty，成交总量</li><li>turnover，成交总金额</li><li>trades_count，成交笔数</li><li>bid[10]/ask[10]，十档买/卖价</li><li>bid_qty[10]/ask_qty[10]，十档买/卖量</li><li>data_time，最近成交时间，格式YYYYMMDDHHMMSSsss</li></ul><br>",2),F=n("br",null,null,-1),N=n("br",null,null,-1),U=n("br",null,null,-1),R=n("br",null,null,-1),Q=n("figure",null,[n("img",{src:p,alt:"avatar",tabindex:"0",loading:"lazy"}),n("figcaption",null,"avatar")],-1),G=n("br",null,null,-1),K=n("br",null,null,-1),z=n("br",null,null,-1),W=n("br",null,null,-1),V=n("br",null,null,-1),j=n("h2",{id:"四、faq",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、faq"},[n("span",null,"四、FAQ")])],-1),J=n("h3",{id:"_1、公网测试环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、公网测试环境"},[n("span",null,"1、公网测试环境")])],-1),$=n("br",null,null,-1),nn=n("br",null,null,-1),sn=n("br",null,null,-1),tn=n("br",null,null,-1),an=n("br",null,null,-1),en=n("br",null,null,-1),ln=n("br",null,null,-1),on=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token string">&quot;quote_ip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;120.27.164.138&quot;</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_port&quot;</span><span class="token operator">:</span> <span class="token number">6002</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_user&quot;</span><span class="token operator">:</span> <span class="token string">&quot;quoteusername&quot;</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;quotepw&quot;</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_ticker&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token string">&quot;instrument&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;600120&quot;</span>
 <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">&quot;exchange&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token string">&quot;hb_interval&quot;</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_buffer_size&quot;</span><span class="token operator">:</span><span class="token number">128</span><span class="token punctuation">,</span>
<span class="token string">&quot;quote_protocol&quot;</span><span class="token operator">:</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,2),pn=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>LOGIN<span class="token punctuation">]</span>
MdProtocal<span class="token operator">=</span>TCP
XTPLogLevel<span class="token operator">=</span><span class="token number">4</span>
GWName<span class="token operator">=</span>上海网关<span class="token punctuation">,</span> 深圳网关
GWIP<span class="token operator">=</span><span class="token number">59.36</span><span class="token punctuation">.</span><span class="token number">23.196</span><span class="token punctuation">,</span> <span class="token number">59.36</span><span class="token punctuation">.</span><span class="token number">23.196</span>
GWPort<span class="token operator">=</span><span class="token number">8016</span><span class="token punctuation">,</span> <span class="token number">8017</span>
QuoteIP<span class="token operator">=</span><span class="token number">119.3</span><span class="token punctuation">.</span><span class="token number">103.38</span>
QuotePort<span class="token operator">=</span><span class="token number">6002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,2),rn=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///用户登录请求</span>
<span class="token comment">///@return 登录是否成功，“0”表示登录成功，“-1”表示连接服务器出错，此时用户可以调用GetApiLastError()来获取错误代码，“-2”表示已存在连接，不允许重复登录，如果需要重连，请先logout，“-3”表示输入有错误</span>
<span class="token comment">///@param ip 服务器ip地址，类似“127.0.0.1”</span>
<span class="token comment">///@param port 服务器端口号</span>
<span class="token comment">///@param user 登陆用户名</span>
<span class="token comment">///@param password 登陆密码</span>
<span class="token comment">///@param sock_type “1”代表TCP，“2”代表UDP</span>
<span class="token comment">///@param local_ip 本地网卡地址，类似“127.0.0.1”</span>
<span class="token comment">///@remark 此函数为同步阻塞式，不需要异步等待登录成功，当函数返回即可进行后续操作，此api只能有一个连接</span>
<span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> user<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> password<span class="token punctuation">,</span> XTP_PROTOCOL_TYPE sock_type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> local_ip <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>(4) TCP推送方式及问题排查 <br> TCP模式下，若用户收不到行情数据，请按以下方式排查。<br> (1) 启动API。<br> (2) 确保Login的sock_type参数使用的是XTP_PROTOCOL_TCP。<br> (3) 订阅股票，确保回调函数OnSubMarketData返回成功。<br> (4) 若还没有收到数据（OnDepthMarketData没有被回调），请使用抓包工具(如wireshark，tcpdump)，看看数据有没有到达API所在的机器。<br> (5) tcpdump -i 网卡 tcp port 端口号（如 tcpdump -i p5p2 tcp port 6666），看看行情数据有没有到达主机.<br><br></p><h3 id="_2、生产环境" tabindex="-1"><a class="header-anchor" href="#_2、生产环境"><span>2、生产环境</span></a></h3><br>`,5),cn=n("br",null,null,-1),dn=n("br",null,null,-1),un=n("br",null,null,-1),_n=n("br",null,null,-1),kn=n("br",null,null,-1),mn=n("br",null,null,-1),bn=n("br",null,null,-1),hn=n("br",null,null,-1),vn=n("br",null,null,-1),En=n("br",null,null,-1),yn=n("br",null,null,-1),Tn=n("br",null,null,-1),gn=n("br",null,null,-1),Sn=n("br",null,null,-1),Pn=n("br",null,null,-1),An=n("br",null,null,-1),Dn=n("br",null,null,-1),qn=n("br",null,null,-1),fn=n("br",null,null,-1),xn=n("br",null,null,-1),Bn=n("br",null,null,-1),Ln=n("br",null,null,-1),Mn=n("br",null,null,-1),wn=n("br",null,null,-1),Hn=n("br",null,null,-1),Yn=n("h3",{id:"_3、udp-组播-推送方式及问题排查",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、udp-组播-推送方式及问题排查"},[n("span",null,"3、UDP（组播）推送方式及问题排查")])],-1),Cn=n("br",null,null,-1),Xn=n("br",null,null,-1),In=n("br",null,null,-1),On=n("br",null,null,-1),Zn=n("br",null,null,-1),Fn=n("br",null,null,-1),Nn=t('<br><p><img src="'+r+'" alt="avatar" loading="lazy"><br></p><p>(6) tcpdump -i 网卡 udp port 端口号（如 tcpdump -i p5p2 udp port 17778），看看组播数据有没有到达主机。<br> (7) 若没有抓到行情组播数据，请调整系统参数。<br></p><p><strong>windows系统：</strong></p><ul><li>打开注册表编辑器regedit，<br> 路径：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Tcpip\\Parameters，在该路径下新建两个DWORD变量，一个命名为IGMPVersion，<br> 值设定为3，第二个命名为IGMPLevel，值设定为2。<br> 路径： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Afd\\Parameters，增加DefaultReceiveWindow字段，DWORD 类型，大小设置为 134217728(128M)。<br></li><li>卸掉杀毒软件（或者杀毒软件放行组播数据）。<br></li><li>重启系统。 <br></li><li>关掉防火墙（或允许组播使用的端口通过）<br></li></ul><br><p><strong>linux系统：</strong></p><ul><li>确保组播地址绑定到了正确的网卡上，netstat -gn；<br></li></ul><p><img src="'+c+`" alt="avatar" loading="lazy"><br></p><ul><li><p>关掉防火墙（或允许组播使用的端口通过）：systemctl stop firewalld.service。</p></li><li><p>下面命令是临时的，操作系统重启后会失效。需要写在操作系统的启动脚本中。<br> sysctl -w net.core.rmem_default=&quot;134217728&quot;<br> sysctl -w net.core.rmem_max=&quot;134217728&quot;<br> sysctl -w net.core.wmem_default=&quot;134217728&quot;<br> sysctl -w net.core.wmem_max=&quot;134217728&quot;<br> sysctl -w net.ipv4.udp_mem=&quot;134217728 134217728 268435456&quot;<br> sysctl -w net.ipv4.udp_rmem_min=&quot;134217728&quot;<br> sysctl -w net.ipv4.udp_wmem_min=&quot;134217728&quot;<br></p></li></ul><p>如果设置 net.ipv4.udp_mem 时报错：Invalid argument，那就去掉引号再试下，因为不同的系统略有区别。<br><br> (8) 若还不能收到数据，添加临时路由: route add -net 组播地址 掩码 dev 设备, (如route add -net 230.1.1.0/24 dev p5p2)<br> (9) Windows下用SmartX客户端（Windows/macOS），订阅一整天行情，看API的quote.log日志，看看有没有丢包；若丢包，需要查找原因。<br> (10) API若发生频繁丢包，调用SetUDPBufferSize函数，调整参数到256MB或512MB。<br></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">///设置采用UDP方式连接时的单个队列接收缓冲区大小，目前可能最大使用4个缓冲区队列</span>
<span class="token comment">///@remark 需要在Login之前调用，默认大小和最小设置均为64MB。此缓存大小单位为MB，请输入2的次方数，例如128MB请输入128。</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> buff_size<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>(11) API的默认日志级别是DEBUG，需要调整到INFO（或ERROR），否则可能会导致丢包。CreateQuoteApi的log_level参数。<br><br></p><h3 id="_4、行情数据更新频率" tabindex="-1"><a class="header-anchor" href="#_4、行情数据更新频率"><span>4、行情数据更新频率</span></a></h3><br>`,16),Un=t("<br><table><thead><tr><th>种类</th><th>集合竞价</th><th>连续竞价</th><th>午间休市</th></tr></thead><tbody><tr><td>SH指数</td><td>约5秒一次 （不准）</td><td>约5秒一次（不准）</td><td>60秒推一次 L2时间戳跟着变 （201901后，不准）</td></tr><tr><td>SH股票</td><td>有变化3秒一次 无变化60秒一次</td><td>有变化3秒一次 无变化60秒一次</td><td>60秒推一次 L2时间戳跟着变 （201901后）</td></tr><tr><td>SH期权</td><td>有变化15秒一次 无变化30秒一次</td><td>有变化0.5秒一次 无变化30秒一次</td><td>30秒一次</td></tr><tr><td>SZ指数</td><td>60秒一次</td><td>3秒一次</td><td>60秒推一次 时间戳跟着变</td></tr><tr><td>SZ股票</td><td>60秒一次</td><td>有变化3秒一次 无变化60秒一次</td><td>60秒推一次 时间戳跟着变</td></tr><tr><td>SZ期权</td><td>6秒一次</td><td>有变化0.5秒一次 无变化60秒一次</td><td>6秒一次</td></tr><tr><td>NQEX</td><td>有变化3秒一次 无变化60秒一次</td><td>有变化3秒一次 无变化60秒一次</td><td>60秒一次 时间戳跟着变</td></tr></tbody></table><br><table><thead><tr><th>种类</th><th>集合竞价/连续竞价/午间休市</th></tr></thead><tbody><tr><td>SH逐笔委托</td><td>9:15-9:25，可以下单，但交易所不推逐笔委托 9:25，开始推送逐笔委托 9:25-9:30，无数据（开盘集合竞价结束到连续竞价开始前） 9:30，开始推（连续竞价）</td></tr><tr><td>SH逐笔成交</td><td>9:25，有大量逐笔成交（集合竞价） 9:25-9:30，无数据（开盘集合竞价结束到连续竞价开始前） 9:30，开始推（连续竞价）</td></tr><tr><td>SH盘后固定价格（快照）</td><td>参与盘后固定价格交易的股票，15:00开始发布 15:00 - 15:05，集中撮合 15:05 - 15:30，连续交易 15:30后，闭市</td></tr><tr><td>SZ逐笔委托</td><td>9:15-9:25，推逐笔委托(期间可以下单，可以撤单） 9:25-9:30，无数据（开盘集合竞价结束到连续竞价开始前） 9:30，开始推（连续竞价）</td></tr><tr><td>SZ逐笔成交</td><td>9:15-9:25，只有逐笔撤单，无逐笔成交单 9:25，有大量逐笔成交（集合竞价）9:25-9:30，无数据（开盘集合竞价结束到连续竞价开始前）9:30，开始推（连续竞价）</td></tr></tbody></table><br>",5),Rn=n("br",null,null,-1),Qn=n("br",null,null,-1),Gn=n("h3",{id:"_5、丢包问题api日志排查",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5、丢包问题api日志排查"},[n("span",null,"5、丢包问题API日志排查")])],-1),Kn=n("br",null,null,-1),zn=n("br",null,null,-1),Wn=n("br",null,null,-1),Vn=n("br",null,null,-1),jn=n("br",null,null,-1),Jn=n("br",null,null,-1),$n=n("br",null,null,-1),ns=n("br",null,null,-1),ss=n("br",null,null,-1),ts=n("br",null,null,-1),as=n("br",null,null,-1),es=n("br",null,null,-1),ls=n("br",null,null,-1),is=n("br",null,null,-1),os=n("br",null,null,-1),ps=n("br",null,null,-1),rs=n("br",null,null,-1),cs=n("br",null,null,-1),ds=n("br",null,null,-1),us=t('<br><br><h3 id="_6、对seq-is-discrete-n-to-m的解释" tabindex="-1"><a class="header-anchor" href="#_6、对seq-is-discrete-n-to-m的解释"><span>6、对seq is discrete N to M的解释</span></a></h3><br><p>组播（UDP）推送行情模式下。<br> 行情服务器启动后，若有数据需要推送，就会往外推数据（组播）。UDP包，是统一连续编号的。<br> 若API启动前行情服务器已经往外推送了组播数据，API就会打印一条WARNIG日志。</p><figure><img src="'+d+'" alt="avatar" tabindex="0" loading="lazy"><figcaption>avatar</figcaption></figure><br><p>上面的日志表明，丢失了逐笔数据（discrete 1-7516）。这种情况可以忽略，因为订阅晚了，交易所已经推送的包肯定是丢掉的。<br> 但若在收行情的过程中，发现大量下图所示的日志，需要查找问题。</p><figure><img src="'+u+'" alt="avatar" tabindex="0" loading="lazy"><figcaption>avatar</figcaption></figure><br><p>如果quote.log没有discrete关键字，可查看udpseq异步日志，判断seq行数跟seq最大值和最小值的差值是否一致，如果一致，就没有丢包。<br></p><p>普通股票的MarketData查看udpseq0_0.YYYYMMDD文件，TickByTick查看udpseq0_2.YYYYMMDD，OrderBook查看udpseq0_1.YYYYMMDD。<br></p><p>另外，快照数据MarketData、逐笔数据TickByTick、订单薄数据OrderBook，是分开编号的。<br></p><p>对日志”Tick by tick udp seq XXX is time out, discrete xxx-xxx”的解释：<br> 行情服务器会对发出去的每个udp包按顺序编号（行情快照、逐笔、订单薄各自独立编号）。以逐笔行情(TickByTick)为例，API正常收到包的顺序应该为1,2,3,4,5，但若API收到1,2,3,然后收到5，就会去等4的包。若在一段时间内，API还没有收到4的包，就会打印上面的日志。并认为4丢掉了。<br></p><p>若发现丢包较多，可以把UDP的接收缓存开大点，内核参数从128MB增大到256MB。</p><br>',16),_s=n("br",null,null,-1),ks=n("br",null,null,-1),ms=n("br",null,null,-1),bs=n("br",null,null,-1),hs=n("br",null,null,-1),vs=n("h3",{id:"_7、其它问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7、其它问题"},[n("span",null,"7、其它问题")])],-1),Es=n("br",null,null,-1),ys=n("br",null,null,-1),Ts=n("br",null,null,-1),gs=n("br",null,null,-1),Ss=n("br",null,null,-1),Ps=n("br",null,null,-1),As=n("br",null,null,-1),Ds=n("br",null,null,-1),qs=n("br",null,null,-1),fs=n("br",null,null,-1),xs=n("br",null,null,-1);function Bs(Ls,Ms){return l(),i("div",null,[k,a(" TOC "),m,a(" /TOC "),b,s(" （1）API使用Login函数进行登陆。Login函数的sock_type参数，决定了API 接收更新数据的方式。请务必与行情服务器一致，否则会收不到行情更新数据。 "),h,s(" （2）API日志级别 "),v,s(" （3）一个账号在多个客户端登陆 "),E,y,T,s(" (1)查询可交易合约信息 "),g,s(" (2)查询最新价接口 "),S,s(" （2）股票/基金字段说明 "),P,s(" （3）期权字段说明 "),A,s(" （4）债券字段说明 "),D,q,s(" （5）北交所字段说明 "),f,s(" （6）买一卖一委托队列字段及含义 "),x,s(" (1) 深交所逐笔 "),B,s(" (2) 上交所逐笔 "),L,s(" (3) 对数据的解释 "),M,w,s(" 期权无逐笔数据。"),H,Y,s(" SH现有逐笔channel：[1, 6] [20] [103][801] （共9个，20为B股，103为盘后固定价格交易，801为债券）"),C,s(" SZ现有逐笔channel：[2011, 2014] [2021, 2024] [2031, 2034] [2061][2071] （共14个，2061为国债逆回购，2071为债券）"),X,I,O,s(" (1) 结构字段说明 "),Z,s(" (2) 对数据的解释 "),F,s(" 订单薄，是根据交易所的逐笔委托和逐笔成交数据重建的。"),N,s(" 在集合竞价阶段（包括开盘和收盘），不推送该数据，这个时间段的行情快照，可以从XTPMD结构中获取。"),U,s(" 没有推送间隔限制，跟逐笔一样实时推送 使用该数据的用户，应该与行情快照（XTPMD）结合起来使用。最新的时间戳，便是最新的数据。"),R,Q,G,s(" 深交所债券："),K,s(" 债券上市首日开盘集合竞价的有效竞价范围为发行价的上下30%，连续竞价、收盘集合竞价的有效竞价范围为最近成交价的上下10%；"),z,s(" 债券非上市首日开盘集合竞价的有效竞价范围为前收盘价的上下10%，连续竞价、收盘集合竞价的有效竞价范围为最近成交价的上下 10%。"),W,V,j,J,$,s(" 公网测试环境是为了方便测试，在公网上搭建的一套测试环境。7*24小时提供行情服务。"),nn,s(" 公网测试环境仅供客户调试API接口，提供的L2测试数据包括：10档价/量、买一卖一委托队列、逐笔委托、逐笔成交，但是没有订单薄OB行情。"),sn,s(" 在公网测试环境，不建议全订阅。因为带宽有限。"),tn,s(" 所有用户在上实盘前，请务必在实盘上先做行情接入测试。"),an,s(" 公网测试环境，使用TCP的方式推送数据。在该环境下测试时，API和客户端需要配置成TCP的方式接收行情，否则会收不到行情的更新数据。"),en,ln,s(" (1) 若使用XTP官网上的测试用例，请按下图方式进行配置 "),on,s(" (2) 若使用XTP客户端，请按下图进行配置 "),pn,s(" (3) 若使用API，请按下图方式进行配置 "),rn,s(" XTP在每个机房，都部署有L1行情服务器和L2行情服务器，均使用UDP方式对外推送行情。客户请勿跨机房连接行情服务器。"),cn,s(" L1，只提供5档快照。"),dn,s(" L2，提供10档快照、买一卖一委托队列、逐笔。"),un,s(" 另外，在每个机房部署有OB服务器（不跨机房提供）。"),_n,s(" 期权(SH/SZ)，无论哪个环境，交易所只提供5档快照，不提供逐笔。"),kn,mn,s(" 买一卖一委托队列，跟行情快照是同时发过来的。"),bn,s(" SHL2的逐笔数据，在开盘时间段，延时比较大。"),hn,s(" SZL2的逐笔数据，深交所一般是实时发过来的。即交易下单后，行情马上可以看到逐笔委托。"),vn,s(" 每条行情快照加上买一卖一委托队列的大小为，约为1.5KB（按最大算）。"),En,s(" 每条逐笔的大小约为112B。"),yn,s(" 在数据高峰时期（9:15,9:30,13:00,15:00），数据量非常大，约20W笔／秒。推送的带宽约为22MB／秒。"),Tn,gn,s(" 请不要阻塞API行情接收线程。"),Sn,s(" 若API使用TCP方式收行情数据：API接收线程收数据慢，行情服务器会断开与API的连接。"),Pn,s(" 若API使用组播(UDP)方式收行情数据（生产L2）：API接收线程收数据慢（接收线程阻塞，或者在接收线程处理完数据后再接收下一条数据），可能会丢数据。"),An,s(" 为了避免丢数据的问题发生，建议用“生产者／消费者”的模式来处理行情数据。接收线程只管收数据，另启动一个线程处理数据。"),Dn,s(" 提示：测试发现，格式化类的操作（如snprintf, printf）比较耗时，请勿在接收线程中使用。"),qn,fn,s(" 用组播时，还需要确保API所在的机器，能够收到组播数据。防火墙开启时，组播数据可能会被过滤掉。请关闭防火墙，或允许行情的组播数据通过防火墙。 "),xn,s(" 行情服务器一般在8:30至8:45就绪，交易所从9：15开始集合竞价。但在集合竞价前，交易所会发一些数据（只有行情快照，是为了测试），我们也会把这些数据发给用户。这些数据属于盘前数据。"),Bn,s(" 假如API在9:10启动，可能会丢失一部分盘前数据（API日志中会提示WARNING），这个是没有关系的。"),Ln,s(" 但若在盘中有大量提示丢数据的日志，需要查找原因。"),Mn,s(" 所有用户在上实盘前，请务必在实盘做行情接入测试。"),wn,Hn,Yn,Cn,s(" 生产环境Level-2、Level-1行情数据，都是通过组播的方式推送给API的，请使用UDP连接，请关闭防火墙。有些机器收不到组播数据，请按照以下步骤排查。"),Xn,s(" (1) 启动API。"),In,s(" (2) 确保Login的sock_type参数使用的是XTP_PROTOCOL_UDP。"),On,s(" (3) 订阅股票，确保回调函数OnSubMarketData返回成功。"),Zn,s(" (4) 进行socket参数优化，可登录xms至公共信息里查看优化说明。"),Fn,s(" (5) 若还没有收到数据（OnDepthMarketData没有被回调），请使用抓包工具(如wireshark，tcpdump)，看看组播数据有没有到达API所在的机器。组播的地址与端口，请查看API的日志，也可以与XTP运维人员联系。"),Nn,s(" 逐笔和订单簿行情是实时更新的，快照行情更新频率如下： "),Un,s(" SH和SZ均无期权的逐笔"),Rn,Qn,Gn,Kn,s(" udpseq0_0.YYYYMMDD 是普通股票的MarketData的Seq"),zn,s(" udpseq0_1.YYYYMMDD 是普通股票的OrderBook的Seq"),Wn,s(" udpseq0_2.YYYYMMDD 是普通股票的TickByTick的Seq"),Vn,jn,s(" udpseq1_0.YYYYMMDD 是期权的MarketData的Seq"),Jn,s(" udpseq1_1.YYYYMMDD 是期权的OrderBook的Seq"),$n,s(" udpseq1_2.YYYYMMDD 是期权的TickByTick的Seq"),ns,ss,s(" udpseq2_0.YYYYMMDD 是新三板股票的MarketData的seq"),ts,as,s(" udpseq3_0.YYYYMMDD 是接收buffer满的时候的错误代码"),es,s(" udpseq3_1.YYYYMMDD 是普通股票和期权TickByTick的来晚了、需要丢弃的Seq"),ls,s(" udpseq3_2.YYYYMMDD 是普通股票和期权TickByTick的乱序Seq"),is,os,s(" 如果tick丢包的话，quote.log.YYYYMMDD里会有discrete提示日志"),ps,s(" 如果tick乱序，udpseq3_2.YYYYMMDD里会有seq"),rs,s(" 如果接收buffer满，udpseq3_0.YYYYMMDD里会有错误码"),cs,s(" 看marketdata丢不丢包，可以看udpseq0_0.YYYYMMDD是否seq丢失（seq乱序没关系）"),ds,s(" 看OrderBook丢不丢包，可以看udpseq0_1.YYYYMMDD是否seq丢失（seq乱序没关系）"),us,s(" **Windows:** "),_s,s(" 打开注册表的 “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Afd\\Parameters”选项，增加“DefaultReceiveWindow”字段，DWORD类型，大小设置为113246208(128M)。"),ks,ms,s(" 发送端（行情服务器），可以增加“DefaultSendWindow”字段，DWORD类型，大小设置为113246208(128M)。"),bs,hs,vs,Es,s(" （1） SHL2的最新价和收盘价，分别是怎么计算得到的。发现收盘后，有些股票的收盘价和最新价不相同。"),ys,s(" - 最新价 = 最新一支逐笔成交的价格"),Ts,s(" - 收盘价 = 证券的收盘价为当日该证券最后一笔交易前一分钟所有交易的成交量加权平均价（含最后一笔交易）。当日无成交的，以前收盘价为当日收盘价。"),gs,s(" - 债券质押式回购的收盘价为当日该证券最后一笔交易前一小时所有交易的成交量加权平均价（含最后一笔交易）。当日无成交的，以前收盘价为当日收盘价。"),Ss,s(" - 收盘集合竞价阶段产生交易的，这两个价格相同；否则可能会不同。"),Ps,As,s(" （2）SHL1和SHL2每天的快照数量不一样。SHL1和SHL2分别在什么时候推出快照，所有档位，只要发生变化就推？"),Ds,s(" - SHL1，买卖 5档盘口发生变化时推。"),qs,s(" - SHL2，买卖10档盘口发生变化时推。"),fs,xs,s(" （3）SHL2逐笔提速后，逐笔实时发送，逐笔约有250ms时间间隔。 ")])}const Ys=e(_,[["render",Bs],["__file","XTP行情服务接入前指引文档.html.vue"]]),Cs=JSON.parse('{"path":"/docs/XTP%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5%E5%89%8D%E6%8C%87%E5%BC%95/XTP%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5%E5%89%8D%E6%8C%87%E5%BC%95%E6%96%87%E6%A1%A3.html","title":"XTP行情服务接入前指引","lang":"zh-CN","frontmatter":{"description":"XTP行情服务接入前指引 一、XTP行情接入要点概述 二、基础操作 1. 登录 2. 查询 3. 订阅 4. 推送 三、数据结构及字段含义 1. 行情快照（XTPMD）赋值字段及含义 2.逐笔（XTPTBT）赋值字段及含义 3.订单薄（XTPOB）赋值字段及含义 四、FAQ 1.公网测试环境 2.生产环境 3.UDP（组播）推送方式及问题排查 4. T...","head":[["meta",{"property":"og:url","content":"https://10000l.github.io/docs/XTP%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5%E5%89%8D%E6%8C%87%E5%BC%95/XTP%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5%E5%89%8D%E6%8C%87%E5%BC%95%E6%96%87%E6%A1%A3.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"XTP行情服务接入前指引"}],["meta",{"property":"og:description","content":"XTP行情服务接入前指引 一、XTP行情接入要点概述 二、基础操作 1. 登录 2. 查询 3. 订阅 4. 推送 三、数据结构及字段含义 1. 行情快照（XTPMD）赋值字段及含义 2.逐笔（XTPTBT）赋值字段及含义 3.订单薄（XTPOB）赋值字段及含义 四、FAQ 1.公网测试环境 2.生产环境 3.UDP（组播）推送方式及问题排查 4. T..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T15:52:56.000Z"}],["meta",{"property":"article:author","content":"xtp_master"}],["meta",{"property":"article:modified_time","content":"2024-06-03T15:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XTP行情服务接入前指引\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T15:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xtp_master\\",\\"url\\":\\"https://xtp.zts.com.cn\\"}]}"]]},"headers":[{"level":2,"title":"一、XTP行情接入要点概述","slug":"一、xtp行情接入要点概述","link":"#一、xtp行情接入要点概述","children":[]},{"level":2,"title":"二、基础操作","slug":"二、基础操作","link":"#二、基础操作","children":[{"level":3,"title":"1、登陆","slug":"_1、登陆","link":"#_1、登陆","children":[]},{"level":3,"title":"2、查询","slug":"_2、查询","link":"#_2、查询","children":[]},{"level":3,"title":"3、订阅","slug":"_3、订阅","link":"#_3、订阅","children":[]},{"level":3,"title":"4、推送","slug":"_4、推送","link":"#_4、推送","children":[]}]},{"level":2,"title":"三、数据结构及字段含义","slug":"三、数据结构及字段含义","link":"#三、数据结构及字段含义","children":[{"level":3,"title":"1、行情快照（XTPMD）赋值字段及含义","slug":"_1、行情快照-xtpmd-赋值字段及含义","link":"#_1、行情快照-xtpmd-赋值字段及含义","children":[]},{"level":3,"title":"2、逐笔（XTPTBT）赋值字段及含义","slug":"_2、逐笔-xtptbt-赋值字段及含义","link":"#_2、逐笔-xtptbt-赋值字段及含义","children":[]},{"level":3,"title":"3、订单薄（XTPOB）赋值字段及含义","slug":"_3、订单薄-xtpob-赋值字段及含义","link":"#_3、订单薄-xtpob-赋值字段及含义","children":[]}]},{"level":2,"title":"四、FAQ","slug":"四、faq","link":"#四、faq","children":[{"level":3,"title":"1、公网测试环境","slug":"_1、公网测试环境","link":"#_1、公网测试环境","children":[]},{"level":3,"title":"2、生产环境","slug":"_2、生产环境","link":"#_2、生产环境","children":[]},{"level":3,"title":"3、UDP（组播）推送方式及问题排查","slug":"_3、udp-组播-推送方式及问题排查","link":"#_3、udp-组播-推送方式及问题排查","children":[]},{"level":3,"title":"4、行情数据更新频率","slug":"_4、行情数据更新频率","link":"#_4、行情数据更新频率","children":[]},{"level":3,"title":"5、丢包问题API日志排查","slug":"_5、丢包问题api日志排查","link":"#_5、丢包问题api日志排查","children":[]},{"level":3,"title":"6、对seq is discrete N to M的解释","slug":"_6、对seq-is-discrete-n-to-m的解释","link":"#_6、对seq-is-discrete-n-to-m的解释","children":[]},{"level":3,"title":"7、其它问题","slug":"_7、其它问题","link":"#_7、其它问题","children":[]}]}],"git":{"createdTime":1717429976000,"updatedTime":1717429976000,"contributors":[{"name":"linxiaolx-lx","email":"1247776138@qq.com","commits":1}]},"readingTime":{"minutes":34.5,"words":10350},"filePathRelative":"docs/XTP行情服务接入前指引/XTP行情服务接入前指引文档.md","localizedDate":"2024年6月3日","autoDesc":true}');export{Ys as comp,Cs as data};
