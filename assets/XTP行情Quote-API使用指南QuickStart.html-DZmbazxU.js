import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as u,b as o,a as t,w as p,f as s,d as n,e}from"./app-C9BeCxEA.js";const r={},d=n("h1",{id:"xtp行情quote-api使用示例说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#xtp行情quote-api使用示例说明"},[n("span",null,[n("strong",null,"XTP行情Quote-API使用示例说明")])])],-1),k=e('<ul><li><a href="#%E4%B8%80-%E8%A1%8C%E6%83%85%E5%BA%93%E4%BB%8B%E7%BB%8D">一. 行情库介绍</a><ul><li><a href="#1-%E5%A4%B4%E6%96%87%E4%BB%B6">1. 头文件</a></li><li><a href="#2-%E5%BA%93%E6%96%87%E4%BB%B6">2. 库文件</a></li><li><a href="#3-%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E">3. 接口说明</a></li></ul></li><li><a href="#%E4%BA%8C-quick-start">二. Quick Start</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BAapi%E5%AE%9E%E4%BE%8B">1. 创建Api实例</a></li><li><a href="#2-%E5%88%9D%E5%A7%8B%E5%8C%96api%E5%8F%82%E6%95%B0">2. 初始化Api参数</a><ul><li><a href="#1%E8%AE%BE%E5%AE%9A%E5%BF%83%E8%B7%B3%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4">（1）设定心跳超时时间</a></li><li><a href="#2%E8%AE%BE%E5%AE%9Audp%E7%BC%93%E5%AD%98buffer">（2）设定UDP缓存buffer</a></li><li><a href="#3%E8%AE%BE%E5%AE%9Audp%E5%BC%82%E6%AD%A5%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97">（3）设定UDP异步输出日志</a></li></ul></li><li><a href="#3-%E5%88%9B%E5%BB%BAspi%E7%B1%BB">3. 创建Spi类</a><ul><li><a href="#1%E7%BB%A7%E6%89%BFxtpapiquotespi%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84spi%E7%B1%BBmyquotespi">（1）继承XTP::API::QuoteSpi，创建自己的Spi类MyQuoteSpi</a></li><li><a href="#2%E9%87%8D%E5%86%99%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%80%BB%E8%BE%91">（2）重写回调函数逻辑</a></li></ul></li><li><a href="#4-%E5%88%9B%E5%BB%BAspi%E5%AE%9E%E4%BE%8B">4. 创建Spi实例</a></li><li><a href="#5-%E6%B3%A8%E5%86%8Cspi">5. 注册Spi</a></li><li><a href="#6-%E7%99%BB%E9%99%86%E8%A1%8C%E6%83%85%E6%9C%8D%E5%8A%A1%E5%99%A8">6. 登陆行情服务器</a></li><li><a href="#7-%E6%9F%A5%E8%AF%A2%E8%A1%8C%E6%83%85%E9%9D%99%E6%80%81%E4%BF%A1%E6%81%AF">7. 查询行情静态信息</a></li><li><a href="#8-%E8%AE%A2%E9%98%85%E8%A1%8C%E6%83%85">8. 订阅行情</a></li><li><a href="#9-%E5%A4%84%E7%90%86%E5%9B%9E%E8%B0%83%E6%B6%88%E6%81%AF">9. 处理回调消息</a></li><li><a href="#10-%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E">10. 断线重连</a></li></ul></li><li><a href="#%E4%B8%89-%E8%A1%8C%E6%83%85%E8%AE%A2%E9%98%85%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98">三. 行情订阅需注意的问题</a></li></ul>',1),v=e(`<br><br><h1 id="一-行情库介绍" tabindex="-1"><a class="header-anchor" href="#一-行情库介绍"><span>一. 行情库介绍</span></a></h1><p>该文档旨在帮助开发者快速使用极速交易平台XTP的行情API，文中是Quote-API接口调用示例。</p><br><h2 id="_1-头文件" tabindex="-1"><a class="header-anchor" href="#_1-头文件"><span>1. 头文件</span></a></h2><br><table><thead><tr><th>文件名</th><th>详情</th></tr></thead><tbody><tr><td><code>xtp_quote_api.h</code></td><td>行情接口头文件，行情订阅接口类。</td></tr><tr><td><code>xtp_api_struct.h</code></td><td>业务数据结构。</td></tr><tr><td><code>xtp_api_data_type.h</code></td><td>交易和行情的数据基本类型。</td></tr><tr><td><code>xtp_api_struct_common.h</code></td><td>定义业务公共数据结构。</td></tr><tr><td><code>xoms_api_fund_struct.h</code></td><td>定义资金划拨数据结构。</td></tr><tr><td><code>xoms_api_struct.h</code></td><td>定义交易所需数据结构。</td></tr><tr><td><code>xquote_api_struct.h</code></td><td>定义行情所需数据结构。</td></tr><tr><td><code>xquote_api_rebuild_tbt_struct.h</code></td><td>定义行情回补所需数据结构。</td></tr></tbody></table><h2 id="_2-库文件" tabindex="-1"><a class="header-anchor" href="#_2-库文件"><span>2. 库文件</span></a></h2><br><table><thead><tr><th>适用系统</th><th>文件名</th></tr></thead><tbody><tr><td>windows</td><td><code>xtpquoteapi.dll xtpquoteapi.lib</code></td></tr><tr><td>linux</td><td><code>libxtpquoteapi.so</code></td></tr><tr><td>macos</td><td><code>libxtpquoteapi.dylib</code></td></tr></tbody></table><br><h2 id="_3-接口说明" tabindex="-1"><a class="header-anchor" href="#_3-接口说明"><span>3. 接口说明</span></a></h2><ul><li>(1) 行情API提供了两个接口类：行情订阅类QuoteApi接口和行情回调类QuoteSpi接口。</li><li>(2) 行情通知是通过异步方式提供。</li><li>(3) 客户端应用程序可通过QuoteApi发出订阅行情请求，通过继承QuoteSpi并重写回调函数来响应后台服务，处理行情数据。</li><li>(4) XTP的库文件目前只支持64位的，注意创建64位的工程，并且设置64位的编译器来进行编译。</li></ul><br><h1 id="二-quick-start" tabindex="-1"><a class="header-anchor" href="#二-quick-start"><span>二. Quick Start</span></a></h1><h2 id="_1-创建api实例" tabindex="-1"><a class="header-anchor" href="#_1-创建api实例"><span>1. 创建Api实例</span></a></h2><p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> m_pQuoteApi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">uint8_t</span> client_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//一个进程一个client id，可在[1, 99]区间内任选，并固定下来</span>
	std<span class="token double-colon punctuation">::</span>string save_file_path <span class="token operator">=</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">;</span><span class="token comment">//保存xtp api日志的路径，需要有可读写权限</span>
	XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">;</span><span class="token comment">//xtp api日志的输出级别，建议调试时使用debug级别，正常运行时使用info级别</span>
	<span class="token comment">///创建QuoteApi</span>
	m_pQuoteApi <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">QuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span>client_id<span class="token punctuation">,</span> save_file_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log_level<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> m_pQuoteApi<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//创建API失败</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-初始化api参数" tabindex="-1"><a class="header-anchor" href="#_2-初始化api参数"><span>2. 初始化Api参数</span></a></h2><h3 id="_1-设定心跳超时时间" tabindex="-1"><a class="header-anchor" href="#_1-设定心跳超时时间"><span>（1）设定心跳超时时间</span></a></h3><p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">///设定行情服务器超时时间，单位为秒，默认是15s，调试时可以设定大点</span>
	<span class="token keyword">uint32_t</span> heat_beat_interval <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span>heat_beat_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-设定udp缓存buffer" tabindex="-1"><a class="header-anchor" href="#_2-设定udp缓存buffer"><span>（2）设定UDP缓存buffer</span></a></h3>`,24),m=e(`<p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">//设定UDP本地缓存buffer大小，单位为MB</span>
	<span class="token keyword">int</span> buffer_size <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//2.2.30.7以上版本api，建议不超过512，最大仅支持1024</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SetUDPBufferSize</span><span class="token punctuation">(</span>buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-设定udp异步输出日志" tabindex="-1"><a class="header-anchor" href="#_3-设定udp异步输出日志"><span>（3）设定UDP异步输出日志</span></a></h3>`,3),b=e(`<p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">//设定是否输出异步日志</span>
	<span class="token keyword">bool</span>  log_output_flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//刚实盘运行时，或者调试测试时，建议开启，实盘运行正常后，可以关闭</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SetUDPSeqLogOutPutFlag</span><span class="token punctuation">(</span>log_output_flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建spi类" tabindex="-1"><a class="header-anchor" href="#_3-创建spi类"><span>3. 创建Spi类</span></a></h2><p>如果想要获取行情数据，必须得有自己的回调响应类。下面仅以快照行情为例，创建了一个Spi回调响应类MyQuoteSpi，具体步骤如下：</p><h3 id="_1-继承xtp-api-quotespi-创建自己的spi类myquotespi" tabindex="-1"><a class="header-anchor" href="#_1-继承xtp-api-quotespi-创建自己的spi类myquotespi"><span>（1）继承XTP::API::QuoteSpi，创建自己的Spi类MyQuoteSpi</span></a></h3><p>quote_spi.h文件,行情回调类接口定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_quote_api.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyQuoteSpi</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QuoteSpi</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///行情服务器断线通知</span>
	<span class="token keyword">void</span> <span class="token function">OnDisconnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///订阅快照行情应答</span>
	<span class="token keyword">void</span> <span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">///订阅快照行情应答</span>
	<span class="token keyword">void</span> <span class="token function">OnUnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">///查询合约完整静态信息的应答</span>
	<span class="token keyword">void</span> <span class="token function">OnQueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTPQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">///快照行情通知，包含买一卖一队列</span>
    <span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/// 快照行情中ETF的IOPV通知</span>
	<span class="token keyword">void</span> <span class="token function">OnETFIOPVData</span><span class="token punctuation">(</span>IOPV <span class="token operator">*</span>iopv<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//TODO:如果需要订阅其他行情，请继续重写其他行情回调函数</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-重写回调函数逻辑" tabindex="-1"><a class="header-anchor" href="#_2-重写回调函数逻辑"><span>（2）重写回调函数逻辑</span></a></h3><p>quote_spi.cpp文件，行情回调类接口实现：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;quote_spi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">extern</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> m_pQuoteApi<span class="token punctuation">;</span>

<span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnDisconnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//行情服务器断线后，此函数会被调用</span>
	<span class="token comment">//TODO:重新login，并在login成功后，再次订阅</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//订阅失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnSubMarketData -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//订阅成功</span>
	<span class="token comment">//TODO:当is_last == true时，触发其他用户逻辑	</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnUnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//取消订阅失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnUnSubMarketData -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//退阅成功</span>
	<span class="token comment">//TODO:当is_last == true时，触发其他用户逻辑	</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnQueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTPQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//查询失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnQueryAllTickersFullInfo -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//查询成功</span>
	<span class="token comment">//TODO:将查询结果缓存</span>
	
	<span class="token comment">//如果是最后一个响应，通知后续逻辑</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_last <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>		
		<span class="token comment">//TODO:通知后续逻辑，例如可以在查询沪市结束后，再次发起查询深市的查询请求</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ticker_info<span class="token operator">-&gt;</span>exchange_id <span class="token operator">==</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//当沪市的静态行情查询完毕后，查询深市行情静态信息</span>
			m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_SZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//TODO:触发后续逻辑</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//收到行情快照数据</span>
	<span class="token comment">//TODO:用户处理逻辑，注意此处不能仅仅保存数据的指针，指针所指向的内存数据将在此函数return后失效</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span>  <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnETFIOPVData</span><span class="token punctuation">(</span>IOPV <span class="token operator">*</span>iopv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//收到行情快照中ETF的IOPV信息</span>
	<span class="token comment">//TODO:用户处理逻辑</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-创建spi实例" tabindex="-1"><a class="header-anchor" href="#_4-创建spi实例"><span>4. 创建Spi实例</span></a></h2><p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">//创建Spi实例</span>
	MyQuoteSpi<span class="token operator">*</span> m_pQuoteSpi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-注册spi" tabindex="-1"><a class="header-anchor" href="#_5-注册spi"><span>5. 注册Spi</span></a></h2><p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">//注册Spi</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>m_pQuoteSpi<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-登陆行情服务器" tabindex="-1"><a class="header-anchor" href="#_6-登陆行情服务器"><span>6. 登陆行情服务器</span></a></h2><p>示例代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器ip地址</span>
	<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span class="token comment">//行情服务器端口port</span>
	std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆账户名</span>
	std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆密码</span>
	XTP_PROTOCOL_TYPE protocol_type <span class="token operator">=</span> XTP_PROTOCOL_TCP<span class="token punctuation">;</span><span class="token comment">//Level1服务器通常使用TCP，具体以运营通知为准，Level2服务器请用UDP，公网测试环境均为TCP，以实际服务器支持的类型为准</span>
	std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//本地网卡对应的ip</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol_type<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 登录失败，获取错误信息</span>
		XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 登录成功</span>
	<span class="token comment">//TODO: 用户逻辑，例如查询静态数据、订阅行情等</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-查询行情静态信息" tabindex="-1"><a class="header-anchor" href="#_7-查询行情静态信息"><span>7. 查询行情静态信息</span></a></h2>`,20),_=n("br",null,null,-1),h=n("strong",null,"请在一个市场查询结果全部回来后再发起另一个市场的查询，否则容易引起断线。",-1),f=n("br",null,null,-1),y=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">//查询沪市行情静态信息</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-订阅行情" tabindex="-1"><a class="header-anchor" href="#_8-订阅行情"><span>8. 订阅行情</span></a></h2>`,2),g=n("br",null,null,-1),w=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token comment">// 申请内存</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//订阅沪市的600000、600001两只股票快照行情 </span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-处理回调消息" tabindex="-1"><a class="header-anchor" href="#_9-处理回调消息"><span>9. 处理回调消息</span></a></h2>`,2),E=n("strong",null,"OnSubMarketData()",-1),x=n("strong",null,"OnDepthMarketData()",-1),A=n("strong",null,"OnETFIOPVData()",-1),P=n("li",null,"其余逐笔和订单簿行情，可参照快照行情进行订阅和重写函数逻辑。",-1),q=n("h2",{id:"_10-断线重连",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-断线重连"},[n("span",null,"10. 断线重连")])],-1),T=n("strong",null,"OnDisconnected()",-1),D=n("strong",null,"Login()",-1),S=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnDisconnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//行情服务器断线后，此函数会被调用</span>
	<span class="token comment">//TODO:重新login，并在login成功后，再次订阅</span>

	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Disconnect from quote server. &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

	<span class="token comment">//重新登陆行情服务器</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ret <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 登录失败，获取错误信息</span>
			XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

			<span class="token comment">//等待10s以后再次连接，可修改此等待时间，建议不要小于3s</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
			<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _WIN32	</span></span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//重连成功</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server success. &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token comment">//再次订阅行情快照</span>
	<span class="token function">subscribeMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三-行情订阅需注意的问题" tabindex="-1"><a class="header-anchor" href="#三-行情订阅需注意的问题"><span>三. 行情订阅需注意的问题</span></a></h1>`,2),Q=n("strong",null,"TCP",-1),I=n("strong",null,"UDP",-1),O=n("strong",null,"TCP",-1),B=n("strong",null,"local_ip",-1),X=n("strong",null,"QueryAllTickersFullInfo()",-1),F=n("li",null,"(4) 在行情回调函数中，请尽快处理行情数据并返回，否则可能会因为接收缓存满而导致断线。",-1),M=n("li",null,"(5) 如果连接的是UDP行情服务器，无论是否订阅，都是行情全接收后再本地Api筛选过滤。",-1),C=n("strong",null,"SetUDPBufferSize()",-1),L=n("strong",null,"256MB",-1),N=n("strong",null,"512MB",-1),U=n("strong",null,"配对",-1),R=e(`<h1 id="四-简单demo示例代码" tabindex="-1"><a class="header-anchor" href="#四-简单demo示例代码"><span>四. 简单Demo示例代码</span></a></h1><p>下面是一个简单的代码示例，演示了行情API通过TCP方式连接Level1行情服务器的过程，包括：创建、初始化、登录行情、查询行情静态信息、订阅行情、断线重连。<br> main.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_quote_api.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;quote_spi.h&quot;</span></span>

XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> m_pQuoteApi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//全局变量，程序共用一个api</span>
std<span class="token double-colon punctuation">::</span>string quote_server_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器ip地址</span>
<span class="token keyword">int</span> quote_server_port <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span class="token comment">//行情服务器端口port</span>
std<span class="token double-colon punctuation">::</span>string quote_username <span class="token operator">=</span> <span class="token string">&quot;xxxxxxxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆账户名</span>
std<span class="token double-colon punctuation">::</span>string quote_password <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆密码</span>
XTP_PROTOCOL_TYPE protocol_type <span class="token operator">=</span> XTP_PROTOCOL_TCP<span class="token punctuation">;</span><span class="token comment">//Level1服务器通常使用TCP，Level2服务器请用UDP，公网测试环境均为TCP，具体以运营通知为准</span>
std<span class="token double-colon punctuation">::</span>string local_ip <span class="token operator">=</span> <span class="token string">&quot;xxx.xxx.xxx.xxx&quot;</span><span class="token punctuation">;</span><span class="token comment">//本地网卡对应的ip</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">uint8_t</span> client_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//一个进程一个client id，可在[1, 99]区间内任选，并固定下来</span>
	std<span class="token double-colon punctuation">::</span>string save_file_path <span class="token operator">=</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">;</span><span class="token comment">//保存xtp api日志的路径，需要有可读写权限</span>
	XTP_LOG_LEVEL log_level <span class="token operator">=</span> XTP_LOG_LEVEL_DEBUG<span class="token punctuation">;</span><span class="token comment">//xtp api日志的输出级别，建议调试时使用debug级别，正常运行时使用info级别</span>
												  <span class="token comment">///创建QuoteApi</span>
	m_pQuoteApi <span class="token operator">=</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span><span class="token class-name">QuoteApi</span><span class="token double-colon punctuation">::</span><span class="token function">CreateQuoteApi</span><span class="token punctuation">(</span>client_id<span class="token punctuation">,</span> save_file_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> log_level<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> m_pQuoteApi<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//创建API失败</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">///设定行情服务器超时时间，单位为秒，默认是15s，调试时可以设定大点</span>
	<span class="token keyword">uint32_t</span> heat_beat_interval <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SetHeartBeatInterval</span><span class="token punctuation">(</span>heat_beat_interval<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//以下代码段如果是TCP连接的话,需要跳过</span>
	<span class="token comment">//设定UDP本地缓存buffer大小，单位为MB</span>
	<span class="token comment">//int buffer_size = 512;//2.2.30.7以上版本api，建议不超过512，最大仅支持1024</span>
	<span class="token comment">//m_pQuoteApi-&gt;SetUDPBufferSize(buffer_size);</span>
	<span class="token comment">//设定是否输出异步日志</span>
	<span class="token comment">//bool  log_output_flag = true;//刚实盘运行时，或者调试测试时，建议开启，实盘运行正常后，可以关闭</span>
	<span class="token comment">//m_pQuoteApi-&gt;SetUDPSeqLogOutPutFlag(log_output_flag);</span>

	<span class="token comment">//创建Spi实例</span>
	MyQuoteSpi<span class="token operator">*</span> m_pQuoteSpi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> m_pQuoteSpi<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//创建行情Spi失败</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//注册Spi</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">RegisterSpi</span><span class="token punctuation">(</span>m_pQuoteSpi<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//登陆行情服务器</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol_type<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 登录失败，获取错误信息</span>
		XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 登录成功</span>
	<span class="token comment">//TODO: 用户逻辑，例如查询静态数据、订阅行情等，以下以查询沪市静态信息为例</span>

	<span class="token comment">//查询沪市行情静态信息</span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//保持主线程，防止程序退出</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
		<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
		<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _WIN32		</span></span>
	<span class="token punctuation">}</span>
	

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyQuoteSpi类相关定义和实现文件。 quote_spi.h文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;xtp_quote_api.h&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyQuoteSpi</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QuoteSpi</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">~</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///行情服务器断线通知</span>
	<span class="token keyword">void</span> <span class="token function">OnDisconnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///订阅快照行情应答</span>
	<span class="token keyword">void</span> <span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///订阅快照行情应答</span>
	<span class="token keyword">void</span> <span class="token function">OnUnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///查询合约完整静态信息的应答</span>
	<span class="token keyword">void</span> <span class="token function">OnQueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTPQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">///快照行情通知，包含买一卖一队列</span>
	<span class="token keyword">void</span> <span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//TODO:如果需要订阅其他行情，请继续重写其他行情回调函数</span>

<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">subscribeMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//订阅行情</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>quote_spi.cpp文件</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;quote_spi.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _WIN32</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">extern</span> XTP<span class="token double-colon punctuation">::</span>API<span class="token double-colon punctuation">::</span>QuoteApi<span class="token operator">*</span> m_pQuoteApi<span class="token punctuation">;</span>
<span class="token keyword">extern</span> std<span class="token double-colon punctuation">::</span>string quote_server_ip<span class="token punctuation">;</span><span class="token comment">//行情服务器ip地址</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> quote_server_port<span class="token punctuation">;</span><span class="token comment">//行情服务器端口port</span>
<span class="token keyword">extern</span> std<span class="token double-colon punctuation">::</span>string quote_username<span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆账户名</span>
<span class="token keyword">extern</span> std<span class="token double-colon punctuation">::</span>string quote_password<span class="token punctuation">;</span><span class="token comment">//行情服务器的登陆密码</span>
<span class="token keyword">extern</span> XTP_PROTOCOL_TYPE protocol_type<span class="token punctuation">;</span><span class="token comment">//Level1服务器使用TCP，Level2服务器请用UDP，公网测试环境均为TCP，具体以运营通知为准</span>
<span class="token keyword">extern</span> std<span class="token double-colon punctuation">::</span>string local_ip<span class="token punctuation">;</span><span class="token comment">//本地网卡对应的ip</span>

<span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">MyQuoteSpi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnDisconnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//行情服务器断线后，此函数会被调用</span>
	<span class="token comment">//TODO:重新login，并在login成功后，再次订阅</span>

	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Disconnect from quote server. &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

	<span class="token comment">//重新登陆行情服务器</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ret <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">Login</span><span class="token punctuation">(</span>quote_server_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_server_port<span class="token punctuation">,</span> quote_username<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_password<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol_type<span class="token punctuation">,</span> local_ip<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 登录失败，获取错误信息</span>
			XTPRI<span class="token operator">*</span> error_info <span class="token operator">=</span> m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">GetApiLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server error, &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

			<span class="token comment">//等待10s以后再次连接，可修改此等待时间，建议不要小于3s</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
			<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
			<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// _WIN32	</span></span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//重连成功</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;login to server success. &quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token comment">//再次订阅行情快照</span>
	<span class="token function">subscribeMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//订阅失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnSubMarketData -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//订阅成功</span>
	<span class="token comment">//TODO:当is_last == true时，触发其他用户逻辑	</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnUnSubMarketData</span><span class="token punctuation">(</span>XTPST <span class="token operator">*</span>ticker<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//取消订阅失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnUnSubMarketData -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//退阅成功</span>
	<span class="token comment">//TODO:当is_last == true时，触发其他用户逻辑	</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnQueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTPQFI<span class="token operator">*</span> ticker_info<span class="token punctuation">,</span> XTPRI <span class="token operator">*</span>error_info<span class="token punctuation">,</span> <span class="token keyword">bool</span> is_last<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>error_info <span class="token operator">&amp;&amp;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//查询失败</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;OnQueryAllTickersFullInfo -----&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;error_id = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_id <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, error_msg = &quot;</span> <span class="token operator">&lt;&lt;</span> error_info<span class="token operator">-&gt;</span>error_msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//查询成功</span>
	<span class="token comment">//TODO:将查询结果缓存</span>

	<span class="token comment">//如果是最后一个响应，通知后续逻辑</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>is_last <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//TODO:通知后续逻辑，例如可以在查询沪市结束后，再次发起查询深市的查询请求</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ticker_info<span class="token operator">-&gt;</span>exchange_id <span class="token operator">==</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//当沪市的静态行情查询完毕后，查询深市行情静态信息</span>
			m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">QueryAllTickersFullInfo</span><span class="token punctuation">(</span>XTP_EXCHANGE_SZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token comment">//TODO:触发后续逻辑，例如可以订阅快照行情</span>
			<span class="token function">subscribeMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">OnDepthMarketData</span><span class="token punctuation">(</span>XTPMD <span class="token operator">*</span>market_data<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> bid1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bid1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_bid1_count<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> ask1_qty<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int32_t</span> ask1_count<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> max_ask1_count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//收到行情快照数据</span>
	<span class="token comment">//TODO:用户处理逻辑，注意此处不能仅仅保存数据的指针，指针所指向的内存数据将在此函数return后失效</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">MyQuoteSpi</span><span class="token double-colon punctuation">::</span><span class="token function">subscribeMarketData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 申请内存，初始化订阅参数</span>
	<span class="token keyword">int</span> ticker_count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//需要订阅行情的证券代码数量，可根据实际订阅需求改动</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ppInstrumentID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">[</span>ticker_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>XTP_TICKER_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy_s</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> XTP_TICKER_LEN<span class="token punctuation">,</span> <span class="token string">&quot;600001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//订阅沪市的600000、600001两只股票快照行情 </span>
	m_pQuoteApi<span class="token operator">-&gt;</span><span class="token function">SubscribeMarketData</span><span class="token punctuation">(</span>ppInstrumentID<span class="token punctuation">,</span> ticker_count<span class="token punctuation">,</span> XTP_EXCHANGE_SH<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 释放内存</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ticker_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		ppInstrumentID<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ppInstrumentID<span class="token punctuation">;</span>
	ppInstrumentID <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function G(V,H){const a=l("font");return i(),u("div",null,[d,o(" TOC "),k,o(" /TOC "),v,t(a,{color:"#FF0000"},{default:p(()=>[s("**如果行情服务器是仅支持TCP连接的服务器，此步骤可以跳过。**")]),_:1}),s(),m,t(a,{color:"#FF0000"},{default:p(()=>[s("**如果行情服务器是仅支持TCP连接的服务器，此步骤可以跳过。**")]),_:1}),s(),b,n("p",null,[s("一次只能查单个市场，如果需要查沪深2市场，需要"),t(a,{color:"#FF0000"},{default:p(()=>[s("分开2次调用")]),_:1}),s("。"),_,h,f,s(" 示例代码如下：")]),y,n("ul",null,[n("li",null,[s("采用"),t(a,{color:"#FF0000"},{default:p(()=>[s("TCP")]),_:1}),s("方式连接的行情服务器,推荐使用"),t(a,{color:"#FF0000"},{default:p(()=>[s("SubscribeMarketData()")]),_:1}),s("单订阅行情。")]),n("li",null,[s("采用"),t(a,{color:"#FF0000"},{default:p(()=>[s("UDP")]),_:1}),s("方式连接的行情服务器，推荐使用"),t(a,{color:"#FF0000"},{default:p(()=>[s("全订阅函数")]),_:1}),s("进行全市场订阅。"),g,s(" 下面以单订阅2只股票为例,示例代码如下：")])]),w,n("ul",null,[n("li",null,[s("发起快照订阅请求后，无论是否订阅成功，Spi都将收到快照订阅响应。可根据需要重写"),t(a,{color:"#FF0000"},{default:p(()=>[E]),_:1}),s("函数逻辑。")]),n("li",null,[s("如果快照订阅成功，快照行情将通过"),t(a,{color:"#FF0000"},{default:p(()=>[x]),_:1}),s("回调函数推送给用户。此时用户可根据收到的行情数据重写程序逻辑。")]),n("li",null,[s("如果快照订阅种类为ETF，ETF的IOPV信息可以通过"),t(a,{color:"#FF0000"},{default:p(()=>[A]),_:1}),s("回调函数推送给用户。此时用户可根据收到的IOPV数据重写程序逻辑。")]),P]),q,n("p",null,[s("重写"),t(a,{color:"#FF0000"},{default:p(()=>[T]),_:1}),s("回调函数，总体思路是调用"),t(a,{color:"#FF0000"},{default:p(()=>[D]),_:1}),s("重连成功后，重新订阅快照行情。示例代码如下：")]),S,n("ul",null,[n("li",null,[s("(1) Level1行情服务器通常仅支持TCP连接，请使用"),t(a,{color:"#FF0000"},{default:p(()=>[Q]),_:1}),s("连接，具体以哪种方式连接请以运营通知为准。Level2行情服务器，请使用"),t(a,{color:"#FF0000"},{default:p(()=>[I]),_:1}),s("连接。公网测试环境均使用"),t(a,{color:"#FF0000"},{default:p(()=>[O]),_:1}),s("连接。")]),n("li",null,[s("(2) 登录时，"),t(a,{color:"#FF0000"},{default:p(()=>[B]),_:1}),s("可以是NULL, 但不能是空串，最好传入要使用的网卡上的ip。")]),n("li",null,[s("(3) 证券代码基本信息可通过"),t(a,{color:"#FFA500"},{default:p(()=>[X]),_:1}),s("查询合约的完整静态信息，并在本地建立一个证券信息索引表。为了避免因缓慢满而导致的断线，沪深交易所请分开查询，且在一个市场查询完成后，再发起查询另一个市场信息的查询请求。")]),F,M,n("li",null,[s("(6) 使用UDP行情服务器时，如果本地缓存满了，会引发丢包。请务必在Login之前调用"),t(a,{color:"#FFA500"},{default:p(()=>[C]),_:1}),s("设置，推荐"),t(a,{color:"#FF0000"},{default:p(()=>[L]),_:1}),s("或"),t(a,{color:"#FF0000"},{default:p(()=>[N]),_:1}),s("。")]),n("li",null,[s("(7) 使用订阅/退订函数，请注意"),t(a,{color:"#FF0000"},{default:p(()=>[U]),_:1}),s("使用。不支持全订阅后，再退订部分，或者订阅部分再全退订。")])]),R])}const K=c(r,[["render",G],["__file","XTP行情Quote-API使用指南QuickStart.html.vue"]]),Z=JSON.parse('{"path":"/docs/API_DOC_XTP%E8%A1%8C%E6%83%85Quote-API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97QuickStart/XTP%E8%A1%8C%E6%83%85Quote-API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97QuickStart.html","title":"XTP行情Quote-API使用示例说明","lang":"zh-CN","frontmatter":{"description":"XTP行情Quote-API使用示例说明 一. 行情库介绍 1. 头文件 2. 库文件 3. 接口说明 二. Quick Start 1. 创建Api实例 2. 初始化Api参数 （1）设定心跳超时时间 （2）设定UDP缓存buffer （3）设定UDP异步输出日志 3. 创建Spi类 （1）继承XTP::API::QuoteSpi，创建自己的Spi类...","head":[["meta",{"property":"og:url","content":"https://10000l.github.io/docs/API_DOC_XTP%E8%A1%8C%E6%83%85Quote-API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97QuickStart/XTP%E8%A1%8C%E6%83%85Quote-API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97QuickStart.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"XTP行情Quote-API使用示例说明"}],["meta",{"property":"og:description","content":"XTP行情Quote-API使用示例说明 一. 行情库介绍 1. 头文件 2. 库文件 3. 接口说明 二. Quick Start 1. 创建Api实例 2. 初始化Api参数 （1）设定心跳超时时间 （2）设定UDP缓存buffer （3）设定UDP异步输出日志 3. 创建Spi类 （1）继承XTP::API::QuoteSpi，创建自己的Spi类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T15:52:56.000Z"}],["meta",{"property":"article:author","content":"xtp_master"}],["meta",{"property":"article:modified_time","content":"2024-06-03T15:52:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"XTP行情Quote-API使用示例说明\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T15:52:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xtp_master\\",\\"url\\":\\"https://xtp.zts.com.cn\\"}]}"]]},"headers":[{"level":2,"title":"1.  头文件","slug":"_1-头文件","link":"#_1-头文件","children":[]},{"level":2,"title":"2.  库文件","slug":"_2-库文件","link":"#_2-库文件","children":[]},{"level":2,"title":"3.  接口说明","slug":"_3-接口说明","link":"#_3-接口说明","children":[]},{"level":2,"title":"1. 创建Api实例","slug":"_1-创建api实例","link":"#_1-创建api实例","children":[]},{"level":2,"title":"2. 初始化Api参数","slug":"_2-初始化api参数","link":"#_2-初始化api参数","children":[{"level":3,"title":"（1）设定心跳超时时间","slug":"_1-设定心跳超时时间","link":"#_1-设定心跳超时时间","children":[]},{"level":3,"title":"（2）设定UDP缓存buffer","slug":"_2-设定udp缓存buffer","link":"#_2-设定udp缓存buffer","children":[]},{"level":3,"title":"（3）设定UDP异步输出日志","slug":"_3-设定udp异步输出日志","link":"#_3-设定udp异步输出日志","children":[]}]},{"level":2,"title":"3. 创建Spi类","slug":"_3-创建spi类","link":"#_3-创建spi类","children":[{"level":3,"title":"（1）继承XTP::API::QuoteSpi，创建自己的Spi类MyQuoteSpi","slug":"_1-继承xtp-api-quotespi-创建自己的spi类myquotespi","link":"#_1-继承xtp-api-quotespi-创建自己的spi类myquotespi","children":[]},{"level":3,"title":"（2）重写回调函数逻辑","slug":"_2-重写回调函数逻辑","link":"#_2-重写回调函数逻辑","children":[]}]},{"level":2,"title":"4. 创建Spi实例","slug":"_4-创建spi实例","link":"#_4-创建spi实例","children":[]},{"level":2,"title":"5. 注册Spi","slug":"_5-注册spi","link":"#_5-注册spi","children":[]},{"level":2,"title":"6. 登陆行情服务器","slug":"_6-登陆行情服务器","link":"#_6-登陆行情服务器","children":[]},{"level":2,"title":"7. 查询行情静态信息","slug":"_7-查询行情静态信息","link":"#_7-查询行情静态信息","children":[]},{"level":2,"title":"8. 订阅行情","slug":"_8-订阅行情","link":"#_8-订阅行情","children":[]},{"level":2,"title":"9. 处理回调消息","slug":"_9-处理回调消息","link":"#_9-处理回调消息","children":[]},{"level":2,"title":"10. 断线重连","slug":"_10-断线重连","link":"#_10-断线重连","children":[]}],"git":{"createdTime":1717429976000,"updatedTime":1717429976000,"contributors":[{"name":"linxiaolx-lx","email":"1247776138@qq.com","commits":1}]},"readingTime":{"minutes":14.51,"words":4353},"filePathRelative":"docs/API_DOC_XTP行情Quote-API使用指南QuickStart/XTP行情Quote-API使用指南QuickStart.md","localizedDate":"2024年6月3日","autoDesc":true}');export{K as comp,Z as data};
